From sean@conman.org  Wed Aug 14 22:38:33 2019
From: sean@conman.org (Sean Conner)
Date: Wed, 14 Aug 2019 17:38:33 -0400
Subject: Let's get this list started
Message-ID: <20190814213833.GC28117@brevard.conman.org>


  Of the three proposed Requests For Comments I have about Gemini:

=> gemini://gemini.conman.org/gRFC/

one is no longer applicable (the text format for a Gemini index now allows
reflowing), one has been accepted (although that was in the works before I
wrote it) and one is still out there (optionally including the size of the
document).  I'm curious as to the thoughts about that last one.           

  Also, does anyone know what's up with HeavySquare.com?                  

=> gemini://heavysquare.com/                                   

  I can't seem to get anything from that server.

  -spc                                                  


From solderpunk@SDF.ORG  Thu Aug 15 08:44:06 2019
From: solderpunk@SDF.ORG (solderpunk)
Date: Thu, 15 Aug 2019 07:44:06 +0000
Subject: Let's get this list started
In-Reply-To: <20190814213833.GC28117@brevard.conman.org>
References: <20190814213833.GC28117@brevard.conman.org>
Message-ID: <20190815074406.GA26532@SDF.ORG>

> one is no longer applicable (the text format for a Gemini index now allows
> reflowing), one has been accepted (although that was in the works before I
> wrote it) and one is still out there (optionally including the size of the
> document).

I'll start separate threads about text reflowing and size shortly, so we
can keep separate topics in separate threads to make it easy for people
to follow things they care about.

>   Also, does anyone know what's up with HeavySquare.com?                  
> 
> => gemini://heavysquare.com/                                   
> 
>   I can't seem to get anything from that server.

Me neither, I get a header of "4\tNot Found." for everything.  I'll
email the admin and see if I can find out what's happening.

-Solderpunk


From sean@conman.org  Thu Aug 15 09:13:53 2019
From: sean@conman.org (Sean Conner)
Date: Thu, 15 Aug 2019 04:13:53 -0400
Subject: Let's get this list started
In-Reply-To: <20190815074406.GA26532@SDF.ORG>
References: <20190814213833.GC28117@brevard.conman.org>
 <20190815074406.GA26532@SDF.ORG>
Message-ID: <20190815081352.GE21685@brevard.conman.org>

It was thus said that the Great solderpunk once stated:
> > one is no longer applicable (the text format for a Gemini index now allows
> > reflowing), one has been accepted (although that was in the works before I
> > wrote it) and one is still out there (optionally including the size of the
> > document).
> 
> I'll start separate threads about text reflowing and size shortly, so we
> can keep separate topics in separate threads to make it easy for people
> to follow things they care about.
> 
> >   Also, does anyone know what's up with HeavySquare.com?                  
> > 
> > => gemini://heavysquare.com/                                   
> > 
> >   I can't seem to get anything from that server.
> 
> Me neither, I get a header of "4\tNot Found." for everything.  I'll
> email the admin and see if I can find out what's happening.

  Oh ... this list subscribes to the "don't munge the Reply-To" header ...
sigh.  

  -spc


From solderpunk@SDF.ORG  Thu Aug 15 09:18:59 2019
From: solderpunk@SDF.ORG (solderpunk)
Date: Thu, 15 Aug 2019 08:18:59 +0000
Subject: Text reflow woes (or: I want bullets back!)
Message-ID: <20190815081859.GB26532@SDF.ORG>

I was surprised and excited today to spot a (beta) web-to-Gemini
portal at https://portal.mozz.us/.  By default it points at the
Zaibatsu, and my first thoughs upon seeing it rendered was "Oh, what a
shame, it messes up the bullet point list at the top of the page".

But, no, nothing is messed up here, this is precisely what I specced
in 0.9.1 with the text reflowing!

I'm kind of sad about this.  I was resolved to destroying the
possibility of ASCII art in Gemini pages as an unfortunate "breaking
eggs to make an omlette" kind of thing.  I agree with the many people
who have expressed frustration at Gopher content looking wonky if
viewed on anything other than an 70 or 80 character wide terminal.
But obviously I didn't think the consequences of the way I specced
things through very carefully, because I wouldn't have been anywhere
near as happy about destroying the possibility of bulleted lists.
Those are a really useful and legitimate thing for text-based content
to have.

So, how do we fix this?

Of course there has been plenty of talk in the past about using some
fullblown lightweight markup language for Gemini, something like
Markdown for example, or ratfactor's "Text Junior" (ooh, I should
invite ratfactor to this list).  I was a proponent of this in the
beginning but I moved away from it quickly after it became clear that
(i) people have strong opinions on lightweight markup languages and
no choice was going to be popular with everybody, and (ii) lots of
popular lightweight markup languages either lack a clear and
unambiguous specification, or they have one and it's a difficult thing
to write a parser for.  In the end I put in the very minimal
definition of reflowability that I did because it had an existing RFC
reference and didn't seem *too* onerous to implement (and, anyway,
is optional).

But now it seems we need something more than just that.  We could just
add one more sentence saying that lines beginning with optional
whitespace, a * and then at least one whitespace character should not
be flowed, just like lines beginning with => should not be flowed.
But that's likely the first step down a slippery slope to inventing
our own ad-hoc non-standard markup language.  Which perhaps we *ought*
to do, but if so we ought to actually explicitly decide on it and
commit to doing it properly in one go instead of designing it
piecemeal.

The alternative would seem to be to backtrack on reflowing and say
"reflowing would be very nice, but it's not worth the cost of having
to carefully specify how to handle all the edge cases necessary to
preserve other very nice things like bullets, so tough cookies".  I
don't think that would be a popular choice, but it's still on the
table at this point, IMHO.

-Solderpunk

From solderpunk@SDF.ORG  Thu Aug 15 09:20:42 2019
From: solderpunk@SDF.ORG (solderpunk)
Date: Thu, 15 Aug 2019 08:20:42 +0000
Subject: Let's get this list started
In-Reply-To: <20190815081352.GE21685@brevard.conman.org>
References: <20190814213833.GC28117@brevard.conman.org>
 <20190815074406.GA26532@SDF.ORG>
 <20190815081352.GE21685@brevard.conman.org>
Message-ID: <20190815082042.GC26532@SDF.ORG>

>   Oh ... this list subscribes to the "don't munge the Reply-To" header ...
> sigh.  

Yeah, it's a little bit of a hassle.  I'll see if we can get that fixed.

-Solderpunk

From jmcbray@carcosa.net  Thu Aug 15 13:28:46 2019
From: jmcbray@carcosa.net (Jason McBrayer)
Date: Thu, 15 Aug 2019 07:28:46 -0500
Subject: Let's get this list started
In-Reply-To: <20190815081352.GE21685@brevard.conman.org>
References: <20190814213833.GC28117@brevard.conman.org>
 <20190815074406.GA26532@SDF.ORG> <20190815081352.GE21685@brevard.conman.org>
Message-ID: <12E2B335-FD77-4DAE-B8D3-446141D86C46@carcosa.net>

I can change the reply-to setting, if you prefer.

On August 15, 2019 3:13:53 AM CDT, Sean Conner <sean at conman.org> wrote:
>It was thus said that the Great solderpunk once stated:
>> > one is no longer applicable (the text format for a Gemini index now
>allows
>> > reflowing), one has been accepted (although that was in the works
>before I
>> > wrote it) and one is still out there (optionally including the size
>of the
>> > document).
>> 
>> I'll start separate threads about text reflowing and size shortly, so
>we
>> can keep separate topics in separate threads to make it easy for
>people
>> to follow things they care about.
>> 
>> >   Also, does anyone know what's up with HeavySquare.com?           
>      
>> > 
>> > => gemini://heavysquare.com/                                   
>> > 
>> >   I can't seem to get anything from that server.
>> 
>> Me neither, I get a header of "4\tNot Found." for everything.  I'll
>> email the admin and see if I can find out what's happening.
>
>Oh ... this list subscribes to the "don't munge the Reply-To" header
>...
>sigh.  
>
>  -spc

-- 
Sent from my Android device with K-9 Mail. Please excuse my brevity.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.orbitalfox.eu/archives/gemini/attachments/20190815/1bd412a7/attachment.htm>

From jmcbray@carcosa.net  Thu Aug 15 13:34:35 2019
From: jmcbray@carcosa.net (Jason McBrayer)
Date: Thu, 15 Aug 2019 07:34:35 -0500
Subject: Let's get this list started
In-Reply-To: <12E2B335-FD77-4DAE-B8D3-446141D86C46@carcosa.net>
References: <20190814213833.GC28117@brevard.conman.org>
 <20190815074406.GA26532@SDF.ORG> <20190815081352.GE21685@brevard.conman.org>
 <12E2B335-FD77-4DAE-B8D3-446141D86C46@carcosa.net>
Message-ID: <B762F5C8-00F1-4B26-ADCF-107F0DF6F7B7@carcosa.net>

Normally I don't top-post, but I am on mobile. Sorry about that.
-- 
Sent from my Android device with K-9 Mail. Please excuse my brevity.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.orbitalfox.eu/archives/gemini/attachments/20190815/30375dd2/attachment.htm>

From solderpunk@SDF.ORG  Thu Aug 15 15:03:59 2019
From: solderpunk@SDF.ORG (solderpunk)
Date: Thu, 15 Aug 2019 14:03:59 +0000
Subject: Let's get this list started
In-Reply-To: <12E2B335-FD77-4DAE-B8D3-446141D86C46@carcosa.net>
References: <20190814213833.GC28117@brevard.conman.org>
 <20190815074406.GA26532@SDF.ORG>
 <20190815081352.GE21685@brevard.conman.org>
 <12E2B335-FD77-4DAE-B8D3-446141D86C46@carcosa.net>
Message-ID: <20190815140359.GA28953@SDF.ORG>

> I can change the reply-to setting, if you prefer.

Well, I for one would strongly prefer just being able to reply to any
email from the list and have it be sent only to the list, rather than
back to the author with (at best) a CC to the list (so that the author
ends up with two copies).  That system is pretty cumbersome and I've
never quite understood why it's so common.

Does the backend for this list permit something like that?

-Solderpunk

From solderpunk@SDF.ORG  Thu Aug 15 15:04:42 2019
From: solderpunk@SDF.ORG (solderpunk)
Date: Thu, 15 Aug 2019 14:04:42 +0000
Subject: Let's get this list started
In-Reply-To: <B762F5C8-00F1-4B26-ADCF-107F0DF6F7B7@carcosa.net>
References: <20190814213833.GC28117@brevard.conman.org>
 <20190815074406.GA26532@SDF.ORG>
 <20190815081352.GE21685@brevard.conman.org>
 <12E2B335-FD77-4DAE-B8D3-446141D86C46@carcosa.net>
 <B762F5C8-00F1-4B26-ADCF-107F0DF6F7B7@carcosa.net>
Message-ID: <20190815140442.GB28953@SDF.ORG>

> Normally I don't top-post, but I am on mobile. Sorry about that.

No worries, I'm not that bothered by it, personally.

-Solderpunk

From jmcbray@carcosa.net  Thu Aug 15 15:07:28 2019
From: jmcbray@carcosa.net (Jason McBrayer)
Date: Thu, 15 Aug 2019 09:07:28 -0500
Subject: Let's get this list started
In-Reply-To: <20190815140359.GA28953@SDF.ORG>
References: <20190814213833.GC28117@brevard.conman.org>
 <20190815074406.GA26532@SDF.ORG> <20190815081352.GE21685@brevard.conman.org>
 <12E2B335-FD77-4DAE-B8D3-446141D86C46@carcosa.net>
 <20190815140359.GA28953@SDF.ORG>
Message-ID: <DDA81601-51E4-4741-BAF5-8325D4F90F5D@carcosa.net>

> Does the backend for this list permit something like that?

Yes, I have changed the relevant setting. It will not override an explicit reply-to by the author, but if there is none, it will add a reply-to to the list.
-- 
Sent from my Android device with K-9 Mail. Please excuse my brevity.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.orbitalfox.eu/archives/gemini/attachments/20190815/1b50ee27/attachment.htm>

From solderpunk@SDF.ORG  Thu Aug 15 15:49:42 2019
From: solderpunk@SDF.ORG (solderpunk)
Date: Thu, 15 Aug 2019 14:49:42 +0000
Subject: Password authentication over Gemini
Message-ID: <20190815144942.GC28953@SDF.ORG>

I deliberately chose not to spec any kind of password-based
authentication in Gemini, since TLS was already mandatory and so client
certificate authentication was a possibility.  The "maximise power to
weight ratio" philosophy kind of implies a "there should be only way to
do it" philosophy as a corollary.

Anyway, I realised to my surprise yesterday morning that actually Gemini
now supports password authentication quite readily:

CLIENT:    gemini://example.com/protected-resource/
SERVER:    61 Please supply a temporary certificate to faciliate
           interactive login
CLIENT:    gemini://example.com/protected-resource/
           (with disposable certificate)
SERVER:    10 Username:
CLIENT:    gemini://example.com/protected-resource/?solderpunk
SERVER:    10 Password:
           (after storing "solderpunk" in memory, indexed by client
	   certificate fingerprint)
CLIENT:    gemini://example.com/protected-resource/?hunter2
SERVER:    21 text/gemini
           (after retrieving "solderpunk" from memory and verifying that
	   solderpunk/hunter2 matches what is stored (hashed and salted)
	   in a database

This is less hassle than using client certificates directly (i.e.
generate a persistent certificate, email the fingerprint to the remote
admin, carry your certificate around with you, all as per ssh keys),
though of course also less secure (weak passwords can be guessed,
password databases can be stolen).  Different approaches will be more or
less appropriate for different applications.

This motivates two possible changes to the spec:

Firstly, the <META> value sent with a 6x status is currently undefined.
I would propose that for 61, <META> should be a human-readable message
explaining *why* the server is politely requesting the user to
voluntarily and temporarily surrender their anonymity.  Seems only
reasonable.

Secondly, as a variant on 10, maybe 11 could carry the extra semantics
that clients should not echo user input, so it can be used for things
like passwords.

Any thoughts?

-Solderpunk


From solderpunk@SDF.ORG  Thu Aug 15 15:51:52 2019
From: solderpunk@SDF.ORG (solderpunk)
Date: Thu, 15 Aug 2019 14:51:52 +0000
Subject: Let's get this list started
In-Reply-To: <DDA81601-51E4-4741-BAF5-8325D4F90F5D@carcosa.net>
References: <20190814213833.GC28117@brevard.conman.org>
 <20190815074406.GA26532@SDF.ORG>
 <20190815081352.GE21685@brevard.conman.org>
 <12E2B335-FD77-4DAE-B8D3-446141D86C46@carcosa.net>
 <20190815140359.GA28953@SDF.ORG>
 <DDA81601-51E4-4741-BAF5-8325D4F90F5D@carcosa.net>
Message-ID: <20190815145152.GD28953@SDF.ORG>

> Yes, I have changed the relevant setting. It will not override an explicit reply-to by the author, but if there is none, it will add a reply-to to the list.

Splendid, many thanks!

-Solderpunk

From solderpunk@SDF.ORG  Thu Aug 15 16:41:10 2019
From: solderpunk@SDF.ORG (solderpunk)
Date: Thu, 15 Aug 2019 15:41:10 +0000
Subject: File size issues
Message-ID: <20190815154110.GE28953@SDF.ORG>

Two quick points with regard to the fact that Gemini currently does not
convey file sizes to users at any point:

* Sean has pointed out in one of his RFCs that this means there is no
  way for a client to know whether or not a download completed
  successfully or was interrupted due to an accidentally dropped or
  even a maliciously severred connection

* I've received an email from somebody watching the Gemini design unfold
  with interest, who is concerned about Gemini clients with limited
  system resources unwittingly downloading large files (such as PDFs of
  scanned documents) which they aren't even capable of opening.  While I
  quite like the idea of Gemini being friendly to low-end systems, I do
  wonder whether or not the TLS requirement makes this a little moot.

Anyway, the question is do we want to change anything to address these
issues and if so how do we want to do it?

I'll quickly note in pasing that both of these problems also exist in
exactly the same form for Gopher, but I've never once heard Gopher users
complain about them.  Which isn't to say we should cheerfully ignore
them, but it does establish that they cannot reasonably be considered as
fatal flaws.

One possibility, as proposed by Sean, is to add file size to the
response header, with it optionally appearing after the MIME type.  I'm
not hugely fond of this myself, simply because it complicates parsing of
the response header.  Remember that the MIME type can have multiple
components specifying encodings etc.  If you just split the META part of
the header on whitespace, the number of components is variable, so
recognising whether or not an optional filesize is present requires
actually inspecting the parts and looking for a number.  In fairness to
Sean, at the time of writing of his RFC the spec spec said META was
separated from STATUS by a tab (whereas now it is just whitespace), so
tacking something after META with another tab was unambiguous, assuming
nobody put tabs in their MIME types...

Another possibility ties into another request I got from somebody very
early on - it would be nice if there was some way to query a Gemini
server for the time a resource was last modified, so that Gemini
equivaents of tools like moku pona could avoid needlessly fetching
unchanged resources over and over again.  At that point I started
wondering about giving Gemini some equivalent of HTTP HEAD, although I
abandoned it pretty quickly when I realised that substantial TLS
overhead probably made making a whole second request to check if a
resource had changed not such a worthwhile idea.  But, we could possibly
bring this idea back, as the response to such a request could naturally
include the file size as well.  The real question is how to *make* such
a request, ideally in a way which doesn't open the door to a half dozen
other new "methods".

At this point I'm not necessarily convinced that either of these
problems warrant changes to the protocol.  It's not that I can't see how
it would be nice to work around them, but at some point one has to
accept that protocols which are simple and minimalist by design are
inevitably going to have some rough spots as a result of that design.
But if anybody has particularly elegant solutions, I'm all ears.

Regarding ways to enable something like a HEAD request without changing
the request format to include a method field - I'm not quite sure
whether using a fixed URL fragment, like #meta, on requests would be a
kosher way to do this.  Does metadata count as "some portion or subset
of the primary resource, some view on representations of the primary
resource, or some other resource defined or described by those
representations" (from RFC3986)?

-Solderpunk


From sean@conman.org  Thu Aug 15 18:06:33 2019
From: sean@conman.org (Sean Conner)
Date: Thu, 15 Aug 2019 13:06:33 -0400
Subject: Let's get this list started
In-Reply-To: <20190815140359.GA28953@SDF.ORG>
References: <20190814213833.GC28117@brevard.conman.org>
 <20190815074406.GA26532@SDF.ORG> <20190815081352.GE21685@brevard.conman.org>
 <12E2B335-FD77-4DAE-B8D3-446141D86C46@carcosa.net>
 <20190815140359.GA28953@SDF.ORG>
Message-ID: <20190815170633.GA32200@brevard.conman.org>

It was thus said that the Great solderpunk once stated:
> > I can change the reply-to setting, if you prefer.

  I see that's been fixed.  Thanks.

> Well, I for one would strongly prefer just being able to reply to any
> email from the list and have it be sent only to the list, rather than
> back to the author with (at best) a CC to the list (so that the author
> ends up with two copies).  That system is pretty cumbersome and I've
> never quite understood why it's so common.

  It goes back to "'Reply-To:' munging considered harmful":

	http://www.unicom.com/pw/reply-to-harmful.html

This is an older argument (I wrote about it back in 2000 [1]) and I'm in the
camp of "'Reply-To:' munging is okay".

  -spc

[1]	http://boston.conman.org/2000/02/03.1
	http://boston.conman.org/2000/02/03.2
	http://boston.conman.org/2000/02/04.3

From sean@conman.org  Thu Aug 15 18:12:16 2019
From: sean@conman.org (Sean Conner)
Date: Thu, 15 Aug 2019 13:12:16 -0400
Subject: Text reflow woes (or: I want bullets back!)
In-Reply-To: <20190815081859.GB26532@SDF.ORG>
References: <20190815081859.GB26532@SDF.ORG>
Message-ID: <20190815171216.GB32200@brevard.conman.org>

It was thus said that the Great solderpunk once stated:
> I was surprised and excited today to spot a (beta) web-to-Gemini
> portal at https://portal.mozz.us/.  By default it points at the
> Zaibatsu, and my first thoughs upon seeing it rendered was "Oh, what a
> shame, it messes up the bullet point list at the top of the page".
> 
> But, no, nothing is messed up here, this is precisely what I specced
> in 0.9.1 with the text reflowing!
> 
> I'm kind of sad about this.  I was resolved to destroying the
> possibility of ASCII art in Gemini pages as an unfortunate "breaking
> eggs to make an omlette" kind of thing.  I agree with the many people
> who have expressed frustration at Gopher content looking wonky if
> viewed on anything other than an 70 or 80 character wide terminal.
> But obviously I didn't think the consequences of the way I specced
> things through very carefully, because I wouldn't have been anywhere
> near as happy about destroying the possibility of bulleted lists.
> Those are a really useful and legitimate thing for text-based content
> to have.
> 
> So, how do we fix this?

  There's always gemini://gemini.conman.org/gRFC/0001, which allows one to
specify fixed or flowed, and for flowed, there's a way to mark lines that 
shouldn't be flowed at all.                                              

  I even moved it back to a PROPOSED state.

  -spc

From sean@conman.org  Thu Aug 15 18:35:09 2019
From: sean@conman.org (Sean Conner)
Date: Thu, 15 Aug 2019 13:35:09 -0400
Subject: Password authentication over Gemini
In-Reply-To: <20190815144942.GC28953@SDF.ORG>
References: <20190815144942.GC28953@SDF.ORG>
Message-ID: <20190815173509.GC32200@brevard.conman.org>

It was thus said that the Great solderpunk once stated:
> I deliberately chose not to spec any kind of password-based
> authentication in Gemini, since TLS was already mandatory and so client
> certificate authentication was a possibility.  The "maximise power to
> weight ratio" philosophy kind of implies a "there should be only way to
> do it" philosophy as a corollary.
> 
> Anyway, I realised to my surprise yesterday morning that actually Gemini
> now supports password authentication quite readily:
> 
> CLIENT:    gemini://example.com/protected-resource/
> SERVER:    61 Please supply a temporary certificate to faciliate
>            interactive login
> CLIENT:    gemini://example.com/protected-resource/
>            (with disposable certificate)
> SERVER:    10 Username:
> CLIENT:    gemini://example.com/protected-resource/?solderpunk
> SERVER:    10 Password:
>            (after storing "solderpunk" in memory, indexed by client
> 	   certificate fingerprint)
> CLIENT:    gemini://example.com/protected-resource/?hunter2
> SERVER:    21 text/gemini
>            (after retrieving "solderpunk" from memory and verifying that
> 	   solderpunk/hunter2 matches what is stored (hashed and salted)
> 	   in a database

  There's no reason for the user to generate a certificate and then provide
a username/password when the certificate already has the username:

		CGI Environment Variables

AUTH_TYPE=Certificate
GATEWAY_INTERFACE=CGI/1.1
LANG=en_US.UTF-8
LC_COLLATE=C
PATH=/usr/local/bin:/usr/bin:/bin
QUERY_STRING=
REMOTE_ADDR=192.168.1.10
REMOTE_HOST=192.168.1.10
REMOTE_USER=Sean Conner
REQUEST_METHOD=
SCRIPT_NAME=/private/raw
SERVER_NAME=lucy.roswell.area51
SERVER_PORT=1965
SERVER_PROTOCOL=GEMINI
SERVER_SOFTWARE=GLV-1.12556/1
TLS_CIPHER=ECDHE-RSA-CHACHA20-POLY1305
TLS_CLIENT_HASH=SHA256:0eab5867fcb5b30046120e4c29562e31b88c51b167b091aee4b4e66221645a20
TLS_CLIENT_ISSUER=/C=US/ST=FL/O=Conman Laboratories/OU=Security Division/CN=Conman Laboratories CA/emailAddress=ca at conman.org
TLS_CLIENT_ISSUER_C=US
TLS_CLIENT_ISSUER_CN=Conman Laboratories CA
TLS_CLIENT_ISSUER_O=Conman Laboratories
TLS_CLIENT_ISSUER_OU=Security Division
TLS_CLIENT_ISSUER_ST=FL
TLS_CLIENT_ISSUER_emailAddress=ca at conman.org
TLS_CLIENT_NOT_AFTER=2020-06-18T23:54:56Z
TLS_CLIENT_NOT_BEFORE=2019-06-19T23:54:56Z
TLS_CLIENT_REMAIN=308
TLS_CLIENT_SUBJECT=/C=US/ST=FL/L=Boca Raton/CN=Sean Conner/emailAddress=sean at conman.org
TLS_CLIENT_SUBJECT_C=US
TLS_CLIENT_SUBJECT_CN=Sean Conner
TLS_CLIENT_SUBJECT_L=Boca Raton
TLS_CLIENT_SUBJECT_ST=FL
TLS_CLIENT_SUBJECT_emailAddress=sean at conman.org
TLS_VERSION=TLSv1.2

  This is the output from a CGI script running on my development server, and
you can see the TLS_CLIENT_SUBJECT contains what could be considered the
"username".  But other than that, yes, that is a way to sneak in an
alternative form of username/password into the spec.

> This is less hassle than using client certificates directly (i.e.
> generate a persistent certificate, email the fingerprint to the remote
> admin, carry your certificate around with you, all as per ssh keys),
> though of course also less secure (weak passwords can be guessed,
> password databases can be stolen).  Different approaches will be more or
> less appropriate for different applications.

  This is one reason why my initial status code proposal supported
certificates and "another way" left vague at the time.

> This motivates two possible changes to the spec:
> 
> Firstly, the <META> value sent with a 6x status is currently undefined.
> I would propose that for 61, <META> should be a human-readable message
> explaining *why* the server is politely requesting the user to
> voluntarily and temporarily surrender their anonymity.  Seems only
> reasonable.
> 
> Secondly, as a variant on 10, maybe 11 could carry the extra semantics
> that clients should not echo user input, so it can be used for things
> like passwords.
> 
> Any thoughts?

  Not much there, other than to ask about having second thoughs about
certificate only authentication?

  -spc

From sean@conman.org  Thu Aug 15 19:06:20 2019
From: sean@conman.org (Sean Conner)
Date: Thu, 15 Aug 2019 14:06:20 -0400
Subject: File size issues
In-Reply-To: <20190815154110.GE28953@SDF.ORG>
References: <20190815154110.GE28953@SDF.ORG>
Message-ID: <20190815180620.GA18238@brevard.conman.org>

It was thus said that the Great solderpunk once stated:
> Two quick points with regard to the fact that Gemini currently does not
> convey file sizes to users at any point:
> 
> * Sean has pointed out in one of his RFCs that this means there is no
>   way for a client to know whether or not a download completed
>   successfully or was interrupted due to an accidentally dropped or
>   even a maliciously severred connection
> 
> * I've received an email from somebody watching the Gemini design unfold
>   with interest, who is concerned about Gemini clients with limited
>   system resources unwittingly downloading large files (such as PDFs of
>   scanned documents) which they aren't even capable of opening.  While I
>   quite like the idea of Gemini being friendly to low-end systems, I do
>   wonder whether or not the TLS requirement makes this a little moot.
> 
> Anyway, the question is do we want to change anything to address these
> issues and if so how do we want to do it?
> 
> I'll quickly note in pasing that both of these problems also exist in
> exactly the same form for Gopher, but I've never once heard Gopher users
> complain about them. 

  Gopher does address this rather obliquely---text files (and gopher
indexes) are supposed to end with a '.' on a line by itself.  This lets the
client know it received the data correctly, and it says as much in RFC-1436,
section 3.8:

	Note that for type 5 or type 9 the client must be prepared to read
	until the connection closes.  There will be no period at the end of
	the file; ...

  It's not necessarily a pain point about the filesizes not being known
before hand, but it does make displaying a progress bar (for example)
difficult to implement.

> One possibility, as proposed by Sean, is to add file size to the
> response header, with it optionally appearing after the MIME type.  I'm
> not hugely fond of this myself, simply because it complicates parsing of
> the response header.  

  I'm not seeing much of an issue.  Assuming tabs separate the compoents on
the status line, then

	(\d+)\t([^\t]+)(\t([^\t]+))*

would parse the line (I suspect, I'm not a fan of regex but I think the
above would work to parse the status line).  I don't see much of an issue in
parsing any of the following:

	20<HTAB>text/plain; charset=utf-8<HTAB>2123<CRLF>
	20<HTAB>text/plain<CRLF>

> Remember that the MIME type can have multiple
> components specifying encodings etc.  If you just split the META part of
> the header on whitespace, the number of components is variable, so
> recognising whether or not an optional filesize is present requires
> actually inspecting the parts and looking for a number.  In fairness to
> Sean, at the time of writing of his RFC the spec spec said META was
> separated from STATUS by a tab (whereas now it is just whitespace), so
> tacking something after META with another tab was unambiguous, assuming
> nobody put tabs in their MIME types...

  Which could be specified, "don't put tabs in the MIME type section."

> Another possibility ties into another request I got from somebody very
> early on - it would be nice if there was some way to query a Gemini
> server for the time a resource was last modified, so that Gemini
> equivaents of tools like moku pona could avoid needlessly fetching
> unchanged resources over and over again.  At that point I started
> wondering about giving Gemini some equivalent of HTTP HEAD, although I
> abandoned it pretty quickly when I realised that substantial TLS
> overhead probably made making a whole second request to check if a
> resource had changed not such a worthwhile idea.  

  One way would be to query a well-known endpoint (these exist in the HTTP
world---robots.txt is one such file) that contains tiemstamps for various
resources.  Slap a MIME type of text/gemini-timestamp and call it done:

gemini://example.com/	2019-08-15T13:53:00-05:00
gemini://example.com/feed	2019-07-29T00:00:00-05:00
gemini://example.com/other	2019-08-01T00:00:00-05:00

  That's one way.

> But, we could possibly
> bring this idea back, as the response to such a request could naturally
> include the file size as well.  The real question is how to *make* such
> a request, ideally in a way which doesn't open the door to a half dozen
> other new "methods".

  As I mentioned in a private email to solderpunk earlier, one could always
take advantage of the sub-delimeters in the path portion.  I had at one
point mentioned using those to specify the prompt (otherwise the server
would return a status of 10):

	gemini://example.com/search;Search%20for

This could be formalized:

	gemini://example.com/search;prompt=Search%20for
	gemini://example.com/blogfeed;timestamp=2019-08-15T00:00:00Z
	gemini://example.com/wildexample;prompt=Search%20for;timestamp=2019-08-15:00:00:00Z?query=foo&usename=bar

  So, you have "prompt" and "timestamp".  Others could be propsed.  If the
"timestamp" thing above is accepted, then you might want to have a new
status code meaning "no change" or "okay, but there's no content".

> Regarding ways to enable something like a HEAD request without changing
> the request format to include a method field - I'm not quite sure
> whether using a fixed URL fragment, like #meta, on requests would be a
> kosher way to do this.  Does metadata count as "some portion or subset
> of the primary resource, some view on representations of the primary
> resource, or some other resource defined or described by those
> representations" (from RFC3986)?

  Well, there are RFC-5147 and RFC-7111 that give semantics to the URI
fragment section, but I still think using the sub-delimeter of ';' in the
path portion is the way to go.

  -spc

From solderpunk@SDF.ORG  Thu Aug 15 20:59:24 2019
From: solderpunk@SDF.ORG (solderpunk)
Date: Thu, 15 Aug 2019 19:59:24 +0000
Subject: Text reflow woes (or: I want bullets back!)
In-Reply-To: <20190815171216.GB32200@brevard.conman.org>
References: <20190815081859.GB26532@SDF.ORG>
 <20190815171216.GB32200@brevard.conman.org>
Message-ID: <20190815195923.GA20244@SDF.ORG>

> there's a way to mark lines that 
> shouldn't be flowed at all.                                              

I assume this refers to the following part from early in RFC3676 4.1?

> If the line ends in a space, the line is flowed.  Otherwise it is
> fixed.

Using a trailing space is kind of a neat solution, in the sense that is
has very low visual impact.  But the particular implementation above
strikes me as "backward".  I want the majority of my lines to be flowed.
The exceptions, which would be things like bullet points, or a centred
title line, would likely account for fewer than 10% of the lines in the
whole document.  Since they are in the minority, *they* are the lines
which should require extra effort (manually adding an extra space).  The
majority wrapped lines should require no effort to prepare (and
certainly shouldn't require me to fight against my editor's wrapping).

Adopting RFC3676 wholesale would bring in a lot of extra stuff that I
don't think we have an immediate need for (like quoting related stuff).
But I'm very happy to use it as inspiration.

Maybe a rule where lines ending in a space are immune to flowing could
work?

-Solderpunk


From sean@conman.org  Fri Aug 16 00:26:37 2019
From: sean@conman.org (Sean Conner)
Date: Thu, 15 Aug 2019 19:26:37 -0400
Subject: Text reflow woes (or: I want bullets back!)
In-Reply-To: <20190815195923.GA20244@SDF.ORG>
References: <20190815081859.GB26532@SDF.ORG>
 <20190815171216.GB32200@brevard.conman.org> <20190815195923.GA20244@SDF.ORG>
Message-ID: <20190815232636.GA24356@brevard.conman.org>

It was thus said that the Great solderpunk once stated:
> > there's a way to mark lines that 
> > shouldn't be flowed at all.                                              
> 
> I assume this refers to the following part from early in RFC3676 4.1?
> 
> > If the line ends in a space, the line is flowed.  Otherwise it is
> > fixed.

  Yup.

> Adopting RFC3676 wholesale would bring in a lot of extra stuff that I
> don't think we have an immediate need for (like quoting related stuff).
> But I'm very happy to use it as inspiration.
> 
> Maybe a rule where lines ending in a space are immune to flowing could
> work?

  Well, Markdown has two RFCs (RFC-7763 and 7764), so one could always use
that to serve up documents---they allow linking after all.  Then again,
expect to see requests for changes all the time as people use the
protocol/text format and bump up against the limitations.  I don't know what
to tell you here---I'm neutral on this aspect.

  -spc 


From sean@conman.org  Fri Aug 16 00:51:56 2019
From: sean@conman.org (Sean Conner)
Date: Thu, 15 Aug 2019 19:51:56 -0400
Subject: Text reflow woes (or: I want bullets back!)
In-Reply-To: <20190815081859.GB26532@SDF.ORG>
References: <20190815081859.GB26532@SDF.ORG>
Message-ID: <20190815235156.GC24356@brevard.conman.org>

It was thus said that the Great solderpunk once stated:
> I was surprised and excited today to spot a (beta) web-to-Gemini
> portal at https://portal.mozz.us/.  

  Pretty cool, but it fails on loading any of the proposed RFCs on my site:

	gemini://gemini.conman.org/gRFC/

I think that's because I send a MIME type of 

	text/gemini; charset=US-ASCII; format=flowed

which confuses it.  I changed one of the documents to just return 

	text/gemini

and it loaded fine.

  Internesting.

> By default it points at the
> Zaibatsu, and my first thoughs upon seeing it rendered was "Oh, what a
> shame, it messes up the bullet point list at the top of the page".

  There's a way around it---you can view it at

	https://portal.mozz.us/?url=gemini.conman.org%2Ftest%2Fbullet.gemini

  Basically, I created a "bulletted list" by making each bullet point a
link.  Hey, it works.

  -spc (It also a decent test for parsing URLs---the gateway doesn't do a
	proper job actually ... )


From solderpunk@SDF.ORG  Fri Aug 16 11:43:12 2019
From: solderpunk@SDF.ORG (solderpunk)
Date: Fri, 16 Aug 2019 10:43:12 +0000
Subject: File size issues
In-Reply-To: <20190815180620.GA18238@brevard.conman.org>
References: <20190815154110.GE28953@SDF.ORG>
 <20190815180620.GA18238@brevard.conman.org>
Message-ID: <20190816104312.GA23118@SDF.ORG>

>   Gopher does address this rather obliquely---text files (and gopher
> indexes) are supposed to end with a '.' on a line by itself.  This lets the
> client know it received the data correctly, and it says as much in RFC-1436,
> section 3.8:

Whoops, true!  In my defence, I think this is very rarely used nowadays.
VF-1 includes no code whatsoever to detect and strip this from files it
downloads and I've never seen one appear on screen.
 
>   I'm not seeing much of an issue.  Assuming tabs separate the compoents on
> the status line, then
> 
> 	(\d+)\t([^\t]+)(\t([^\t]+))*
> 
> would parse the line (I suspect, I'm not a fan of regex but I think the
> above would work to parse the status line).  I don't see much of an issue in
> parsing any of the following:
> 
> 	20<HTAB>text/plain; charset=utf-8<HTAB>2123<CRLF>
> 	20<HTAB>text/plain<CRLF>
> 
>   Which could be specified, "don't put tabs in the MIME type section."

Yes, with sufficient prescription of whitespace practices in response
headers it could be made sufficiently parsable, but it would be nice if
things weren't so brittle.

This also, of course, sets a precendent of "whenever we decide a little
bit of extra metadata would be handy in the header, just append it after
a tab", which over time could bloat our header until it's basically just
a HTTP header in disguise with tabs instead of newlines.

(not a fan of regex either, by the way, and was quite happy to discover
Lua's lightweight alternative system when I first picked it up)
 
>   One way would be to query a well-known endpoint (these exist in the HTTP
> world---robots.txt is one such file) that contains tiemstamps for various
> resources.  Slap a MIME type of text/gemini-timestamp and call it done:
> 
> gemini://example.com/	2019-08-15T13:53:00-05:00
> gemini://example.com/feed	2019-07-29T00:00:00-05:00
> gemini://example.com/other	2019-08-01T00:00:00-05:00
> 
>   That's one way.

I actually quite like this idea.  No need to make it timestamp-specific
either.  We could have a well-known endpoint for general file metadata,
which listed modification time, file size, checksum, MIME type, etc.  It
could accept queries for a specific path, and *that* could be the way to
do an equivalent of a HEAD request.

This would let clients for specific scenarios do the extra work
themselves to work around their problems, e.g. clients with very low
memory or storage space could request the metadata for all files before
attempting to access them and warn the user if the file size exceeds a
threshold; clients on unreliable connections could request the metadata
before downloading and then warn the user if file size and/checksum did
not agree.  Most "normal" clients could do neither and just operate as
they already do.

I think it's kind of neat to keep solutions to edge problems outside of
the protocol itself and push them into things like well-known endpoints
like the above where they can easily be ignored when they are not
needed/wanted.  The downside is that server developers have to do the
work to add support for these things - but it's expected, I think, that
servers are harder to write than clients.  Ease of client implementation
is very important - it leads to a large number of independent clients,
which means unofficial extensions of the standard can only really take
off if a large number of people with presumably diverse opinions can be
convinced they are worthwhile.  And, of course, some server authors can
just choose not to support some of these endpoints, and when queried can
just return status 51 and then the client understands they are on their
own.  All of this can be done without any change to the core Gemini spec
(each well-known endpoint, of course, would need its own spec).

>   As I mentioned in a private email to solderpunk earlier, one could always
> take advantage of the sub-delimeters in the path portion.  I had at one
> point mentioned using those to specify the prompt (otherwise the server
> would return a status of 10):
> 
> 	gemini://example.com/search;Search%20for
> 
> This could be formalized:
> 
> 	gemini://example.com/search;prompt=Search%20for
> 	gemini://example.com/blogfeed;timestamp=2019-08-15T00:00:00Z
> 	gemini://example.com/wildexample;prompt=Search%20for;timestamp=2019-08-15:00:00:00Z?query=foo&usename=bar
> 
>   So, you have "prompt" and "timestamp".  Others could be propsed.  If the
> "timestamp" thing above is accepted, then you might want to have a new
> status code meaning "no change" or "okay, but there's no content".

I think I prefer the well-known endpoint over this, but that's right now
more of a gut reaction and not a well thought-out and defencible
position. 
 
>   Well, there are RFC-5147 and RFC-7111 that give semantics to the URI
> fragment section, but I still think using the sub-delimeter of ';' in the
> path portion is the way to go.

Ah, more for the reading list!

-Solderpunk


From jmcbray@carcosa.net  Fri Aug 16 14:09:42 2019
From: jmcbray@carcosa.net (Jason McBrayer)
Date: Fri, 16 Aug 2019 09:09:42 -0400
Subject: File size issues
In-Reply-To: <20190816104312.GA23118@SDF.ORG>
References: <20190815154110.GE28953@SDF.ORG>
 <20190815180620.GA18238@brevard.conman.org> <20190816104312.GA23118@SDF.ORG>
Message-ID: <8736i1z27g.fsf@camilla.carcosa.net>


solderpunk writes:

> This also, of course, sets a precendent of "whenever we decide a little
> bit of extra metadata would be handy in the header, just append it after
> a tab", which over time could bloat our header until it's basically just
> a HTTP header in disguise with tabs instead of newlines.

We are, of course, re-inventing the Content-Length header here, which is
an extremely useful header so that clients can do things like have a
progress bar for downloads. If we support every useful feature, of
course, we end up with basically HTTP 0.9.

> Sean writes:
>>   One way would be to query a well-known endpoint (these exist in the HTTP
>> world---robots.txt is one such file) that contains tiemstamps for various
>> resources.  Slap a MIME type of text/gemini-timestamp and call it done:
>>
>> gemini://example.com/	2019-08-15T13:53:00-05:00
>> gemini://example.com/feed	2019-07-29T00:00:00-05:00
>> gemini://example.com/other	2019-08-01T00:00:00-05:00
>>
>>   That's one way.

IMO you probably don't want to serve the timestamps or file sizes for
every single file/resource in one response, for a number of reasons both
privacy-related and performance-related.

> I actually quite like this idea.  No need to make it timestamp-specific
> either.  We could have a well-known endpoint for general file metadata,
> which listed modification time, file size, checksum, MIME type, etc.  It
> could accept queries for a specific path, and *that* could be the way to
> do an equivalent of a HEAD request.

Yeah, it makes sense to bundle the metadata into one response, but only
serve for one path per request.

> This would let clients for specific scenarios do the extra work
> themselves to work around their problems, e.g. clients with very low
> memory or storage space could request the metadata for all files before
> attempting to access them and warn the user if the file size exceeds a
> threshold; clients on unreliable connections could request the metadata
> before downloading and then warn the user if file size and/checksum did
> not agree.  Most "normal" clients could do neither and just operate as
> they already do.

The one downside I see to that is that once we start seeing more complex
clients written, especially graphical clients, we will start seeing
progress bars, download managers, etc., and there will always be a need
to make a second request to get the metadata, which is relatively
expensive.

> I think it's kind of neat to keep solutions to edge problems outside of
> the protocol itself and push them into things like well-known endpoints
> like the above where they can easily be ignored when they are not
> needed/wanted.  The downside is that server developers have to do the
> work to add support for these things - but it's expected, I think, that
> servers are harder to write than clients.

My experience *so far* is that server implementation is easier. But that
is likely to change, I guess.

>>   As I mentioned in a private email to solderpunk earlier, one could always
>> take advantage of the sub-delimeters in the path portion.  I had at one
>> point mentioned using those to specify the prompt (otherwise the server
>> would return a status of 10):
>>
>> 	gemini://example.com/search;Search%20for
>>
>> This could be formalized:
>>
>> 	gemini://example.com/search;prompt=Search%20for
>> 	gemini://example.com/blogfeed;timestamp=2019-08-15T00:00:00Z
>> 	gemini://example.com/wildexample;prompt=Search%20for;timestamp=2019-08-15:00:00:00Z?query=foo&usename=bar
>>
>>   So, you have "prompt" and "timestamp".  Others could be propsed.  If the
>> "timestamp" thing above is accepted, then you might want to have a new
>> status code meaning "no change" or "okay, but there's no content".

This is definitely re-inventing HTTP headers with a different format.

--
+----------------------------------------------------------------------+
| Jason F. McBrayer                                jmcbray at carcosa.net |
| The scalloped tatters of the King in Yellow must hide Yhtill forever.|

From solderpunk@SDF.ORG  Fri Aug 16 14:44:27 2019
From: solderpunk@SDF.ORG (solderpunk)
Date: Fri, 16 Aug 2019 13:44:27 +0000
Subject: File size issues
In-Reply-To: <8736i1z27g.fsf@camilla.carcosa.net>
References: <20190815154110.GE28953@SDF.ORG>
 <20190815180620.GA18238@brevard.conman.org>
 <20190816104312.GA23118@SDF.ORG>
 <8736i1z27g.fsf@camilla.carcosa.net>
Message-ID: <20190816134427.GA7388@SDF.ORG>

> We are, of course, re-inventing the Content-Length header here, which is
> an extremely useful header so that clients can do things like have a
> progress bar for downloads. If we support every useful feature, of
> course, we end up with basically HTTP 0.9.

Right, and that's what I'd like to avoid even taking one step toward
to doing, because unless we resist it hard from day one, I worry we'll
inevitably fall down a slippery slope to recreating HTTP.

In some sense, Gemini as-is chooses Content-Type as the "one true
header".  To some extent that needs justification, because there are
certainly other HTTP headers which don't do any evil and are genuinely
helpful.  I guess Content-Type was elevated because in my experience
with Gopher, it was the missing piece of information which caused the
most pain.  The lack of in-band content type signalling in Gopher
requires things like a custom URL scheme to encode that information,
which is a bit gross.
 
> IMO you probably don't want to serve the timestamps or file sizes for
> every single file/resource in one response, for a number of reasons both
> privacy-related and performance-related.

Yeah, putting every hosted resource in one response makes no sense -
that response could easily be larger than the one resource we were
interested in checking the timestamp or file size of.  The sensible
thing is to include the particular path you care about as a query.  If
that is absent, a sensible default might be to list the N most recently
updated resources, or the N most popularly requested?  But, really, I'm
not sure who would be making that kind of request or why.
 
> The one downside I see to that is that once we start seeing more complex
> clients written, especially graphical clients, we will start seeing
> progress bars, download managers, etc., and there will always be a need
> to make a second request to get the metadata, which is relatively
> expensive.

While they are not prohibited, using Gemini to transfer large binary
files (of the kind for which progress bars and download managers are
useful) is not a very smart idea.  There's no way to use compression to
speed things up, and there is no way to resume an interrupted download
with anything like a Range: header.  It's just not the right tool for
the job.  Thankfully, it's very easy for a Gemini document to link to
things hosted on other protocols, like https or even bittorrent, or one
of these newfangled P2P things the kids are using like IPFS, which are
more appropriate for that task.  I would say it makes sense to
recommend not using Gemini for files larger than, I dunno, 10MB?

The second request is definitely expensive, but the idea is not that
every client does this before every "real" request.  This "pseudo HEAD"
is mostly a support mechanism for clients with unreliable and/or slow
connections or with very limited disc space and/or memory.  I expect 95%
of clients to work exactly the way Gopher clients do, by just ignoring
all of this and generally being none the worse for it.

Well, maybe 95% is a bit strong.  Moku pona style aggregators might be
able to make good use of this, too.

Very slick clients could just request a resource directly, keep track of
how much response they've pulled down so far (or how many seconds
they've been reading for) and once some threshold is passed (1MB?  5
seconds?) make another request in a separate thread for the metadata and
then begin displaying a progress bar or ETA prompt or something to
reassure the user that things really are happening.

> My experience *so far* is that server implementation is easier. But that
> is likely to change, I guess.

I guess for a sufficiently simple server which only deals in 20, 40 and
50 that's true.
 
> This is definitely re-inventing HTTP headers with a different format.

It is - while the well-known endpoint for metadata is basically
reinventing a HTTP method with a different format.

Maybe we don't need to worry about this?  There's no shame in not being
able to match every single useful capability that HTTP has.  It should
have been clear from the outset we wouldn't be able to do that.

-Solderpunk


From solderpunk@SDF.ORG  Fri Aug 16 17:14:50 2019
From: solderpunk@SDF.ORG (solderpunk)
Date: Fri, 16 Aug 2019 16:14:50 +0000
Subject: Text reflow woes (or: I want bullets back!)y
In-Reply-To: <20190815232636.GA24356@brevard.conman.org>
References: <20190815081859.GB26532@SDF.ORG>
 <20190815171216.GB32200@brevard.conman.org>
 <20190815195923.GA20244@SDF.ORG>
 <20190815232636.GA24356@brevard.conman.org>
Message-ID: <20190816161450.GA25074@SDF.ORG>

>   Well, Markdown has two RFCs (RFC-7763 and 7764), so one could always use
> that to serve up documents---they allow linking after all.  Then again,
> expect to see requests for changes all the time as people use the
> protocol/text format and bump up against the limitations.  I don't know what
> to tell you here---I'm neutral on this aspect.

I've actually always expected that serving Markdown over Gemini could
become quite popular.  Some people are no doubt going to see Gemini
first and foremost as "the web, stripped down" (as opposed to others who
will see it as "gopher, souped up"), and in that sense Markdown is
perhaps a natural partner since it seems to be the leading contender, in
terms of mindshare, for "HTML, stripped down".  I think if Gemini ever
"gets big" in any meaningful sense (which, to be clear, I don't think
likely), that usage will probably be what drives it.  A nice graphical
client which rendered section headers in heavier fonts and did bold and
italics would offer a very nice experience, IMHO.

This naturally raises the question "why not just spec text/markdown as
the default response type?".  I actually quite like Markdown so the
notion doesn't offend me, but I do think it raises the bar a little too
high for client implementation effort.  Markdown is very common and
there's no shortages of libraries for dealing with it, but the vast
majority of them have the goal of converting it to HTML, which is no
good for us.  Of course one can just dump Markdown to the screen and not
worry about line wrapping or section formatting or anything - Markdown
is *designed* to look nice and readable as is.  But Markdown also allows
links to occur anywhere in the text, and providing a nice textual
interface to that kind of hypertext isn't straightforward.  It can be
done, of course, as things like lynx show.  But handling the
one-link-per-line structure of Gopher or text/gemini is trivial, as so
many Gopher clients show.  With text/gemini, you can, provably, write a
usable Gemini client in < 100 LOC.  With Markdown, I don't think this
would be possible (but anybody feel free to prove me wrong!).  I also
happen to think that the one-link-per-line restriction encourages very
clean and usable designs.

It's possible that in the future Geminispace will be split into two
"camps", a mainstream one using Markdown and graphical clients and the
retrogrouch crowd using text/gemini and terminal clients.  Maybe *that*
is how to solve the problem or reflowing text in text/gemini - we don't,
text/gemini is just plain text and if it really bothers you, well,
that's the proof of which camp you're in, so start writing a client
that renders Markdown!

Really just thinking out loud here...

-Solderpunk


From lazar.michael22@gmail.com  Fri Aug 16 20:30:08 2019
From: lazar.michael22@gmail.com (Michael Lazar)
Date: Fri, 16 Aug 2019 15:30:08 -0400
Subject: File size issues
In-Reply-To: <20190816134427.GA7388@SDF.ORG>
References: <20190815154110.GE28953@SDF.ORG>
 <20190815180620.GA18238@brevard.conman.org>
 <20190816104312.GA23118@SDF.ORG> <8736i1z27g.fsf@camilla.carcosa.net>
 <20190816134427.GA7388@SDF.ORG>
Message-ID: <CAFTy05YVFKyLExAdfNof3G_s+YcQEMdFYHNTkPypVDG58U3dcw@mail.gmail.com>

>>>> * Sean has pointed out in one of his RFCs that this means there is no
>>>>   way for a client to know whether or not a download completed
>>>>   successfully or was interrupted due to an accidentally dropped or
>>>>   even a maliciously severred connection

Does TLS not have a native way to handle this? I did a quick search and found
that either the client/server may send a close_notify message before
terminating a TLS connection.

    https://tools.ietf.org/html/rfc5246#section-7.2.1

> Very slick clients could just request a resource directly, keep track of
> how much response they've pulled down so far (or how many seconds
> they've been reading for) and once some threshold is passed (1MB?  5
> seconds?) make another request in a separate thread for the metadata and
> then begin displaying a progress bar or ETA prompt or something to
> reassure the user that things really are happening.

The whole idea is serving metadata in a separate TCP request might work fine
for static files, but it would break down when attempting to serve any type
of dynamically generated content.

Say I want to host an endpoint that does something like return a random quote
from fortune(1). Gopher sites love to serve these little CGI tools because
they're fun and require very little effort :) After I generate the text, I can
easily calculate the size and send along with the response in-line using
something like a response header. But I wouldn't be able to tell you ahead of
time from a separate metadata TCP request.

> Maybe we don't need to worry about this?  There's no shame in not being
> able to match every single useful capability that HTTP has.  It should
> have been clear from the outset we wouldn't be able to do that.

I agree with this sentiment. Knowing the file size would be nice to have, but I
haven't seen any use cases that are compelling enough to justify increasing the
complexity to the protocol for. Even in HTTP land, Content-Length is an optional
response header and there are several scenarios where it doesn't make sense to
include it at all.

- mozz

From b__m__e@mailfence.com  Sat Aug 17 17:09:59 2019
From: b__m__e@mailfence.com (Brian Evans)
Date: Sat, 17 Aug 2019 18:09:59 +0200 (CEST)
Subject: Text reflow woes (or: I want bullets back!)y
Message-ID: <962619280.54375.1566058199182@ichabod.co-bxl>

I think think many clients will opt to implement markdown parsers (heck, some may even try html parsing), 
but I think it would be a bad call to include it in the spec for gemini. Now that it has been brought up,
I may add markdown parsing to the client I am working on (I am still in planning stages figuring out
how I want it to work and the necessary structs and execution flows).

I think markdown can be rendered in cool/sensible ways in a terminal as well, so it can be a very
nice way to go. I think that inline links can still be handled in the bracket number style (link[7]) that
many use in gopherspace, for example. However, markdown will require the writing of an actual
lexer/parser rather than just reading in lines and looking for a magic string at the beginning. Not
a huge deal for some, an insurmountable challenge for others. Me personally, I think it would be
fun to code it up, but only as an additional feature for my client and not as a core part of gemini.

I would definitely support a few optional things that can be rendered as a part of text/gemini. I 
had brought these up with solderpunk earlier in development of the spec and they, I believe,
were deemed implementation details for the client... which I am mostly fine with. My only worry
is that if we leave it to clients to add support for things like bold text in gemini documents we
will end up with a fragmented situation where some clients support one way of doing it and 
others support others. I think picking the bare minimum essential styling and providing that
as a part of the spec would be helpful in making text/gemini attractive without going the way
of html/css/http.

I think the following limited set makes sense and can be handled with basic string replacing if
people dont want to parse:

1. Bold
Bold can be rendered in most terminals as bold. Clients that prefer could just string.toUpper
or the like. If this was done with opening and closing tags a substring replace (or proper parse)
could just replace it with the escape sequences for bold.

2. Italic
Same situation as bold, more or less. For situations where italics is not supported by whatever
viewing system, the tags could be replaced by asterisks? Like *this*.

3. Bold-Italic
Mostly the same as above, but a combination.

4. Heading (only one level)
This can be rendered a number of ways. In a terminal I would likely render this with the escape
for 'inverse' text. Makes it really pop.

I think the above four would provide sufficient styling to handle most basic uses and provide a
little bit of flair. If people were into the idea, we'd need to come up with how to denote those
things in a text/gemini document.

I am not adamant that the above needs to be included, but I think it could be nice.

As for text reflow: I am not in favor of html style text reflow (ignoring more than one space char).
I think it makes sense, like gopher, to render text as provided. The exception to this would be
word wrap, particularly for clients intended on width limited devices. My plan is to have word
wrapping be a togglable feature in my client.

Anyway, much like solderpunk: just thinking out loud.

ps. As to bullets: since gemini is utf-8 by default bullets should be very much in play.
--?
Sent with https://mailfence.com
Secure and private email

From solderpunk@SDF.ORG  Sat Aug 17 17:33:49 2019
From: solderpunk@SDF.ORG (solderpunk)
Date: Sat, 17 Aug 2019 16:33:49 +0000
Subject: Announcing GeGoBi
Message-ID: <20190817163349.GA18013@SDF.ORG>

Please see
gemini://zaibatsu.circumlunar.space/announcing-gegobi-a-gemini-gopher-bihoster.txt

-Solderpunk

From b__m__e@mailfence.com  Sat Aug 17 18:30:57 2019
From: b__m__e@mailfence.com (Brian Evans)
Date: Sat, 17 Aug 2019 19:30:57 +0200 (CEST)
Subject: Text reflow woes (or: I want bullets back!)y
Message-ID: <1047326836.56274.1566063057708@ichabod.co-bxl>

It also occurs to me that it would not be a crazy thing to add another magic string.

If we wanted to handle things as list items that would never get reflowed:

```

--> I am a list item

I am
text that would get 
reflowed.

--> I am another list item
--> and I complete the list, yay!

```

Something like that is an easy solution to making sure something always appears on a line of its own.
Not sure how elegant it is.

As other things come up the arrow style syntax magic string at the beginning can easily be modified
to support various features, but is reasonably limited as well. 


--?
Sent with https://mailfence.com
Secure and private email

From jmcbray@carcosa.net  Sat Aug 17 20:14:03 2019
From: jmcbray@carcosa.net (Jason McBrayer)
Date: Sat, 17 Aug 2019 15:14:03 -0400
Subject: Text reflow woes (or: I want bullets back!)y
In-Reply-To: <962619280.54375.1566058199182@ichabod.co-bxl>
References: <962619280.54375.1566058199182@ichabod.co-bxl>
Message-ID: <87v9uvy58k.fsf@camilla.carcosa.net>


Brian Evans writes:

> I think think many clients will opt to implement markdown parsers
> (heck, some may even try html parsing), but I think it would be a bad
> call to include it in the spec for gemini. Now that it has been
> brought up, I may add markdown parsing to the client I am working on
> (I am still in planning stages figuring out how I want it to work and
> the necessary structs and execution flows).

I am of two minds on this. On the one hand, I am generally of the "pave
the cowpaths" school, where your RFCs ratify actual practice and pick
out best practices. On the other, I would not like to see Gemini usage
split early on between Markdown-implementing sites/clients and
non-Markdown-implementing.

Personally, what I would most like to see in a client is a large subset
of Markdown (no embedded HTML, probably no inline images). But all of
the CommonMark text properties, levels of headings, etc. In general, I
would like for reasonable typography to be what you think of when you
think of a Gemini page. I understand that this makes things
significantly harder for client implementors.

That's one reason why I've suggested ratfactor's Text Junior format (can
someone invite ratfactor? I don't have any means of contacting them) as
a standard format for Gemini. It is basically a large subset of
Markdown, but fully line-oriented and stripped of parsing ambiguities. A
simple client can either just cat(1) it, can fmt(1) everything that's
not wrapped in a ``` ``` block, or can apply full formatting. Everything
I have served on my Gemini site is legal Text Junior.

It is perhaps unfortunate that despite there being Markdown parser
libraries for every common language, practically all of them are focused
on generating HTML rather than generating (e.g.) a parse tree that you
could use in your own layout engine. If all of those libraries had
better support for other representations, I'd honestly argue that we
just use MarkDown (CommonMark), because it already occupies the
text-formatting analogue of the niche that Gemini is aiming for in the
protocol world, IMO.

--
+----------------------------------------------------------------------+
| Jason F. McBrayer                                jmcbray at carcosa.net |
| The scalloped tatters of the King in Yellow must hide Yhtill forever.|

From jmcbray@carcosa.net  Sat Aug 17 22:05:55 2019
From: jmcbray@carcosa.net (Jason McBrayer)
Date: Sat, 17 Aug 2019 17:05:55 -0400
Subject: Text reflow woes (or: I want bullets back!)y
In-Reply-To: <87v9uvy58k.fsf@camilla.carcosa.net>
References: <962619280.54375.1566058199182@ichabod.co-bxl>
 <87v9uvy58k.fsf@camilla.carcosa.net>
Message-ID: <87tvafy024.fsf@camilla.carcosa.net>


Jason McBrayer writes:
> It is perhaps unfortunate that despite there being Markdown parser
> libraries for every common language, practically all of them are
> focused on generating HTML rather than generating (e.g.) a parse tree
> that you could use in your own layout engine.

I've actually looked at the internals of the Python and Common Lisp
libraries for MarkDown, and they both have extension points that could
reasonably be hijacked for returning parse trees, for what it's worth.
Still might be a bit much for someone trying to write a quick-and-dirty
client. 

--
+----------------------------------------------------------------------+
| Jason F. McBrayer                                jmcbray at carcosa.net |
| The scalloped tatters of the King in Yellow must hide Yhtill forever.|

From jmcbray@carcosa.net  Sat Aug 17 22:14:10 2019
From: jmcbray@carcosa.net (Jason McBrayer)
Date: Sat, 17 Aug 2019 17:14:10 -0400
Subject: Text reflow woes (or: I want bullets back!)y
In-Reply-To: <87v9uvy58k.fsf@camilla.carcosa.net>
References: <962619280.54375.1566058199182@ichabod.co-bxl>
 <87v9uvy58k.fsf@camilla.carcosa.net>
Message-ID: <3E957288-8748-4B48-A3AE-38D95D9EBF90@carcosa.net>

I am envisioning a Gemini client that looks a lot like this GTK Markdown reader:
 https://github.com/craigbarnes/showdown/blob/master/README.md
-- 
Sent from my Android device with K-9 Mail. Please excuse my brevity.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.orbitalfox.eu/archives/gemini/attachments/20190817/c1010829/attachment.htm>

From sean@conman.org  Sun Aug 18 00:44:37 2019
From: sean@conman.org (Sean Conner)
Date: Sat, 17 Aug 2019 19:44:37 -0400
Subject: Text reflow woes (or: I want bullets back!)y
In-Reply-To: <962619280.54375.1566058199182@ichabod.co-bxl>
References: <962619280.54375.1566058199182@ichabod.co-bxl>
Message-ID: <20190817234437.GB26287@brevard.conman.org>

It was thus said that the Great Brian Evans once stated:
> 
> The exception to this would be word wrap, particularly for clients
> intended on width limited devices. My plan is to have word wrapping be a
> togglable feature in my client.

  My gopher client has a key (F3 [1]) to reflow the current page.  

  -spc

[1]	Why F3?  Because the function keys get no love in this modern age.

From lazar.michael22@gmail.com  Sun Aug 18 05:22:06 2019
From: lazar.michael22@gmail.com (Michael Lazar)
Date: Sun, 18 Aug 2019 00:22:06 -0400
Subject: Text reflow woes (or: I want bullets back!)
In-Reply-To: <20190815235156.GC24356@brevard.conman.org>
References: <20190815081859.GB26532@SDF.ORG>
 <20190815235156.GC24356@brevard.conman.org>
Message-ID: <CAFTy05YJoK4PCtwqofobvwUDh+gh6gEv4ci0m_5BHQojj+hNjQ@mail.gmail.com>

On Thu, Aug 15, 2019 at 7:52 PM Sean Conner <sean at conman.org> wrote:
>
> It was thus said that the Great solderpunk once stated:
> > I was surprised and excited today to spot a (beta) web-to-Gemini
> > portal at https://portal.mozz.us/.
>
>   Pretty cool, but it fails on loading any of the proposed RFCs on my site:
>
>         gemini://gemini.conman.org/gRFC/
>
> I think that's because I send a MIME type of
>
>         text/gemini; charset=US-ASCII; format=flowed

This has now been fixed. I'm not going to do anything with the "format=flowed"
parameter because it's not in the official spec (yet), but you should now be
able to specify a charset and it will be respected by the proxy.

>   -spc (It also a decent test for parsing URLs---the gateway doesn't do a
>         proper job actually ... )
>

This should also be fixed now, I wasn't handling relative paths properly.

Since there are currently only a handful of actual gemini servers to test
against, it's difficult to discover these types of bugs when writing a client.
It would be helpful if there was a playground or sandbox server that presented
all of the different combinations of URL formats, charsets, response codes, etc.
that are allowed by the Gemini spec. I might take a shot at starting one myself.

- mozz

From sean@conman.org  Sun Aug 18 09:28:12 2019
From: sean@conman.org (Sean Conner)
Date: Sun, 18 Aug 2019 04:28:12 -0400
Subject: Text reflow woes (or: I want bullets back!)
In-Reply-To: <CAFTy05YJoK4PCtwqofobvwUDh+gh6gEv4ci0m_5BHQojj+hNjQ@mail.gmail.com>
References: <20190815081859.GB26532@SDF.ORG>
 <20190815235156.GC24356@brevard.conman.org>
 <CAFTy05YJoK4PCtwqofobvwUDh+gh6gEv4ci0m_5BHQojj+hNjQ@mail.gmail.com>
Message-ID: <20190818082811.GC26287@brevard.conman.org>

It was thus said that the Great Michael Lazar once stated:
> On Thu, Aug 15, 2019 at 7:52 PM Sean Conner <sean at conman.org> wrote:
> >
> > It was thus said that the Great solderpunk once stated:
> > > I was surprised and excited today to spot a (beta) web-to-Gemini
> > > portal at https://portal.mozz.us/.
> >
> >   Pretty cool, but it fails on loading any of the proposed RFCs on my site:
> >
> >         gemini://gemini.conman.org/gRFC/
> >
> > I think that's because I send a MIME type of
> >
> >         text/gemini; charset=US-ASCII; format=flowed
> 
> This has now been fixed. I'm not going to do anything with the "format=flowed"
> parameter because it's not in the official spec (yet), but you should now be
> able to specify a charset and it will be respected by the proxy.

  You might want to fix the parser.  I changed gRFC/0002 to return a MIME
type of:

	text/gemini; format=flowed; charset=US-ASCII;

(as the order of parameters is unspecified in proper MIME parsing) and I'm
getting an Internal Server Error.  The other two pages still work.

> >   -spc (It also a decent test for parsing URLs---the gateway doesn't do a
> >         proper job actually ... )
> >
> 
> This should also be fixed now, I wasn't handling relative paths properly.

  I still don't think it's working correctly.  On the page:

	gemini://gemini.conman.org/test/bullet.gemini

The first five links are, in order:

	example:bullet		RFC-7595
	example:bullet
	about:blank		RFC-6694
	-			a non-existant link
	/test/bullet.gemini	self-referential link

The first three *should not* make a reference to my server.  The last two
should.

> Since there are currently only a handful of actual gemini servers to test
> against, it's difficult to discover these types of bugs when writing a client.
> It would be helpful if there was a playground or sandbox server that presented
> all of the different combinations of URL formats, charsets, response codes, etc.
> that are allowed by the Gemini spec. I might take a shot at starting one myself.

  Not a bad idea.

  -spc


From sean@conman.org  Sun Aug 18 09:35:10 2019
From: sean@conman.org (Sean Conner)
Date: Sun, 18 Aug 2019 04:35:10 -0400
Subject: Text reflow woes (or: I want bullets back!)
In-Reply-To: <CAFTy05YJoK4PCtwqofobvwUDh+gh6gEv4ci0m_5BHQojj+hNjQ@mail.gmail.com>
References: <20190815081859.GB26532@SDF.ORG>
 <20190815235156.GC24356@brevard.conman.org>
 <CAFTy05YJoK4PCtwqofobvwUDh+gh6gEv4ci0m_5BHQojj+hNjQ@mail.gmail.com>
Message-ID: <20190818083510.GD26287@brevard.conman.org>

It was thus said that the Great Michael Lazar once stated:
> >   -spc (It also a decent test for parsing URLs---the gateway doesn't do a
> >         proper job actually ... )
> >
> 
> This should also be fixed now, I wasn't handling relative paths properly.

  One more issue I just found---I went to

	https://portal.mozz.us/

I clicked on the first link under "Desiging-out-loud logs" and got:

	51 not found

because the URL sent was:

	zaibatsu.circumlunar.space//announcing-gegobi-a-gemini-gopher-bihoster.txt

(note the two '//' in the path portion).

  -spc


From solderpunk@SDF.ORG  Sun Aug 18 09:35:42 2019
From: solderpunk@SDF.ORG (solderpunk)
Date: Sun, 18 Aug 2019 08:35:42 +0000
Subject: Text reflow woes (or: I want bullets back!)
In-Reply-To: <CAFTy05YJoK4PCtwqofobvwUDh+gh6gEv4ci0m_5BHQojj+hNjQ@mail.gmail.com>
References: <20190815081859.GB26532@SDF.ORG>
 <20190815235156.GC24356@brevard.conman.org>
 <CAFTy05YJoK4PCtwqofobvwUDh+gh6gEv4ci0m_5BHQojj+hNjQ@mail.gmail.com>
Message-ID: <20190818083542.GA5354@SDF.ORG>

> Since there are currently only a handful of actual gemini servers to test
> against, it's difficult to discover these types of bugs when writing a client.
> It would be helpful if there was a playground or sandbox server that presented
> all of the different combinations of URL formats, charsets, response codes, etc.
> that are allowed by the Gemini spec. I might take a shot at starting one myself.

jullenxx suggested something similar to me on Mastodon a little while
back.  It's a really excellent idea and something I think would
definitely benefit the project.  Please, feel very free to set something
like this up!

I am planning to soon start writing something similar from the client
side - it will send various requests to whatever server you point it at
and check for appropriate responses.  It'll do things like send
malformed requests, send requests for non-Gemini resources, or for
Gemini resources at other hosts, try to connect with old versions of TLS
(or even SSL!), etc.

These two tools should take us a long way toward producing more robust
software.

-Solderpunk


From solderpunk@SDF.ORG  Sun Aug 18 09:45:39 2019
From: solderpunk@SDF.ORG (solderpunk)
Date: Sun, 18 Aug 2019 08:45:39 +0000
Subject: Text reflow woes (or: I want bullets back!)y
In-Reply-To: <87v9uvy58k.fsf@camilla.carcosa.net>
References: <962619280.54375.1566058199182@ichabod.co-bxl>
 <87v9uvy58k.fsf@camilla.carcosa.net>
Message-ID: <20190818084539.GB5354@SDF.ORG>

On Sat, Aug 17, 2019 at 03:14:03PM -0400, Jason McBrayer wrote:
 
> That's one reason why I've suggested ratfactor's Text Junior format (can
> someone invite ratfactor? I don't have any means of contacting them) as

I invited ratfactor a few days ago and I can see now that he is indeed
subscribed.

And a good thing, too!  Unable to sleep last night, I was reading old
entries of his phlog on my phone and after (re)reading:

gopher://sdf.org:70/0/users/ratfactor/phlog/2018-08-15-Text-has-styles
gopher://sdf.org:70/0/users/ratfactor/phlog/2019-04-21-text-junior
gopher://sdf.org:70/0/users/ratfactor/phlog/2019-06-09-gopher-2.0-markup

I am convinced that he's thought about this question at least as long
and as hard as the rest of us combined, and I'm sure he will have very
valuable contributions to make to this discussion.

Although I note that Text Junior as of yet has no way to deal with
bulleted lists!

-Solderpunk


From solderpunk@SDF.ORG  Sun Aug 18 12:36:41 2019
From: solderpunk@SDF.ORG (solderpunk)
Date: Sun, 18 Aug 2019 11:36:41 +0000
Subject: File size issues
In-Reply-To: <CAFTy05YVFKyLExAdfNof3G_s+YcQEMdFYHNTkPypVDG58U3dcw@mail.gmail.com>
References: <20190815154110.GE28953@SDF.ORG>
 <20190815180620.GA18238@brevard.conman.org>
 <20190816104312.GA23118@SDF.ORG>
 <8736i1z27g.fsf@camilla.carcosa.net>
 <20190816134427.GA7388@SDF.ORG>
 <CAFTy05YVFKyLExAdfNof3G_s+YcQEMdFYHNTkPypVDG58U3dcw@mail.gmail.com>
Message-ID: <20190818113641.GC5354@SDF.ORG>

> Does TLS not have a native way to handle this? I did a quick search and found
> that either the client/server may send a close_notify message before
> terminating a TLS connection.
> 
>     https://tools.ietf.org/html/rfc5246#section-7.2.1

Ah, this is a great detail to have noticed!  I'll need to look into how
hard it typically is for clients to check that they've received this.
If it's straightforward, it's probably a good idea to amend the spec to
say that servers MUST send this close_notify message.  That would then
act as an analogue of Gopher's lone dot.

> I agree with this sentiment. Knowing the file size would be nice to have, but I
> haven't seen any use cases that are compelling enough to justify increasing the
> complexity to the protocol for. Even in HTTP land, Content-Length is an optional
> response header and there are several scenarios where it doesn't make sense to
> include it at all.

Yeah, I think we can leave this for now.  It was a hypothetical concern
that somebody had.  Not necessarily a bad one, but until it's observed
actually creating significant trouble for actual users on actual clients
I think we can just table this issue.  If it does come up as a practical
concern, we can resume discussion of some of the ideas here.

-Solderpunk


From solderpunk@SDF.ORG  Sun Aug 18 12:48:09 2019
From: solderpunk@SDF.ORG (solderpunk)
Date: Sun, 18 Aug 2019 11:48:09 +0000
Subject: Text reflow woes (or: I want bullets back!)y
In-Reply-To: <3E957288-8748-4B48-A3AE-38D95D9EBF90@carcosa.net>
References: <962619280.54375.1566058199182@ichabod.co-bxl>
 <87v9uvy58k.fsf@camilla.carcosa.net>
 <3E957288-8748-4B48-A3AE-38D95D9EBF90@carcosa.net>
Message-ID: <20190818114809.GD5354@SDF.ORG>

On Sat, Aug 17, 2019 at 05:14:10PM -0400, Jason McBrayer wrote:
> I am envisioning a Gemini client that looks a lot like this GTK Markdown reader:
>  https://github.com/craigbarnes/showdown/blob/master/README.md

Yes!  This is very much the kind of thing that I've thought has an
outside shot at becoming popular.

It's probably not a popular idea, but I'll confess anyway: my dream
version of a client looking a lot like that also randomly generates a
nice background/foreground colour scheme for each page, using the
hostname as a seed - every page at a given server looks the same, but
every different server has its own subtly unique visual identity, which
the server has no way to control.

-Solderpunk

From jmcbray@carcosa.net  Sun Aug 18 13:40:40 2019
From: jmcbray@carcosa.net (Jason McBrayer)
Date: Sun, 18 Aug 2019 08:40:40 -0400
Subject: Text reflow woes (or: I want bullets back!)y
In-Reply-To: <20190818114809.GD5354@SDF.ORG>
References: <962619280.54375.1566058199182@ichabod.co-bxl>
 <87v9uvy58k.fsf@camilla.carcosa.net>
 <3E957288-8748-4B48-A3AE-38D95D9EBF90@carcosa.net>
 <20190818114809.GD5354@SDF.ORG>
Message-ID: <E4688AC9-E41E-4165-99B7-6FCD2E8C8D6C@carcosa.net>

One caveat - this is still my vision for a client, but I noticed that this Markdown reader actually converts the Markdown to HTML, and then views it in a GTKWebView widget! That's a bit of unnecessary tech stack I'd like to avoid.
-- 
Sent from my Android device with K-9 Mail. Please excuse my brevity.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.orbitalfox.eu/archives/gemini/attachments/20190818/fe52eba9/attachment.htm>

From solderpunk@SDF.ORG  Sun Aug 18 14:58:54 2019
From: solderpunk@SDF.ORG (solderpunk)
Date: Sun, 18 Aug 2019 13:58:54 +0000
Subject: Password authentication over Gemini
In-Reply-To: <20190815173509.GC32200@brevard.conman.org>
References: <20190815144942.GC28953@SDF.ORG>
 <20190815173509.GC32200@brevard.conman.org>
Message-ID: <20190818135854.GE5354@SDF.ORG>

>   There's no reason for the user to generate a certificate and then provide
> a username/password when the certificate already has the username:

This is kind of neat, but would require the interface interaction that
happens in response to a 61 to give the user the opportunity to specify
these details.  At best, this is an unnecessary bit of UI friction in
cases where it won't be used.  At worst, for very privacy-conscious
users, being asked to specify any kind of personal information at all to
include in something which is supposed to be an entirely ephemeral /
disposable / transient will feel like a red flag, I suspect.

>   This is one reason why my initial status code proposal supported
> certificates and "another way" left vague at the time.

I think I am pretty set on the philosophy of not building into the
protocol any kind of high-level actions which can be straightforwardly
achieved with combinations of lower-level actions already in there.
It's a great way to keep the protocol slim and easy to reason about.
 
>   Not much there, other than to ask about having second thoughs about
> certificate only authentication?

Sorry, can you clarify?  Do you mean second thoughts about only having
certificates as a way to authenticate (i.e. are we sure we don't want
passwords as first-class citizens?).  Or do you mean second thoughts
about allowing authentication with only a certificate?  Why wouldn't we
want to allow that?

-Solderpunk


From solderpunk@SDF.ORG  Sun Aug 18 15:54:39 2019
From: solderpunk@SDF.ORG (solderpunk)
Date: Sun, 18 Aug 2019 14:54:39 +0000
Subject: Text reflow woes (or: I want bullets back!)y
In-Reply-To: <87v9uvy58k.fsf@camilla.carcosa.net>
References: <962619280.54375.1566058199182@ichabod.co-bxl>
 <87v9uvy58k.fsf@camilla.carcosa.net>
Message-ID: <20190818145439.GF5354@SDF.ORG>

> Personally, what I would most like to see in a client is a large subset
> of Markdown (no embedded HTML, probably no inline images). But all of
> the CommonMark text properties, levels of headings, etc. In general, I
> would like for reasonable typography to be what you think of when you
> think of a Gemini page. I understand that this makes things
> significantly harder for client implementors.

I too would be very happy if Gemini developed a reputation for nice,
functional typography.  None of the features you propose strike me as
problematic.  I especially like the levels of headings idea.  Not just
for the visual aspect, but because it allows, like the Markdown browser
you shared a link to, a nice navigational sidebar for large structured
documents, which is very much a good thing.

> That's one reason why I've suggested ratfactor's Text Junior format (can
> someone invite ratfactor? I don't have any means of contacting them) as
> a standard format for Gemini. It is basically a large subset of
> Markdown, but fully line-oriented and stripped of parsing ambiguities. A
> simple client can either just cat(1) it, can fmt(1) everything that's
> not wrapped in a ``` ``` block, or can apply full formatting. Everything
> I have served on my Gemini site is legal Text Junior.

Text Junior seems nice and I'm not opposed to using it or something very
similar to it as a basis for Gemini.  But the current worst shortcoming,
IMHO, of the very minimal "yeah, you can reflow stuff if you like"
Gemini spec is that it wrecks nicely formatted lists, and as far as I can
see TJ doesn't currently handle that either.

-Solderpunk


From solderpunk@SDF.ORG  Sun Aug 18 18:10:31 2019
From: solderpunk@SDF.ORG (solderpunk)
Date: Sun, 18 Aug 2019 17:10:31 +0000
Subject: Text reflow woes (or: I want bullets back!)y
In-Reply-To: <20190818145439.GF5354@SDF.ORG>
References: <962619280.54375.1566058199182@ichabod.co-bxl>
 <87v9uvy58k.fsf@camilla.carcosa.net>
 <20190818145439.GF5354@SDF.ORG>
Message-ID: <20190818171031.GG5354@SDF.ORG>

Here's a question which is going to sound aggressive or confrontational
but is actually just me trying to help all of us (myself included)
clarify our thinking and start moving in the direction of a deicision:

*ahem*

Given that, thanks to the inclusion of MIME types in the response
header, Gemini is already perfectly capable of serving of Markdown, and
given that Markdown is powerful enough to completely replicate all of
the semantics currently in the text/gemini spec (i.e. it can link to
other places via URL with a user-friendly label attached), what do we
actually stand to gain by speccing text/gemini up as something which is,
roughly, just Markdown with perhaps a few features removed and its
native linking syntax replaced by our own line-based => alternative?
Isn't this line of thought just leading us in the direction of
substantial duplication of effort and having two redundant ways to do
more or less the same thing?  Isn't that, generally speaking, a pretty
bad way to design things?

If the answer to "what do we actually stand to gain?" is "Hmm, not much,
actually" then it seems sensible to me that we should back away from
this direction.

If the answer is "We gain X, Y and Z", then the syntax, then we can do
our best to design syntax which maximises X, Y and Z.

Either answer clarifies things for us.

-Solderpunk

On Sun, Aug 18, 2019 at 02:54:39PM +0000, solderpunk wrote:
> > Personally, what I would most like to see in a client is a large subset
> > of Markdown (no embedded HTML, probably no inline images). But all of
> > the CommonMark text properties, levels of headings, etc. In general, I
> > would like for reasonable typography to be what you think of when you
> > think of a Gemini page. I understand that this makes things
> > significantly harder for client implementors.
> 
> I too would be very happy if Gemini developed a reputation for nice,
> functional typography.  None of the features you propose strike me as
> problematic.  I especially like the levels of headings idea.  Not just
> for the visual aspect, but because it allows, like the Markdown browser
> you shared a link to, a nice navigational sidebar for large structured
> documents, which is very much a good thing.
> 
> > That's one reason why I've suggested ratfactor's Text Junior format (can
> > someone invite ratfactor? I don't have any means of contacting them) as
> > a standard format for Gemini. It is basically a large subset of
> > Markdown, but fully line-oriented and stripped of parsing ambiguities. A
> > simple client can either just cat(1) it, can fmt(1) everything that's
> > not wrapped in a ``` ``` block, or can apply full formatting. Everything
> > I have served on my Gemini site is legal Text Junior.
> 
> Text Junior seems nice and I'm not opposed to using it or something very
> similar to it as a basis for Gemini.  But the current worst shortcoming,
> IMHO, of the very minimal "yeah, you can reflow stuff if you like"
> Gemini spec is that it wrecks nicely formatted lists, and as far as I can
> see TJ doesn't currently handle that either.
> 
> -Solderpunk
> 

From sean@conman.org  Sun Aug 18 22:32:53 2019
From: sean@conman.org (Sean Conner)
Date: Sun, 18 Aug 2019 17:32:53 -0400
Subject: Text reflow woes (or: I want bullets back!)y
In-Reply-To: <20190818171031.GG5354@SDF.ORG>
References: <962619280.54375.1566058199182@ichabod.co-bxl>
 <87v9uvy58k.fsf@camilla.carcosa.net> <20190818145439.GF5354@SDF.ORG>
 <20190818171031.GG5354@SDF.ORG>
Message-ID: <20190818213253.GE26287@brevard.conman.org>

It was thus said that the Great solderpunk once stated:
> Here's a question which is going to sound aggressive or confrontational
> but is actually just me trying to help all of us (myself included)
> clarify our thinking and start moving in the direction of a deicision:
> 
> *ahem*
> 
> Given that, thanks to the inclusion of MIME types in the response
> header, Gemini is already perfectly capable of serving of Markdown, and
> given that Markdown is powerful enough to completely replicate all of
> the semantics currently in the text/gemini spec (i.e. it can link to
> other places via URL with a user-friendly label attached), what do we
> actually stand to gain by speccing text/gemini up as something which is,
> roughly, just Markdown with perhaps a few features removed and its
> native linking syntax replaced by our own line-based => alternative?
> Isn't this line of thought just leading us in the direction of
> substantial duplication of effort and having two redundant ways to do
> more or less the same thing?  Isn't that, generally speaking, a pretty
> bad way to design things?

  I thought that one of the overriding concepts for Gemini was the ease if
implementation---that one should be able to write a client in 100 lines of
<insert language here>.

  Now it has certainly grown a bit.  Given that a gemini index file can have
relative links:

	=> subinfo/document.txt	Some Text

means that clients now have to merge the base URL with the relative URL to
derive the new full URL complicates the client a bit, but we do get a lot of
functionality for giving up on ease of implementation (or the reliance upon
some libraries).

> If the answer to "what do we actually stand to gain?" is "Hmm, not much,
> actually" then it seems sensible to me that we should back away from
> this direction.
> 
> If the answer is "We gain X, Y and Z", then the syntax, then we can do
> our best to design syntax which maximises X, Y and Z.
> 
> Either answer clarifies things for us.

  The issue I have with Markdown is that there is no one standard for it. 
Mark Gruber created it in 2004 as a way for *him* to create HTML documents
without having to write HTML (or use a clumsy HTML editor) and he had no
desire to add to it (because it works for him).  Since then, multiple
versions have been created to address shortcomings people came across as
they tried using Markdown for their own use, and as of right now, defined in
RFC-7763 and RFC-7764, are the various flavors of Markdown:

	Original	http://daringfireball.net/projects/markdown/
	MultiMarkdown	http://fletcher.github.io/MultiMarkdown-4/syntax
	Github		https://help.github.com/articles/github-flavored-markdown/
	Pandoc		http://johnmacfarlane.net/pandoc/README.html#pandocs-markdown
	Fountain	http://fountain.io/syntax
	CommonMark	http://spec.commonmark.org/
	kramdown-rfc2629 https://github.com/cabo/kramdown-rfc2629
	rfc7328		https://github.com/miekg/pandoc2rfc
	Extra		https://michelf.ca/projects/php-markdown/extra/

  It's almost like "pick your poison" here.

  -spc 

From sean@conman.org  Sun Aug 18 22:41:12 2019
From: sean@conman.org (Sean Conner)
Date: Sun, 18 Aug 2019 17:41:12 -0400
Subject: Password authentication over Gemini
In-Reply-To: <20190818135854.GE5354@SDF.ORG>
References: <20190815144942.GC28953@SDF.ORG>
 <20190815173509.GC32200@brevard.conman.org> <20190818135854.GE5354@SDF.ORG>
Message-ID: <20190818214112.GF26287@brevard.conman.org>

It was thus said that the Great solderpunk once stated:
> >   There's no reason for the user to generate a certificate and then provide
> > a username/password when the certificate already has the username:
> 
> This is kind of neat, but would require the interface interaction that
> happens in response to a 61 to give the user the opportunity to specify
> these details.  At best, this is an unnecessary bit of UI friction in
> cases where it won't be used.  At worst, for very privacy-conscious
> users, being asked to specify any kind of personal information at all to
> include in something which is supposed to be an entirely ephemeral /
> disposable / transient will feel like a red flag, I suspect.

  You're already asking for clients to generate a temporary certificate. 
Before going too down far this rabbit hole, why not make a few temporary
certificates and hitting:

	gemini://gemini.conman.org/private/

  There's nothing there that generates a status of 10, but it is asking for
temporary certificates.  It's not even expecting any set information.  It
might be instructive to know what what is and isn't required for a
certificate.

> >   Not much there, other than to ask about having second thoughs about
> > certificate only authentication?
> 
> Sorry, can you clarify?  Do you mean second thoughts about only having
> certificates as a way to authenticate (i.e. are we sure we don't want
> passwords as first-class citizens?).  Or do you mean second thoughts
> about allowing authentication with only a certificate?  Why wouldn't we
> want to allow that?

  I meant I had no thoughts about your question re: status code of 11.  My
question to you was, why have a usernames/password scheme when you have
certificates, which are a combination of username/password?

  -spc

From sean@conman.org  Sun Aug 18 22:47:29 2019
From: sean@conman.org (Sean Conner)
Date: Sun, 18 Aug 2019 17:47:29 -0400
Subject: File size issues
In-Reply-To: <20190818113641.GC5354@SDF.ORG>
References: <20190815154110.GE28953@SDF.ORG>
 <20190815180620.GA18238@brevard.conman.org> <20190816104312.GA23118@SDF.ORG>
 <8736i1z27g.fsf@camilla.carcosa.net> <20190816134427.GA7388@SDF.ORG>
 <CAFTy05YVFKyLExAdfNof3G_s+YcQEMdFYHNTkPypVDG58U3dcw@mail.gmail.com>
 <20190818113641.GC5354@SDF.ORG>
Message-ID: <20190818214729.GG26287@brevard.conman.org>

It was thus said that the Great solderpunk once stated:
> 
> Yeah, I think we can leave this for now.  It was a hypothetical concern
> that somebody had.  Not necessarily a bad one, but until it's observed
> actually creating significant trouble for actual users on actual clients
> I think we can just table this issue.  If it does come up as a practical
> concern, we can resume discussion of some of the ideas here.

  I had a thought last night in that there does, in fact, exist a way to
include the information without changing the syntax of the protocol.  The
MIME type that is returned can have parameters, and these parameters can act
as small headers, so:

20 text/plain; charset=iso-8859-1; size=1345
20 text/gemini; size=2003; modified=2019-08-18T17:15-05:00

  -spc

From b__m__e@mailfence.com  Sun Aug 18 23:37:57 2019
From: b__m__e@mailfence.com (Brian Evans)
Date: Mon, 19 Aug 2019 00:37:57 +0200 (CEST)
Subject: Markdown and Gemini
Message-ID: <38640569.96406.1566167877850@ichabod.co-bxl>

I have changed the subject, but this is a continuation of the text reflow convo...
but the conversation has drifted and I felt a new subject was in order.

Sean writes:
> The issue I have with Markdown is that there is no one standard for it. 
> Mark Gruber created it in 2004 as a way for *him* to create HTML documents
> without having to write HTML (or use a clumsy HTML editor) and he had no
> desire to add to it (because it works for him).  Since then, multiple
> versions have been created to address shortcomings people came across as
> they tried using Markdown for their own use, and as of right now, defined in
> RFC-7763 and RFC-7764, are the various flavors of Markdown[...]

I agree with Sean that the lack of a standard is an issue. Additionally, most
versions of markdown allow for embedded html as well as inline images. I
believe the majority of us were against these things. In additional to 
philosophical disagreements there are issues, as Sean also writes, with
the mandate that a simple client should be buildable as a weekend project.

Having said the things above, I like markdown. I think it is a good fit for what
we have been floating around with this project on the whole. I think it has a lot
of strengths. Given the issues above (coding-effort-wise and philosophy-wise)
it feels like the only way to make things work is to define a dialect of markdown
as a standard that is a part of the gemini spec (though it could have its own
spec as well and just reference that in the gemini spec). 

If that route were chosen, I think we would need to create parsers that return 
an AST in a variety of languages and make the libraries available to developers 
to use in their gemini projects. This would be a pretty big undertaking and I do not
know that it is exactly in scope. But we do seem to keep coming back to
markdown as a good option that pretty much everyone likes at least some
elements of.

I'm very open to other suggestions and look forward to hearing other paths
forward.


--?
Sent with https://mailfence.com
Secure and private email

From sean@conman.org  Mon Aug 19 08:53:55 2019
From: sean@conman.org (Sean Conner)
Date: Mon, 19 Aug 2019 03:53:55 -0400
Subject: Client testing (was Re: Text reflow woes (or: I want bullets back!))
In-Reply-To: <CAFTy05YJoK4PCtwqofobvwUDh+gh6gEv4ci0m_5BHQojj+hNjQ@mail.gmail.com>
References: <20190815081859.GB26532@SDF.ORG>
 <20190815235156.GC24356@brevard.conman.org>
 <CAFTy05YJoK4PCtwqofobvwUDh+gh6gEv4ci0m_5BHQojj+hNjQ@mail.gmail.com>
Message-ID: <20190819075355.GI26287@brevard.conman.org>

It was thus said that the Great Michael Lazar once stated:
> 
> Since there are currently only a handful of actual gemini servers to test
> against, it's difficult to discover these types of bugs when writing a client.
> It would be helpful if there was a playground or sandbox server that presented
> all of the different combinations of URL formats, charsets, response codes, etc.
> that are allowed by the Gemini spec. I might take a shot at starting one myself.

  I've made a stab at some initial tests at:

	gemini://gemini.conman.org/test/torture/

  There are currently 19 tests (0001 through 0019) and they only cover
resolving links (full URL, full path, relative path, relative path with ".."
and "." components), plus parsing of the MIME type.  Comments welcome,
especially with tests that may be unfair or are problematic.

  -spc


From jmcbray@carcosa.net  Mon Aug 19 15:15:54 2019
From: jmcbray@carcosa.net (Jason McBrayer)
Date: Mon, 19 Aug 2019 10:15:54 -0400
Subject: Markdown and Gemini
In-Reply-To: <38640569.96406.1566167877850@ichabod.co-bxl>
References: <38640569.96406.1566167877850@ichabod.co-bxl>
Message-ID: <87o90li6lh.fsf@cassilda.carcosa.net>


Brian Evans writes:

> I agree with Sean that the lack of a standard is an issue. Additionally, most
> versions of markdown allow for embedded html as well as inline images. I
> believe the majority of us were against these things. In additional to
> philosophical disagreements there are issues, as Sean also writes, with
> the mandate that a simple client should be buildable as a weekend project.

I have, from the beginning, thought that Markdown was the ideal document
type to serve over Gemini ? it meets with my intuitions about "the Lynx
web" being about the right level of presentation complexity. I have been
supporting the use of Text Junior only because it is easier to implement
without library support than Markdown.

Can we talk about what we would want to restrict, were we to implement
Markdown in Gemini clients, and why?

1. No embedded HTML.

   This should be pretty obvious; we are not generating HTML, and we do
   not want to be supporting arbitrary HTML in the client, so there is
   no use-case for including embedded HTML. We should probably specify a
   behavior for embedded HTML that is included by mistake. Options are
   to strip it entirely, to extract text from it and put the text  in a
   paragraph, or to display it raw in a ```code``` block.

2. No inline images.

   There are basically two reasons. The less compelling reason to me is
   aesthetic: we want documents to be text, and inline images in NCSA
   Mosaic were the start of the slippery slope that led to the current
   web being mostly Not Text. I consider this less compelling, because
   there is a legitimate use for inline images as figures in academic
   papers or lead images in news stories, for example.

   The more compelling case, to me, is request predictability and
   tracking avoidance.  I want following a link in a Gemini client to
   make one (1) Gemini request and receive one (1) Gemini response.
   Inline images mean that a client may make a cascade of additional
   requests for resources that is not predictable by following the
   original link. Some of these requests may be to third-party servers,
   enabling tracking. This is something we strongly want to avoid.

The remaining reason to not use Markdown is client complexity. A simple
text-mode client can basically ignore *most* of Markdown's formatting,
and just display it literally. This adds no client complexity. The one
thing that can't be ignored is links, and Markdown links are somewhat
complex. They can appear anywhere in the text, and they can be in either
[immediate](gemini://domain/path) or [reference][1] format. This is an
impediment to easy implementation and I think is the biggest block to us
adopting Markdown for Gemini.

[1]: gemini://domain/path

> If that route were chosen, I think we would need to create parsers
> that return an AST in a variety of languages and make the libraries
> available to developers to use in their gemini projects. This would be
> a pretty big undertaking and I do not know that it is exactly in
> scope.

I am willing to write such libraries for Python and Common Lisp. The
existing libraries for both languages can be extended to provide
alternative outputs. The Python library uses ElementTree internally, and
a method could be added that uses the rest of the markdown library but
returns an ElementTree rather than a string. The Common Lisp library can
probably only produce a string (I will have to look at it further), but
that string could easily be an s-expression representing a parse tree,
so that's not hard to bring back into memory.

There is already such a library for C (discount)[2], though I don't know
what the in-memory representation is. I am willing to wrap the C library
for Vala, probably.

[2]: http://www.pell.portland.or.us/~orc/Code/discount/

--
Jason McBrayer      | ?Strange is the night where black stars rise,
jmcbray at carcosa.net | and strange moons circle through the skies,
                    | but stranger still is lost Carcosa.?
                    | ? Robert W. Chambers,The King in Yellow

From tomasino@lavabit.com  Mon Aug 19 15:23:53 2019
From: tomasino@lavabit.com (James Tomasino)
Date: Mon, 19 Aug 2019 14:23:53 +0000
Subject: Markdown and Gemini
In-Reply-To: <87o90li6lh.fsf@cassilda.carcosa.net>
References: <38640569.96406.1566167877850@ichabod.co-bxl>
 <87o90li6lh.fsf@cassilda.carcosa.net>
Message-ID: <972838a8-aaf0-a15d-d5d2-807c31156729@lavabit.com>

On 8/18/19 5:10 PM, solderpunk wrote:
> Given that, thanks to the inclusion of MIME types in the response
> header, Gemini is already perfectly capable of serving of Markdown, and
> given that Markdown is powerful enough to completely replicate all of
> the semantics currently in the text/gemini spec (i.e. it can link to
> other places via URL with a user-friendly label attached), what do we
> actually stand to gain by speccing text/gemini up as something which is,
> roughly, just Markdown with perhaps a few features removed and its
> native linking syntax replaced by our own line-based => alternative?

I am not much interested in forcing a markup format into Gemini at all.
You have established a line-based hyperlinking that fixes some issues we
faced in gopher. We have security in the protocol itself. As we start
talking about the rendering of text we're getting away from heart
described in the FAQ.

I've been a voice behind the discussion of whether to reflow or not, but
even that I'll admit goes a bit further than necessary. You're right
about the MIME in the response header. Let Gemini stay simple. End the
spec there and let clients decide what to do with the markup, if it's
used at all. In another year the markup of the masses may change. We
don't need to bundle that into Gemini from the beginning.


From solderpunk@SDF.ORG  Mon Aug 19 17:46:28 2019
From: solderpunk@SDF.ORG (solderpunk)
Date: Mon, 19 Aug 2019 16:46:28 +0000
Subject: Password authentication over Gemini
In-Reply-To: <20190818214112.GF26287@brevard.conman.org>
References: <20190815144942.GC28953@SDF.ORG>
 <20190815173509.GC32200@brevard.conman.org>
 <20190818135854.GE5354@SDF.ORG>
 <20190818214112.GF26287@brevard.conman.org>
Message-ID: <20190819164628.GA28055@SDF.ORG>

>   You're already asking for clients to generate a temporary certificate. 

Which is just some random bytes which can't be tied to anything or
anyone, so what's to be afraid of?

> Before going too down far this rabbit hole, why not make a few temporary
> certificates and hitting:
> 
> 	gemini://gemini.conman.org/private/
> 
>   There's nothing there that generates a status of 10, but it is asking for
> temporary certificates.  It's not even expecting any set information.  It
> might be instructive to know what what is and isn't required for a
> certificate.

Nothing at all is expected of an ephemeral cert generated in response to
a 61 status.  It's just a random session ID, or rather, some hash of the
cert becomes a random ID.

If a server throws up a 62 then it's expecting a *particular*
certificate from an authorised whitelist.  I never really imagined any
of the metadata fields on a certificate being used as part of the
validation (on a self-signed certificate they don't count for much),
though a guess if a server wanted to they could use them.
 
>   I meant I had no thoughts about your question re: status code of 11.  My
> question to you was, why have a usernames/password scheme when you have
> certificates, which are a combination of username/password?

Certificates aren't really comparable to a username/password
combination, though.  A user/pass combo I can carry around in my head
and use from any computer with a Gemini client.  A key/certificate pair are
a bunch of files I have to carry around on a USB stick and be careful about.
They offer two different trade-offs between security and convenience.  It's
entirely analogous to SSH authentication, where user/pass and private
key are both possibilities, and both widely used.

-Solderpunk


From solderpunk@SDF.ORG  Mon Aug 19 17:51:54 2019
From: solderpunk@SDF.ORG (solderpunk)
Date: Mon, 19 Aug 2019 16:51:54 +0000
Subject: File size issues
In-Reply-To: <20190818214729.GG26287@brevard.conman.org>
References: <20190815154110.GE28953@SDF.ORG>
 <20190815180620.GA18238@brevard.conman.org>
 <20190816104312.GA23118@SDF.ORG>
 <8736i1z27g.fsf@camilla.carcosa.net>
 <20190816134427.GA7388@SDF.ORG>
 <CAFTy05YVFKyLExAdfNof3G_s+YcQEMdFYHNTkPypVDG58U3dcw@mail.gmail.com>
 <20190818113641.GC5354@SDF.ORG>
 <20190818214729.GG26287@brevard.conman.org>
Message-ID: <20190819165154.GB28055@SDF.ORG>

>   I had a thought last night in that there does, in fact, exist a way to
> include the information without changing the syntax of the protocol.  The
> MIME type that is returned can have parameters, and these parameters can act
> as small headers, so:
> 
> 20 text/plain; charset=iso-8859-1; size=1345
> 20 text/gemini; size=2003; modified=2019-08-18T17:15-05:00
>

Strictly speaking, those parameters are supposed to be limited to the
ones defined in the RFC for the corresponding type, right?

Not that we're necessarily playing by all the rules here.  text/gemini
is an unregistered, experimental type and so I think strictly speaking
we should be text/x.gemini or text/prs.gemini or something...

Don't tell the IETF!

-Solderpunk


From b__m__e@mailfence.com  Mon Aug 19 17:52:00 2019
From: b__m__e@mailfence.com (Brian Evans)
Date: Mon, 19 Aug 2019 18:52:00 +0200 (CEST)
Subject: Markdown and Gemini
Message-ID: <1538348238.135665.1566233520607@ichabod.co-bxl>

Tomasino writes:
> I am not much interested in forcing a markup format into Gemini at all.
> You have established a line-based hyperlinking that fixes some issues we
> faced in gopher. We have security in the protocol itself. As we start
> talking about the rendering of text we're getting away from heart
> described in the FAQ.
>
> I've been a voice behind the discussion of whether to reflow or not, but
> even that I'll admit goes a bit further than necessary. You're right
> about the MIME in the response header. Let Gemini stay simple. End the
> spec there and let clients decide what to do with the markup, if it's
> used at all. In another year the markup of the masses may change. We
> don't need to bundle that into Gemini from the beginning.

I both agree and disagree with the above sentiment. I agree the basic
gemini file structure that has already been preliminarily approved does
solve many of the issues people find with gopher (at least when combined
with the response header/mime). I like this fine and am still happy to
move forward with it (though some minor markup would be neat).

With regard to markdown files specifically, I do agree that it is out the
very outer edges of relevance to gemini as a spec. However, I do think
that if something like this is going to have an official integration into
gemini that it is best to do it with intent and figure it out early.

I had written a lot more here in support of markdown... but the more
I thought about it the more it felt like a separate concern. It might be
a good idea for a few developers that are planning on making feature
rich clients get together and try to standardise on some form of
markdown support so that a community standard can arise without 
the need of it being included in the gemini spec itself. If things went
that way I would advocate for keeping the gemini file format (with
the line based links) so that simple clients can still be built. 

Jason writes:
> I am willing to write such libraries for Python and Common Lisp. The
> existing libraries for both languages can be extended to provide
> alternative outputs.

If we go the route of markdown in either an official capacity or as
a community supported standard I would be happy to work on
getting a go module customized for this purpose... however, I just
looked and it seems that this would already do the job:
https://godoc.org/github.com/gomarkdown/markdown/ast


--?
Sent with https://mailfence.com
Secure and private email

From solderpunk@SDF.ORG  Mon Aug 19 18:15:07 2019
From: solderpunk@SDF.ORG (solderpunk)
Date: Mon, 19 Aug 2019 17:15:07 +0000
Subject: Markdown and Gemini
In-Reply-To: <38640569.96406.1566167877850@ichabod.co-bxl>
References: <38640569.96406.1566167877850@ichabod.co-bxl>
Message-ID: <20190819171507.GC28055@SDF.ORG>

> Having said the things above, I like markdown. I think it is a good fit for what
> we have been floating around with this project on the whole. I think it has a lot
> of strengths. Given the issues above (coding-effort-wise and philosophy-wise)
> it feels like the only way to make things work is to define a dialect of markdown
> as a standard that is a part of the gemini spec (though it could have its own
> spec as well and just reference that in the gemini spec). 

I am very opposed to including a long, complicated, detailed
specification of any markup language in the Gemini spec.  That won't
happen.  Referencing another spec would be fine, in principle.

But here's a question: what would such a spec look like?  It's occured
to me that I don't think Markdown or any similar language has ever been
specced in any way other than specifying how to translate it to HTML.
Which, as JFM has mentioned, is a whole tech stack we don't want or
need.  How do you write a spec explaining how to render itemised lists
in Markdown into plain text suitable for printing in a terminal?  That's
way fiddlier than speccing how to translate it into HTML and let the
browser worry about wrapping and indenting.  It's not impossible, e.g.
lynx must have some system for doing this.  But it doesn't sound fun to
code, and it sounds even less fun to explain *how* to code.  Nobody
other than us is going to write code implementing it, meaning there
won't be off-the-shelf libraries in any given lanuage to do it.

> If that route were chosen, I think we would need to create parsers that return 
> an AST in a variety of languages and make the libraries available to developers 
> to use in their gemini projects. This would be a pretty big undertaking and I do not
> know that it is exactly in scope. But we do seem to keep coming back to
> markdown as a good option that pretty much everyone likes at least some
> elements of.

I like Markdown as much as anybody but this feels massively out of
scope to me.  We have already defined a way for Gemini to serve Markdown
(just by specifying text/markdown).  It's not our fault if nobody knows
what that means.

-Solderpunk


From solderpunk@SDF.ORG  Mon Aug 19 18:21:14 2019
From: solderpunk@SDF.ORG (solderpunk)
Date: Mon, 19 Aug 2019 17:21:14 +0000
Subject: Client testing (was Re: Text reflow woes (or: I want bullets
 back!))
In-Reply-To: <20190819075355.GI26287@brevard.conman.org>
References: <20190815081859.GB26532@SDF.ORG>
 <20190815235156.GC24356@brevard.conman.org>
 <CAFTy05YJoK4PCtwqofobvwUDh+gh6gEv4ci0m_5BHQojj+hNjQ@mail.gmail.com>
 <20190819075355.GI26287@brevard.conman.org>
Message-ID: <20190819172114.GD28055@SDF.ORG>

>   I've made a stab at some initial tests at:
> 
> 	gemini://gemini.conman.org/test/torture/
> 
>   There are currently 19 tests (0001 through 0019) and they only cover
> resolving links (full URL, full path, relative path, relative path with ".."
> and "." components), plus parsing of the MIME type.  Comments welcome,
> especially with tests that may be unfair or are problematic.

Thanks for this!  I'm happy to report that AV-98 passes with flying
colours.

I've started a test client which you provide a hostname and it throws
various requests at that host and checks the response status against its
expectations.  It's not quite ready for prime time yet, though.

Although, it's already made me realise something that we haven't specced
any behaviour for at all: how should a server respond to an empty
request?  i.e. just CRLF.  Is this invalid, such that it should trigger
a 59 response?  Some servers do this, but others seem to treat it as a
request for the root document.

-Solderpunk


From solderpunk@SDF.ORG  Mon Aug 19 18:40:33 2019
From: solderpunk@SDF.ORG (solderpunk)
Date: Mon, 19 Aug 2019 17:40:33 +0000
Subject: Markdown and Gemini
In-Reply-To: <972838a8-aaf0-a15d-d5d2-807c31156729@lavabit.com>
References: <38640569.96406.1566167877850@ichabod.co-bxl>
 <87o90li6lh.fsf@cassilda.carcosa.net>
 <972838a8-aaf0-a15d-d5d2-807c31156729@lavabit.com>
Message-ID: <20190819174033.GE28055@SDF.ORG>

> As we start
> talking about the rendering of text we're getting away from heart
> described in the FAQ.

I'm starting to feel this way, too.  But let's see how I feel tomorrow.
:)
 
> I've been a voice behind the discussion of whether to reflow or not, but
> even that I'll admit goes a bit further than necessary.

The reflowing question I guess has been the start of all this.  it's
something that many, many people have requested - unsurprisingly in this
smartphone-obsessed world.  And since it seemed harmless I said, "sure,
let's reflow".  But it's not harmless, it breaks lots of functional
styling we can do with just plain text, and it seems hard to undo that
harm without cranking the complexity level up considerably by defining
different kinds of entity which should/should not be reflowed.

If there's no reflow, then Markdown "just works" and doesn't even need
to be specced.

I have to admit, I'm now starting to wonder how essential reflow is.  I
have a very old phone, whose screen is very small by modern standards.
You definitely couldn't buy a new smartphone today with a screen as small
as mine.  But if I turn it horizontally and let the screen flip, I can
actually (just!) view phlog posts wrapped at 70 chars in PocketGopher no
problem, without any weird wrapping artifacts.  If we recommended
wrapping at 60 chars just to be safe, I actually think plain text would
be workable on the vast majority of mobile devices.  But I'm happy to
hear from people with devices were this wouldn't be true.

-Solderpunk


From solderpunk@SDF.ORG  Mon Aug 19 19:19:06 2019
From: solderpunk@SDF.ORG (solderpunk)
Date: Mon, 19 Aug 2019 18:19:06 +0000
Subject: Text reflow woes (or: I want bullets back!)y
In-Reply-To: <20190818213253.GE26287@brevard.conman.org>
References: <962619280.54375.1566058199182@ichabod.co-bxl>
 <87v9uvy58k.fsf@camilla.carcosa.net>
 <20190818145439.GF5354@SDF.ORG> <20190818171031.GG5354@SDF.ORG>
 <20190818213253.GE26287@brevard.conman.org>
Message-ID: <20190819181906.GF28055@SDF.ORG>

>   I thought that one of the overriding concepts for Gemini was the ease if
> implementation---that one should be able to write a client in 100 lines of
> <insert language here>.
> 
>   Now it has certainly grown a bit.  Given that a gemini index file can have
> relative links:

I agree that all this talk of complicated markdown syntax gravely
threatens this overriding concept (although one could argue maybe not,
as just printing non-link lines as-is *is* an explicitly permitted
alternative).  But relative URLs are really no danger to this at all,
and for the record I've just updated
https://tildegit.org/solderpunk/gemini-demo-1 to handle status codes
of 10, and it's still under 100 lines of Python.  It follows redirects,
has no trouble with relative links, and uses mailcap to open non-text
responses.  The user interface is fairly brutalist, but in terms of
taking advantage of what the protocol can do, it's fairly complete.
Client certificates are the only thing it opts out of.

I should try it out on your torture test...

-Solderpunk


From solderpunk@SDF.ORG  Mon Aug 19 19:41:44 2019
From: solderpunk@SDF.ORG (solderpunk)
Date: Mon, 19 Aug 2019 18:41:44 +0000
Subject: Markdown and Gemini
In-Reply-To: <1538348238.135665.1566233520607@ichabod.co-bxl>
References: <1538348238.135665.1566233520607@ichabod.co-bxl>
Message-ID: <20190819184144.GH28055@SDF.ORG>

> I both agree and disagree with the above sentiment. I agree the basic
> gemini file structure that has already been preliminarily approved does
> solve many of the issues people find with gopher (at least when combined
> with the response header/mime). I like this fine and am still happy to
> move forward with it (though some minor markup would be neat).

I am *super* happy with the extent to which Gemini as-specced solves
common complaints/pain-points with Gopher.  Lack of text reflowing is, I
think, the *only* even half-way common Gopher complaint/limitation where
we haven't made really very major progress.  For everything else, we've
knocked it out of the park.
 
> I had written a lot more here in support of markdown... but the more
> I thought about it the more it felt like a separate concern. It might be
> a good idea for a few developers that are planning on making feature
> rich clients get together and try to standardise on some form of
> markdown support so that a community standard can arise without 
> the need of it being included in the gemini spec itself. If things went
> that way I would advocate for keeping the gemini file format (with
> the line based links) so that simple clients can still be built. 

If people wanted to produce, as a kind of parellel project, a complete
and detailed specification of "Markdown" which lacked anything gross
(like embedded HTML), I think I'd be happy to have the Gemini spec say
"Gemini clients which opt to support text/markdown responses should do
so using such-and-such definition of Markdown", referring to the results
of that project.

-Solderpunk


From sean@conman.org  Mon Aug 19 21:34:17 2019
From: sean@conman.org (Sean Conner)
Date: Mon, 19 Aug 2019 16:34:17 -0400
Subject: File size issues
In-Reply-To: <20190819165154.GB28055@SDF.ORG>
References: <20190815154110.GE28953@SDF.ORG>
 <20190815180620.GA18238@brevard.conman.org> <20190816104312.GA23118@SDF.ORG>
 <8736i1z27g.fsf@camilla.carcosa.net> <20190816134427.GA7388@SDF.ORG>
 <CAFTy05YVFKyLExAdfNof3G_s+YcQEMdFYHNTkPypVDG58U3dcw@mail.gmail.com>
 <20190818113641.GC5354@SDF.ORG> <20190818214729.GG26287@brevard.conman.org>
 <20190819165154.GB28055@SDF.ORG>
Message-ID: <20190819203417.GJ26287@brevard.conman.org>

It was thus said that the Great solderpunk once stated:
> >   I had a thought last night in that there does, in fact, exist a way to
> > include the information without changing the syntax of the protocol.  The
> > MIME type that is returned can have parameters, and these parameters can act
> > as small headers, so:
> > 
> > 20 text/plain; charset=iso-8859-1; size=1345
> > 20 text/gemini; size=2003; modified=2019-08-18T17:15-05:00
> >
> 
> Strictly speaking, those parameters are supposed to be limited to the
> ones defined in the RFC for the corresponding type, right?

  Nope.  From RFC-2045, section 5:

	MIME implementations must ignore any parameters whose names they do
	not recognize.

  Also, from the same section:

	The ordering of parameters is not significant.

> Not that we're necessarily playing by all the rules here.  text/gemini
> is an unregistered, experimental type and so I think strictly speaking
> we should be text/x.gemini or text/prs.gemini or something...

  Nope, RFC-6648 deprecates the whole "X-" thing.

  -spc

From sean@conman.org  Mon Aug 19 21:51:36 2019
From: sean@conman.org (Sean Conner)
Date: Mon, 19 Aug 2019 16:51:36 -0400
Subject: Password authentication over Gemini
In-Reply-To: <20190819164628.GA28055@SDF.ORG>
References: <20190815144942.GC28953@SDF.ORG>
 <20190815173509.GC32200@brevard.conman.org> <20190818135854.GE5354@SDF.ORG>
 <20190818214112.GF26287@brevard.conman.org> <20190819164628.GA28055@SDF.ORG>
Message-ID: <20190819205136.GK26287@brevard.conman.org>

It was thus said that the Great solderpunk once stated:
> >   You're already asking for clients to generate a temporary certificate. 
> 
> Which is just some random bytes which can't be tied to anything or
> anyone, so what's to be afraid of?

  I'm not so much afraid as I'm confused.  I came up with a status code
proposal back in June [1] where I had status codes for both password
authentication and certificate authentication:

unauthorized
        general
                rejected        301 *
        password
                require         310
                rejected        311
                expired         312
        certificate
                require         320
                rejected        321
                expired         322
                future          323

which you rejected outright and decided to go with just certificate
authentication.  I can only suppose you have changed your mind somewhat on
this.

> > Before going too down far this rabbit hole, why not make a few temporary
> > certificates and hitting:
> > 
> > 	gemini://gemini.conman.org/private/
> > 
> >   There's nothing there that generates a status of 10, but it is asking for
> > temporary certificates.  It's not even expecting any set information.  It
> > might be instructive to know what what is and isn't required for a
> > certificate.
> 
> Nothing at all is expected of an ephemeral cert generated in response to
> a 61 status.  It's just a random session ID, or rather, some hash of the
> cert becomes a random ID.
> 
> If a server throws up a 62 then it's expecting a *particular*
> certificate from an authorised whitelist.  I never really imagined any
> of the metadata fields on a certificate being used as part of the
> validation (on a self-signed certificate they don't count for much),
> though a guess if a server wanted to they could use them.

  A username is a username.  Of the two protected areas on my Gemini server
[2], one requires a certificate I signed in order to access.  You generate a
CSR (certificate signing request), I sign it and send back the certificate.
It is also possible to send me (out of band) a certificate that you
generated that will also be checked upon each request, but there has to be
*some* unique information to check (that's not to say it has to leak your
real name or location or anything).  

Right now, the conman-labs-private area just checks the issuer of the
certificate. The other private area one will accept *any* certificate (aka a
temporary or transient certificate) and doesn't even bother checking the
certificate.

  -spc

[1]	geminmi://gemini.conman.org/notes/possible-error-codes.txt

[2]	gemini://gemini.conman.org/private/
	gemini://gemini.conman.org/conman-labs-private/

From jmcbray@carcosa.net  Tue Aug 20 12:51:05 2019
From: jmcbray@carcosa.net (Jason McBrayer)
Date: Tue, 20 Aug 2019 07:51:05 -0400
Subject: Should I add topics?
Message-ID: <87y2zovyvx.fsf@cassilda.carcosa.net>

Hi, all. List-admin hat is on.

Mailman2, which this list is using, has a feature where you can add
"topics" to a list. They are reflected in the subject of the message,
and you can choose through the web interface to subscribe only to topics
you are interested in. You set the topic of a message you send through a
header in your email (or a pseudo-header in the first couple of lines of
message body).

I haven't enabled this feature because this is, so far, a pretty
low-volume list. But I'm wondering if markup language discussion should
be split off from protocol discussion so that people who are not
interested in that discussion can skip it. It would also be possible to
set up topics for software announcements, client/server development,
etc.

Let me know if you're interested or opposed.

-- 
Jason McBrayer      | ?Strange is the night where black stars rise,
jmcbray at carcosa.net | and strange moons circle through the skies,
                    | but stranger still is lost Carcosa.?
                    | ? Robert W. Chambers,The King in Yellow

From julien@sideburns.eu  Tue Aug 20 19:16:34 2019
From: julien@sideburns.eu (Julien Blanchard)
Date: Tue, 20 Aug 2019 20:16:34 +0200
Subject: ANN: lobste.rs in Gemini-space
Message-ID: <7F7ED84E-157F-4C0D-A242-4676450F019E@sideburns.eu>

Hi there,
I updated my lobste.rs sync script to generate a Gemini file, I figured this might interest some of you.

I hope I can update it to be more interesting (from a Gemini standpoint) but in the meantime it?s available here: gemini://typed-hole.org/lobsters.gemini

Cheers.

From sean@conman.org  Tue Aug 20 19:28:35 2019
From: sean@conman.org (Sean Conner)
Date: Tue, 20 Aug 2019 14:28:35 -0400
Subject: Should I add topics?
In-Reply-To: <87y2zovyvx.fsf@cassilda.carcosa.net>
References: <87y2zovyvx.fsf@cassilda.carcosa.net>
Message-ID: <20190820182835.GB4040@brevard.conman.org>

It was thus said that the Great Jason McBrayer once stated:
> Hi, all. List-admin hat is on.
> 
> Mailman2, which this list is using, has a feature where you can add
> "topics" to a list. They are reflected in the subject of the message,
> and you can choose through the web interface to subscribe only to topics
> you are interested in. You set the topic of a message you send through a
> header in your email (or a pseudo-header in the first couple of lines of
> message body).
> 
> I haven't enabled this feature because this is, so far, a pretty
> low-volume list. But I'm wondering if markup language discussion should
> be split off from protocol discussion so that people who are not
> interested in that discussion can skip it. It would also be possible to
> set up topics for software announcements, client/server development,
> etc.
> 
> Let me know if you're interested or opposed.

  Personally, I'm not interested.  Maybe if this list gets 100+ messages a
day, then it might be worth it.  Now?  Not so much.

  -spc (Once was on a list that hit 500+ new messages in a single day)



From sean@conman.org  Wed Aug 21 03:40:28 2019
From: sean@conman.org (Sean Conner)
Date: Tue, 20 Aug 2019 22:40:28 -0400
Subject: Client testing (was Re: Text reflow woes (or: I want bullets
 back!))
In-Reply-To: <20190819172114.GD28055@SDF.ORG>
References: <20190815081859.GB26532@SDF.ORG>
 <20190815235156.GC24356@brevard.conman.org>
 <CAFTy05YJoK4PCtwqofobvwUDh+gh6gEv4ci0m_5BHQojj+hNjQ@mail.gmail.com>
 <20190819075355.GI26287@brevard.conman.org> <20190819172114.GD28055@SDF.ORG>
Message-ID: <20190821024028.GA25645@brevard.conman.org>

It was thus said that the Great solderpunk once stated:
> >   I've made a stab at some initial tests at:
> > 
> > 	gemini://gemini.conman.org/test/torture/
> > 
> >   There are currently 19 tests (0001 through 0019) and they only cover
> > resolving links (full URL, full path, relative path, relative path with ".."
> > and "." components), plus parsing of the MIME type.  Comments welcome,
> > especially with tests that may be unfair or are problematic.
> 
> Thanks for this!  I'm happy to report that AV-98 passes with flying
> colours.

  I've added two new tests.  Also, the index page lists all the tests
currently available so you can resume from where you last left off.

> Although, it's already made me realise something that we haven't specced
> any behaviour for at all: how should a server respond to an empty
> request?  i.e. just CRLF.  Is this invalid, such that it should trigger
> a 59 response?  Some servers do this, but others seem to treat it as a
> request for the root document.

  It'd be an exception to not send anything.  Other than that, I don't have
any real preference.

  -spc


From sean@conman.org  Wed Aug 21 03:44:24 2019
From: sean@conman.org (Sean Conner)
Date: Tue, 20 Aug 2019 22:44:24 -0400
Subject: ANN: lobste.rs in Gemini-space
In-Reply-To: <7F7ED84E-157F-4C0D-A242-4676450F019E@sideburns.eu>
References: <7F7ED84E-157F-4C0D-A242-4676450F019E@sideburns.eu>
Message-ID: <20190821024424.GB25645@brevard.conman.org>

It was thus said that the Great Julien Blanchard once stated:
> Hi there,
> 
> I updated my lobste.rs sync script to generate a Gemini file, I figured
> this might interest some of you.
> 
> I hope I can update it to be more interesting (from a Gemini standpoint)
> but in the meantime it?s available here:
> gemini://typed-hole.org/lobsters.gemini

  Very cool!

  -spc


From julien@sideburns.eu  Wed Aug 21 11:24:46 2019
From: julien@sideburns.eu (julienXX)
Date: Wed, 21 Aug 2019 12:24:46 +0200
Subject: Should I add topics?
In-Reply-To: <87y2zovyvx.fsf@cassilda.carcosa.net>
References: <87y2zovyvx.fsf@cassilda.carcosa.net>
Message-ID: <4aa4a246-e0f6-1cb3-b9da-6b8d0e1c2714@sideburns.eu>

> Let me know if you're interested or opposed.
I don't feel the need for it right now, maybe later when the list grows.

-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.orbitalfox.eu/archives/gemini/attachments/20190821/3d670596/attachment.htm>

From julien@sideburns.eu  Wed Aug 21 11:49:27 2019
From: julien@sideburns.eu (julienXX)
Date: Wed, 21 Aug 2019 12:49:27 +0200
Subject: Markdown and Gemini
In-Reply-To: <38640569.96406.1566167877850@ichabod.co-bxl>
References: <38640569.96406.1566167877850@ichabod.co-bxl>
Message-ID: <e27c642b-a34c-3c1a-bfcd-b2649f4f1925@sideburns.eu>

This is really a client concern to me and I think this should not be in 
the spec.
If one wants to serve markdown they already have `text/markdown` at 
their disposal.


From tomasino@lavabit.com  Wed Aug 21 11:55:14 2019
From: tomasino@lavabit.com (James Tomasino)
Date: Wed, 21 Aug 2019 10:55:14 +0000
Subject: Markdown and Gemini
In-Reply-To: <e27c642b-a34c-3c1a-bfcd-b2649f4f1925@sideburns.eu>
References: <38640569.96406.1566167877850@ichabod.co-bxl>
 <e27c642b-a34c-3c1a-bfcd-b2649f4f1925@sideburns.eu>
Message-ID: <05e3f6de-2d23-4c08-e380-27cfc8065e50@lavabit.com>

>From IRC:

<solene> I'm on a quite fun project I'll write about soon. I rewrote a
minimalism markup system, it's markdown but only with titles and code
blocks supports :D the html converter is 18 lines of awk (1 instruction
/ line)

For those unfamiliar, solene is an openbsd developer and posts here:
gopher://dataswamp.org/1/~solene

She's not working on Gemini, but this mini-markup she's developing may
prove useful for folks writing clients. As we've discussed, it probably
doesn't make sense to support the full markdown spec (even if you can
choose one flavor). Her micro-version might be handy.

Also, many have said they don't want to translate to HTML for rendering,
which makes sense for most applications. Regardless, her awk parsing
will be a helpful aid to anyone looking to write their own.

I've informed her about potential Gemini applications and she said
she'll be sharing her code soon. I'll post a link to the list when it
comes up.

- tomasino


From tomasino@lavabit.com  Wed Aug 21 12:23:35 2019
From: tomasino@lavabit.com (James Tomasino)
Date: Wed, 21 Aug 2019 11:23:35 +0000
Subject: Markdown and Gemini
In-Reply-To: <05e3f6de-2d23-4c08-e380-27cfc8065e50@lavabit.com>
References: <38640569.96406.1566167877850@ichabod.co-bxl>
 <e27c642b-a34c-3c1a-bfcd-b2649f4f1925@sideburns.eu>
 <05e3f6de-2d23-4c08-e380-27cfc8065e50@lavabit.com>
Message-ID: <8449ed9e-0285-e84a-d356-15ffcb9840b5@lavabit.com>

Solene is fast. Here's the awk parser:
https://ttm.sh/HX.awk

You can see her code blocks she's supporting are those starting with 4
spaces, not the ``` fences. Perhaps this will inspire some of you for
simple markup in your clients.

-tomasino


From solderpunk@SDF.ORG  Wed Aug 21 20:47:31 2019
From: solderpunk@SDF.ORG (solderpunk)
Date: Wed, 21 Aug 2019 19:47:31 +0000
Subject: Should I add topics?
In-Reply-To: <4aa4a246-e0f6-1cb3-b9da-6b8d0e1c2714@sideburns.eu>
References: <87y2zovyvx.fsf@cassilda.carcosa.net>
 <4aa4a246-e0f6-1cb3-b9da-6b8d0e1c2714@sideburns.eu>
Message-ID: <20190821194731.GB27059@SDF.ORG>

On Wed, Aug 21, 2019 at 12:24:46PM +0200, julienXX wrote:
> > Let me know if you're interested or opposed.
> I don't feel the need for it right now, maybe later when the list grows.

I agree with the others so far, this isn't yet necessary - but good to
know it's possible in case it one day becomes so.

-Solderpunk
 

From solderpunk@SDF.ORG  Wed Aug 21 20:48:31 2019
From: solderpunk@SDF.ORG (solderpunk)
Date: Wed, 21 Aug 2019 19:48:31 +0000
Subject: Markdown and Gemini
In-Reply-To: <8449ed9e-0285-e84a-d356-15ffcb9840b5@lavabit.com>
References: <38640569.96406.1566167877850@ichabod.co-bxl>
 <e27c642b-a34c-3c1a-bfcd-b2649f4f1925@sideburns.eu>
 <05e3f6de-2d23-4c08-e380-27cfc8065e50@lavabit.com>
 <8449ed9e-0285-e84a-d356-15ffcb9840b5@lavabit.com>
Message-ID: <20190821194831.GC27059@SDF.ORG>

Thanks a lot for sharing this with the list, Tomasino!  This is very
timely work by Solene.

-Soldeprunk

On Wed, Aug 21, 2019 at 11:23:35AM +0000, James Tomasino wrote:
> Solene is fast. Here's the awk parser:
> https://ttm.sh/HX.awk
> 
> You can see her code blocks she's supporting are those starting with 4
> spaces, not the ``` fences. Perhaps this will inspire some of you for
> simple markup in your clients.
> 
> -tomasino
> 

From sean@conman.org  Wed Aug 21 22:18:35 2019
From: sean@conman.org (Sean Conner)
Date: Wed, 21 Aug 2019 17:18:35 -0400
Subject: Markdown and Gemini
In-Reply-To: <05e3f6de-2d23-4c08-e380-27cfc8065e50@lavabit.com>
References: <38640569.96406.1566167877850@ichabod.co-bxl>
 <e27c642b-a34c-3c1a-bfcd-b2649f4f1925@sideburns.eu>
 <05e3f6de-2d23-4c08-e380-27cfc8065e50@lavabit.com>
Message-ID: <20190821211835.GB13961@brevard.conman.org>

It was thus said that the Great James Tomasino once stated:
> >From IRC:
> 
> <solene> I'm on a quite fun project I'll write about soon. I rewrote a
> minimalism markup system, it's markdown but only with titles and code
> blocks supports :D the html converter is 18 lines of awk (1 instruction
> / line)
> 
> For those unfamiliar, solene is an openbsd developer and posts here:
> gopher://dataswamp.org/1/~solene
> 
> She's not working on Gemini, but this mini-markup she's developing may
> prove useful for folks writing clients. As we've discussed, it probably
> doesn't make sense to support the full markdown spec (even if you can
> choose one flavor). Her micro-version might be handy.
> 
> Also, many have said they don't want to translate to HTML for rendering,
> which makes sense for most applications. Regardless, her awk parsing
> will be a helpful aid to anyone looking to write their own.
> 
> I've informed her about potential Gemini applications and she said
> she'll be sharing her code soon. I'll post a link to the list when it
> comes up.

  Having written my own markup-langauge, I think I can offer some notes and
insights into the process.  I am in no way trying to promote what I have as
a standard, as it barely works for me.  Also, it outputs HTML directly (I
use it for blogging).

  Anyway.  I came up with my own markup-laguage [1], based off OrgMode from
Emacs.  It's over 700 lines of Lua code [2] geared towards how I write blog
entries.  I love it and absolutely hate it at the same time.  Mainly, I hate
it because I keep forgetting what are "special" characters and what aren't,
and more often than not, I end up with half the post in an italicized
monspaced font.

  The other problem is when a block section isn't parsed properly, and I
have to hunt down what corner case I ran into this time (in fact, just today
[3] I fixed yet another corner case in rendering, and that happens nearly
every time I use the thing.  Yes, it starts out simple.  Then you want to
format this, and then that, and then the other thing, and pretty soon you
end up with a 700+ line of exceptions threatening to explode.

  As an aside, there are a few aspects I do love about the system.  One is
the automatic conversion of HTML entities (with exceptions like &amp; and
&lt; for technical reasons) into their UTF-8 equivalents.  This let's me
type those characters I can't type, like "?" as "&uuml;".  It can also
handle entities like "&#9772;".  The second aspect is conversion of some
short-cut sequences like `` (two agrave accents) into ? (typographical
quotes).  A third aspect is the ability handle acronyms---that is, it
converts

		TCP

into

		<abbr title="Transmission Control Protocol">TCP</abbr>

but on an ad-hoc, defined in file, way. [4]

  Anyway, I digress.

  So let's define a simple markup language just to discuss some issues.  A
line starting with '#' is a header.  _This is italic text_.  And **some bold
text**.  And

	* a bullet list
	* uses a single asterisk, bold uses two.
	* This is an unordered list.

But

	1 this is a numbered list
	2 like this
	3 see?

  Othersise, paragraphs are reflowed.  Links ... um ... just for now, let's
go with [[http://boston.conman.org][this format for links]].  And already
there are issues, such as: for a bulletted list, are these the same?

*a bullet list
*uses a single asterisk, bold uses two.
*This is an unordered list.

* a bullet list
* uses a single asterisk...
* This is an ...

	*a bullet list
* uses a single ...
	* This is an ...

  And that last one---is that two lists, one with a sub-list underneath it?
And I picked two asterisks for bold just to make it eastier to detect a list
vs. bold text.  Because otherwise, you'll end up with bizzare rules like:

	If a line starts with 0 or more whitespace plus a '*' and the
	following line starts with 0 or more whiatepsace plus a '*' then the
	'*' marks a list, otherwise it starts bold text ...

  That's just part of the problems I have with my own markup language---the
overloaded nature of it all.  I mean, I didn't include a way to have
preformatted text (like source code examples).  Assuming we go along with
the four leading spaces, what happens when we have a nested list?

* Major Topic I
  * Minor detail A of topic I
    * detail 1
    * detail 2

Um ... and then what if we *do* want a list in a preformatted format?

    * Major Topic 1
      * Minor detail A of topic 1
        * detail 1
        * detail 2

  Or is that just a list?

  The point here isn't to try to define a format, my point is to say it's a
messy, difficult job with lots of people wanting different things.  Anyway,
I rambled on long enough ... 

  -spc

[1]	https://github.com/spc476/mod_blog/blob/master/NOTES/testmsg

[2]	https://github.com/spc476/mod_blog/blob/master/Lua/format.lua

[3]	http://boston.conman.org/2019/08/21.1
	It's the blacked out text in the table.  

[4]	I really like HTML in case you can't tell.

From jmcbray@carcosa.net  Thu Aug 22 12:48:22 2019
From: jmcbray@carcosa.net (Jason McBrayer)
Date: Thu, 22 Aug 2019 07:48:22 -0400
Subject: Markdown and Gemini
In-Reply-To: <20190821211835.GB13961@brevard.conman.org>
References: <38640569.96406.1566167877850@ichabod.co-bxl>
 <e27c642b-a34c-3c1a-bfcd-b2649f4f1925@sideburns.eu>
 <05e3f6de-2d23-4c08-e380-27cfc8065e50@lavabit.com>
 <20190821211835.GB13961@brevard.conman.org>
Message-ID: <87h869qv3w.fsf@cassilda.carcosa.net>


Sean Conner writes:
>   The point here isn't to try to define a format, my point is to say
> it's a messy, difficult job with lots of people wanting different
> things. Anyway, I rambled on long enough ...

Thanks. This is a very useful contribution to the discussion, and to me
it suggests that maybe we are best off not defining any markup in
text/gemini other than links, but noting that text MAY be reflowed at
the client's discretion, meaning that you cannot rely on ASCII art or
ASCII tables working.

An aside not directly related to this:

I'm playing with writing a Gnome client, and my intention is for it to
support text/plain, text/gemini, and text/markdown natively, as well as
Gophernicus-flavored gophermaps. It's in Python, and the Python library
'mistletoe' supports returning an AST that I plan on using to do
formatting in a GtkTextView.

--
Jason McBrayer      | ?Strange is the night where black stars rise,
jmcbray at carcosa.net | and strange moons circle through the skies,
                    | but stranger still is lost Carcosa.?
                    | ? Robert W. Chambers,The King in Yellow

From tomasino@lavabit.com  Fri Aug 23 00:38:01 2019
From: tomasino@lavabit.com (James Tomasino)
Date: Thu, 22 Aug 2019 23:38:01 +0000
Subject: Default index files
In-Reply-To: <20190821211835.GB13961@brevard.conman.org>
References: <38640569.96406.1566167877850@ichabod.co-bxl>
 <e27c642b-a34c-3c1a-bfcd-b2649f4f1925@sideburns.eu>
 <05e3f6de-2d23-4c08-e380-27cfc8065e50@lavabit.com>
 <20190821211835.GB13961@brevard.conman.org>
Message-ID: <5ba154ce-80e5-db84-1510-46acf8035706@lavabit.com>

I installed Jetforce on gopher.black tonight and immediately ran into a
very basic question. What is the _name_ of the default index file? I
looked through the spec (granted not closely) and didn't see it defined.
In the end I read through Michael's source for Jetforce and found that
he's using ".gemini" to override the default file listing and serve an
index gemini file.

Is that standard? Is there a standard? That seems like a fairly basic
thing we might want to include. It seems small now, but if a Gemini
server were to grow large and wanted to change server software that
could become a big barrier.

Anyway, check out my mostly empty Gemini server:

gemini://gopher.black


From sean@conman.org  Fri Aug 23 02:40:54 2019
From: sean@conman.org (Sean Conner)
Date: Thu, 22 Aug 2019 21:40:54 -0400
Subject: Default index files
In-Reply-To: <5ba154ce-80e5-db84-1510-46acf8035706@lavabit.com>
References: <38640569.96406.1566167877850@ichabod.co-bxl>
 <e27c642b-a34c-3c1a-bfcd-b2649f4f1925@sideburns.eu>
 <05e3f6de-2d23-4c08-e380-27cfc8065e50@lavabit.com>
 <20190821211835.GB13961@brevard.conman.org>
 <5ba154ce-80e5-db84-1510-46acf8035706@lavabit.com>
Message-ID: <20190823014054.GA1955@brevard.conman.org>

It was thus said that the Great James Tomasino once stated:
> I installed Jetforce on gopher.black tonight and immediately ran into a
> very basic question. What is the _name_ of the default index file? 

  It depends upon the server I would guess.  I don't see why the name of an
index file would be a standard.

> I
> looked through the spec (granted not closely) and didn't see it defined.
> In the end I read through Michael's source for Jetforce and found that
> he's using ".gemini" to override the default file listing and serve an
> index gemini file.

  And I use a file called 'index.gemini', modelled after Apache's
'index.html' file (the name of which is configurable so it doesn't even have
to be that).

> Is that standard? Is there a standard? That seems like a fairly basic
> thing we might want to include. It seems small now, but if a Gemini
> server were to grow large and wanted to change server software that
> could become a big barrier.

  It didn't seem to be a problem with having .htm and .html files.  On my
sever, if a directory contains an index.gemini, it will be served, otherwise
a default page will be constructed.  Addtionally, if a file has an extension
of ".gemini" it will be served up with a MIME type of "text/gemini".  But
that's on my server.  Others may vary.

  -spc (For instance, I've seen ".gmi" used as an extension)

From b__m__e@mailfence.com  Fri Aug 23 03:18:06 2019
From: b__m__e@mailfence.com (Brian Evans)
Date: Fri, 23 Aug 2019 04:18:06 +0200 (CEST)
Subject: Default index files
Message-ID: <1511720325.324852.1566526685964@ichabod.co-bxl>

I think the idea of a server defining (or allowing to be defined) the default file
seems fine. Tomasino does bring up a solid point that standardizing to some
degree or other on something would make migrating to other servers easier...
but I dont know that it is a huge deal. Particularly if, as is the case on Sean's
server software, an admin can set the default file.

I do think it would be nice if we settled on .gemini or .gmi or some such. Or at
the very least do some form of limiting to those two. Since there is not a shebang
in the file the suffix can make a difference for mime sniffing (both for server and
other software that might want to access gemini files). Having two isnt a big deal,
but a wildly divergent or per server naming convention feels needless since it can
really be an easy single line in the spec. I dont feel crazy strongly about which,
though I have a slight inclination toward gmi. Not sure if others will feel this needs
to be defined in the spec, but look forward to hearing thoughts.

--?
Sent with https://mailfence.com
Secure and private email

From lazar.michael22@gmail.com  Fri Aug 23 03:19:01 2019
From: lazar.michael22@gmail.com (Michael Lazar)
Date: Thu, 22 Aug 2019 22:19:01 -0400
Subject: Default index files
In-Reply-To: <5ba154ce-80e5-db84-1510-46acf8035706@lavabit.com>
References: <38640569.96406.1566167877850@ichabod.co-bxl>
 <e27c642b-a34c-3c1a-bfcd-b2649f4f1925@sideburns.eu>
 <05e3f6de-2d23-4c08-e380-27cfc8065e50@lavabit.com>
 <20190821211835.GB13961@brevard.conman.org>
 <5ba154ce-80e5-db84-1510-46acf8035706@lavabit.com>
Message-ID: <CAFTy05aBdMECR3+_TUXZXeBpx01D87z2i3dU58cH6XArytPEjQ@mail.gmail.com>

On Thu, Aug 22, 2019 at 7:38 PM James Tomasino <tomasino at lavabit.com> wrote:
> I installed Jetforce on gopher.black tonight and immediately ran into a
> very basic question. What is the _name_ of the default index file? I
> looked through the spec (granted not closely) and didn't see it defined.
> In the end I read through Michael's source for Jetforce and found that
> he's using ".gemini" to override the default file listing and serve an
> index gemini file.
>
> Is that standard? Is there a standard? That seems like a fairly basic
> thing we might want to include. It seems small now, but if a Gemini
> server were to grow large and wanted to change server software that
> could become a big barrier.

I went with ".gemini" because it was simple and made sense to me at the time.
But now that you bring it up, it could just as easily be named something else
and I wouldn't mind changing Jetforce if people come to a consensus.

I like the ".gmi" file extension that's being used over at carcosa.net. That
file extension appears to currently only be used by some obscure GPS mapping
file [1], so that shouldn't be a problem. I can't figure out why their
"index.gml" file uses a different file extension though. Is this trying to
follow some existing convention? Otherwise, I'm learning toward "index.gmi".

Coincidentally, I just released a new version of Jetforce tonight [2]. One of
the new features is support for recognizing files with the ".gmi" extension as
text/gemini.

> Anyway, check out my mostly empty Gemini server:
>
> gemini://gopher.black

Nice! Please feel encouraged to spam the project issue tracker if you notice
any bugs or think of features that you would like to see added.

[1] https://filext.com/file-extension/GMI
[2] https://github.com/michael-lazar/jetforce/releases/tag/v0.0.6

From jmcbray@carcosa.net  Fri Aug 23 13:02:51 2019
From: jmcbray@carcosa.net (Jason McBrayer)
Date: Fri, 23 Aug 2019 08:02:51 -0400
Subject: Default index files
In-Reply-To: <CAFTy05aBdMECR3+_TUXZXeBpx01D87z2i3dU58cH6XArytPEjQ@mail.gmail.com>
References: <38640569.96406.1566167877850@ichabod.co-bxl>
 <e27c642b-a34c-3c1a-bfcd-b2649f4f1925@sideburns.eu>
 <05e3f6de-2d23-4c08-e380-27cfc8065e50@lavabit.com>
 <20190821211835.GB13961@brevard.conman.org>
 <5ba154ce-80e5-db84-1510-46acf8035706@lavabit.com>
 <CAFTy05aBdMECR3+_TUXZXeBpx01D87z2i3dU58cH6XArytPEjQ@mail.gmail.com>
Message-ID: <87a7c0ay38.fsf@cassilda.carcosa.net>


Michael Lazar writes:
> I like the ".gmi" file extension that's being used over at carcosa.net. That
> file extension appears to currently only be used by some obscure GPS mapping
> file [1], so that shouldn't be a problem. I can't figure out why their
> "index.gml" file uses a different file extension though. Is this trying to
> follow some existing convention? Otherwise, I'm learning toward "index.gmi".

If I'm using index.gml instead of index.gmi somewhere, it's a typo or a
thinko.

The situation with HTTP and HTML is that the name of the index file is
not specified in any standard, and is up to the server. In Apache it's
configurable, and it's common to support the first one found of
index.html, index.htm, index.php, and probably even index.txt.

I would expect the situation to be the same in gemini; there's no strict
protocol reason that we even have to have index files at all, but I
think most of us are used to them and would prefer them. It might be a
convention for server authors to follow that you serve the first of
index.gemini, index.gmi, and .gemini. And possibly index.txt or
index.md. 

-- 
Jason McBrayer      | ?Strange is the night where black stars rise,
jmcbray at carcosa.net | and strange moons circle through the skies,
                    | but stranger still is lost Carcosa.?
                    | ? Robert W. Chambers,The King in Yellow

From tomasino@lavabit.com  Fri Aug 23 13:29:32 2019
From: tomasino@lavabit.com (James Tomasino)
Date: Fri, 23 Aug 2019 12:29:32 +0000
Subject: Default index files
In-Reply-To: <87a7c0ay38.fsf@cassilda.carcosa.net>
References: <38640569.96406.1566167877850@ichabod.co-bxl>
 <e27c642b-a34c-3c1a-bfcd-b2649f4f1925@sideburns.eu>
 <05e3f6de-2d23-4c08-e380-27cfc8065e50@lavabit.com>
 <20190821211835.GB13961@brevard.conman.org>
 <5ba154ce-80e5-db84-1510-46acf8035706@lavabit.com>
 <CAFTy05aBdMECR3+_TUXZXeBpx01D87z2i3dU58cH6XArytPEjQ@mail.gmail.com>
 <87a7c0ay38.fsf@cassilda.carcosa.net>
Message-ID: <0adfb2ad-eefc-e0db-0668-53c4a75bf4b1@lavabit.com>

On 8/23/19 12:02 PM, Jason McBrayer wrote:
> It might be a
> convention for server authors to follow that you serve the first of
> index.gemini, index.gmi, and .gemini. And possibly index.txt or
> index.md. 

I fully support conventions from the start. It seems there was quite a
wide diversion of naming right from the start. Having it as a commonly
configurable choice in the servers is very helpful as well. That avoids
the porting issues.

Thanks for all the feedback. This is a very productive list.


From lazar.michael22@gmail.com  Fri Aug 23 17:17:14 2019
From: lazar.michael22@gmail.com (Michael Lazar)
Date: Fri, 23 Aug 2019 12:17:14 -0400
Subject: Default index files
In-Reply-To: <87a7c0ay38.fsf@cassilda.carcosa.net>
References: <38640569.96406.1566167877850@ichabod.co-bxl>
 <e27c642b-a34c-3c1a-bfcd-b2649f4f1925@sideburns.eu>
 <05e3f6de-2d23-4c08-e380-27cfc8065e50@lavabit.com>
 <20190821211835.GB13961@brevard.conman.org>
 <5ba154ce-80e5-db84-1510-46acf8035706@lavabit.com>
 <CAFTy05aBdMECR3+_TUXZXeBpx01D87z2i3dU58cH6XArytPEjQ@mail.gmail.com>
 <87a7c0ay38.fsf@cassilda.carcosa.net>
Message-ID: <CAFTy05Ywrvak_Z7mcv3uojWHZ-kLkGM3g4XLEL60Xkx_D5K1Tw@mail.gmail.com>

On Fri, Aug 23, 2019 at 8:03 AM Jason McBrayer <jmcbray at carcosa.net> wrote:
> Michael Lazar writes:
> > I like the ".gmi" file extension that's being used over at carcosa.net. That
> > file extension appears to currently only be used by some obscure GPS mapping
> > file [1], so that shouldn't be a problem. I can't figure out why their
> > "index.gml" file uses a different file extension though. Is this trying to
> > follow some existing convention? Otherwise, I'm learning toward "index.gmi".
>
> If I'm using index.gml instead of index.gmi somewhere, it's a typo or a
> thinko.

FYI, here's where I got this from: gemini://carcosa.net/germinal

"Serves index.gml as a directory listing, if it exists"

From tomasino@lavabit.com  Fri Aug 23 22:50:53 2019
From: tomasino@lavabit.com (James Tomasino)
Date: Fri, 23 Aug 2019 21:50:53 +0000
Subject: Gemini over tor
In-Reply-To: <CAFTy05Ywrvak_Z7mcv3uojWHZ-kLkGM3g4XLEL60Xkx_D5K1Tw@mail.gmail.com>
References: <38640569.96406.1566167877850@ichabod.co-bxl>
 <e27c642b-a34c-3c1a-bfcd-b2649f4f1925@sideburns.eu>
 <05e3f6de-2d23-4c08-e380-27cfc8065e50@lavabit.com>
 <20190821211835.GB13961@brevard.conman.org>
 <5ba154ce-80e5-db84-1510-46acf8035706@lavabit.com>
 <CAFTy05aBdMECR3+_TUXZXeBpx01D87z2i3dU58cH6XArytPEjQ@mail.gmail.com>
 <87a7c0ay38.fsf@cassilda.carcosa.net>
 <CAFTy05Ywrvak_Z7mcv3uojWHZ-kLkGM3g4XLEL60Xkx_D5K1Tw@mail.gmail.com>
Message-ID: <07002470-948d-34c5-4c47-11119899e21d@lavabit.com>

I set up Gemini on https://tilde.black for all users tonight. We're
running Jetforce there (and I wrote a openbsd rcctl wrapper if anyone
needs one). One of the first questions I got from the community was
whether it would work over tor. I had no idea so I added a hidden
service and tried it:

HiddenServicePort 1965 127.0.0.1:1965

The results can be seen here:

https://ttm.sh/gP.png

Tor doesn't work, but a direct connection does. I admit to not groking
TLS, but I suspect it's related to this. Tor uses its own certs to
verify the connection, but Gemini will want to use its own. I have no
idea if the protocols are compatible. If it's possible, I'd like to
implement it on ~black, but I defer to the smarter people on this list.


From jmcbray@carcosa.net  Sat Aug 24 14:39:04 2019
From: jmcbray@carcosa.net (Jason McBrayer)
Date: Sat, 24 Aug 2019 09:39:04 -0400
Subject: Gemini over tor
In-Reply-To: <07002470-948d-34c5-4c47-11119899e21d@lavabit.com>
References: <38640569.96406.1566167877850@ichabod.co-bxl>
 <e27c642b-a34c-3c1a-bfcd-b2649f4f1925@sideburns.eu>
 <05e3f6de-2d23-4c08-e380-27cfc8065e50@lavabit.com>
 <20190821211835.GB13961@brevard.conman.org>
 <5ba154ce-80e5-db84-1510-46acf8035706@lavabit.com>
 <CAFTy05aBdMECR3+_TUXZXeBpx01D87z2i3dU58cH6XArytPEjQ@mail.gmail.com>
 <87a7c0ay38.fsf@cassilda.carcosa.net>
 <CAFTy05Ywrvak_Z7mcv3uojWHZ-kLkGM3g4XLEL60Xkx_D5K1Tw@mail.gmail.com>
 <07002470-948d-34c5-4c47-11119899e21d@lavabit.com>
Message-ID: <875zmmbs3u.fsf@cassilda.carcosa.net>

James Tomasino writes:

> Tor doesn't work, but a direct connection does. I admit to not groking
> TLS, but I suspect it's related to this. Tor uses its own certs to
> verify the connection, but Gemini will want to use its own. I have no
> idea if the protocols are compatible.

I do not know much about Tor hidden services, but I don't think it's
related to TLS; HTTPS tunnels over Tor without having its certificates
messed up, and we're not doing anything different from HTTPS at that
level.  Probably it's something in the hidden service setup?

-- 
Jason McBrayer      | ?Strange is the night where black stars rise,
jmcbray at carcosa.net | and strange moons circle through the skies,
                    | but stranger still is lost Carcosa.?
                    | ? Robert W. Chambers,The King in Yellow

From lazar.michael22@gmail.com  Sun Aug 25 03:47:59 2019
From: lazar.michael22@gmail.com (Michael Lazar)
Date: Sat, 24 Aug 2019 22:47:59 -0400
Subject: Questions on INPUT behavior
Message-ID: <CAFTy05Ym5QbQq5dcRS6bVQhD8Av4Z3bnghnejQ_oDk3BJEuZKA@mail.gmail.com>

Hi all. I'm looking into implementing a few endpoints on my server that accept
user input, and I ended up with a few ambiguities about the gemini specification
that I would like to discuss:

```
The requested resource accepts a line of textual user input.
The <META> line is a prompt which should be displayed to the
user.  The same resource should then be requested again with
the user's input included as a query component.  Queries are
included in requests as per the usual generic URL definition
in RFC3986, i.e. separated from the path by a ?.  There is no
response body.
```

Here are my questions:

1. Should the query component be formatted as a "key=value" parameter?
   Or should it be added directly as the entire query component?

   A. "gemini://hostname.com/input?q=AbrahamLincoln"
   vs.
   B. "gemini://hostname.com/input?AbrahamLincoln"

2. Should the query component allow percent-sign escaping?
   If so, which characters should be escaped?

   A. "gemini://hostname.com/input?Hello%20world"
   vs.
   B. "gemini://hostname.com/input?Hello world"

3. Should a server be allowed to link to a URL with the user input pre-filled?
   E.g. Should this link, if placed in a text/gemini file, mean the same thing
   as the user manually typing in "Hello World"?

   A. "=>/input?Hello%20world"

   This also brings up a point that the above link would be impossible to
   define in a text/gemini file if percent-escaped spaces were not allowed.

4. If my server has an endpoint that does not request user input, can I
   re-purpose the query section for my own needs?

   A. "gemini://hostname.com/items?page=2&limit=20"

5. In the above example, what happens if a request to that URL returns a status
   code of 10? Should the client strip the existing query components from the
   URL, or append a new key=value pair to the end?

6. What widget should the client use to display the input prompt? A single line
   input, or a multi-line text box? Should newline characters even be allowed?

7. Should there be a maximum input length? Currently it is implicitly defined
   as 1024 bytes minus the length of the URL.

Personally, I have mixed feelings about gemini enabling user input in the first
place. I know that gopher supports it using the "7" item type, but I have only
seen a couple of compelling use cases for this in the wild. On the other hand,
it opens up a Pandora's box of complexity by allowing creative developers to
port over many features from HTTP.

I can already envision XSS style attacks. For example, say a gemini page
requests user input that will be rendered in a public text/gemini page like a
guestbook. The bad-actor submits a message that contains something like:

    "\n=>http://malicious.url\thttp://innocent.url".

Servers will need to be diligent in sanitizing their inputs, which kind of sucks
for what should be a simple protocol.

- mozz

From sean@conman.org  Sun Aug 25 04:37:27 2019
From: sean@conman.org (Sean Conner)
Date: Sat, 24 Aug 2019 23:37:27 -0400
Subject: Questions on INPUT behavior
In-Reply-To: <CAFTy05Ym5QbQq5dcRS6bVQhD8Av4Z3bnghnejQ_oDk3BJEuZKA@mail.gmail.com>
References: <CAFTy05Ym5QbQq5dcRS6bVQhD8Av4Z3bnghnejQ_oDk3BJEuZKA@mail.gmail.com>
Message-ID: <20190825033727.GC1955@brevard.conman.org>

It was thus said that the Great Michael Lazar once stated:
> Hi all. I'm looking into implementing a few endpoints on my server that accept
> user input, and I ended up with a few ambiguities about the gemini specification
> that I would like to discuss:
> 
> ```
> The requested resource accepts a line of textual user input.
> The <META> line is a prompt which should be displayed to the
> user.  The same resource should then be requested again with
> the user's input included as a query component.  Queries are
> included in requests as per the usual generic URL definition
> in RFC3986, i.e. separated from the path by a ?.  There is no
> response body.
> ```

  I think that should read "there is no request body"---the response can
include content, dependent upon the status code.

> Here are my questions:
> 
> 1. Should the query component be formatted as a "key=value" parameter?
>    Or should it be added directly as the entire query component?
> 
>    A. "gemini://hostname.com/input?q=AbrahamLincoln"
>    vs.
>    B. "gemini://hostname.com/input?AbrahamLincoln"

  B, unless there's a way to designate the variable name (which I did
suggest to solderpunk---perhaps I should float it here).

> 2. Should the query component allow percent-sign escaping?
>    If so, which characters should be escaped?
> 
>    A. "gemini://hostname.com/input?Hello%20world"
>    vs.
>    B. "gemini://hostname.com/input?Hello world"

  The following characters in the query should be escaped:

	SPACE # % < > [ \ ] ^ { | } "

and unless you are sending name/value pairs, 

	= &

should also be escaped (this per RFC-3986).

> 3. Should a server be allowed to link to a URL with the user input pre-filled?
>    E.g. Should this link, if placed in a text/gemini file, mean the same thing
>    as the user manually typing in "Hello World"?
> 
>    A. "=>/input?Hello%20world"

  I don't see why not.

	gemini://gemini.conman.org/cgi?Hello%20World

(this link works, by the way---although it's just a sample CGI script)

> 4. If my server has an endpoint that does not request user input, can I
>    re-purpose the query section for my own needs?
> 
>    A. "gemini://hostname.com/items?page=2&limit=20"

  Again, I don't see why not.  The query string is part of a URL, and
clients send URLs so this should be an issue client side.  What the server
side does with the query is up to the server.

> 5. In the above example, what happens if a request to that URL returns a status
>    code of 10? Should the client strip the existing query components from the
>    URL, or append a new key=value pair to the end?

  That's a good question and one I do not have an answer to.

> 6. What widget should the client use to display the input prompt? A single line
>    input, or a multi-line text box? Should newline characters even be allowed?

  It would depend upon the client.  I think the expectation is a single line
input, but I can see a multi-line box being useful as well.  

> 7. Should there be a maximum input length? Currently it is implicitly defined
>    as 1024 bytes minus the length of the URL.
> 
> Personally, I have mixed feelings about gemini enabling user input in the first
> place. I know that gopher supports it using the "7" item type, but I have only
> seen a couple of compelling use cases for this in the wild. On the other hand,
> it opens up a Pandora's box of complexity by allowing creative developers to
> port over many features from HTTP.

  True, and I've moved quite a few of my web-based projects to both Gemini
[1] and Gopher.

> I can already envision XSS style attacks. For example, say a gemini page
> requests user input that will be rendered in a public text/gemini page like a
> guestbook. The bad-actor submits a message that contains something like:
> 
>     "\n=>http://malicious.url\thttp://innocent.url".
> 
> Servers will need to be diligent in sanitizing their inputs, which kind of sucks
> for what should be a simple protocol.

  Experiement---point your favorite terminal based gopher client here:

	gopher://verisimilitudes.net/02019-08-18.ecma-48&utf-8	or
	gopher://verisimilitudes.net/02019-08-18.ecma-48%26utf-8

  This page directly embeds ECMA-48 escape sequences (aka ANSI escape codes)
in the text---what does your favorite terminal based gopher client do?  Does
it send the raw codes directly to the terminai?  Does it filter them out
entirely?  Does it show them? [2]

  Also, there's nothing that says a server *has* to support user input.

  -spc (

[1]	I even created a CGI interface to my Gemini server, and it can even
	translate HTTP status codes to Gemini ones.

[2]	My own gopher client (not yet published) does filter out escape
	sequences and not because of this page---it was a deliberate design
	choice I made when writing after doing a very deep dive into ECMA-48
	in the past year or two.

From solderpunk@SDF.ORG  Mon Aug 26 18:18:47 2019
From: solderpunk@SDF.ORG (solderpunk)
Date: Mon, 26 Aug 2019 17:18:47 +0000
Subject: Alive
Message-ID: <20190826171847.GA12090@SDF.ORG>

Hey Gemininauts!

Just wanted to apologise for my recent lack of responsiveness on this
board.  I've just been quite caught up with work lately, but rest
assured I'm still reading things.  I *hope* to start responses flowing
again this week, but at latest things should definitely be back to
normal *next* week.

Cheers,
Solderpunk

From solderpunk@SDF.ORG  Mon Aug 26 18:35:19 2019
From: solderpunk@SDF.ORG (solderpunk)
Date: Mon, 26 Aug 2019 17:35:19 +0000
Subject: Questions on INPUT behavior
In-Reply-To: <20190825033727.GC1955@brevard.conman.org>
References: <CAFTy05Ym5QbQq5dcRS6bVQhD8Av4Z3bnghnejQ_oDk3BJEuZKA@mail.gmail.com>
 <20190825033727.GC1955@brevard.conman.org>
Message-ID: <20190826173519.GB12090@SDF.ORG>

>   I think that should read "there is no request body"---the response can
> include content, dependent upon the status code.

Once the user *submits* their input, the response to *that* request can
of course have any status code and a possible response body, but in that
part of the spec (maybe it's unclear and needs changing) I'm talking
about the response with code 10, which I shouldn't have a body, as it's
just delivering a prompt and the information that this resource wants an
input.

> >    A. "gemini://hostname.com/input?q=AbrahamLincoln"
> >    vs.
> >    B. "gemini://hostname.com/input?AbrahamLincoln"
> 
>   B, unless there's a way to designate the variable name (which I did
> suggest to solderpunk---perhaps I should float it here).

What I had in mind, and what I think most implementations do so far, is
indeed B.  It's possible I coud be convinced otherwise, but I don't
really see the value in speccing a fixed variable named like `q`.  It's
perfectly cromulent according to the URL RFC to use treat the query as a
string.  The key=value pair syntax is common in the web world mostly as
a way to make HTML forms work, and we don't have forms.

I *did* consider a 1x status code whose <META> was some kind of
machine-readable description of a form, but that doesn't degrade nicely
in simple clients which ignore the second status digit, as then the
human user has to imagine the form in their head and type a suitable
response.

>   The following characters in the query should be escaped:
> 
> 	SPACE # % < > [ \ ] ^ { | } "
> 
> and unless you are sending name/value pairs, 
> 
> 	= &
> 
> should also be escaped (this per RFC-3986).

Yes, this is right.  Remember, Gemini requests are URLs, and we don't
make the rules for URLs, we (hopefully!) follow them.

> >    A. "=>/input?Hello%20world"
> 
>   I don't see why not.
> 
> 	gemini://gemini.conman.org/cgi?Hello%20World
> 

I don't see why not either.

> >    A. "gemini://hostname.com/items?page=2&limit=20"
> 
>   Again, I don't see why not.  The query string is part of a URL, and
> clients send URLs so this should be an issue client side.  What the server
> side does with the query is up to the server.

Agreed.

> > 5. In the above example, what happens if a request to that URL returns a status
> >    code of 10? Should the client strip the existing query components from the
> >    URL, or append a new key=value pair to the end?

Hmm.  If a client requests the URL above, it should include the query
string in the request.  So why would the server respond with a status 10
in that case?  I mean, it's currently not prohibited in the spec for a
server to do that, so this is a fair question.  I'm not sure whether we
*should* forbid it or spec some sensible client response.  Did you have
a use case in mind or are you just keeping an eye out for edge cases?
 
> > 6. What widget should the client use to display the input prompt? A single line
> >    input, or a multi-line text box? Should newline characters even be allowed?
> 
>   It would depend upon the client.  I think the expectation is a single line
> input, but I can see a multi-line box being useful as well.  

Good question, I think I agree with Sean above but I'll think on this...

> > 7. Should there be a maximum input length? Currently it is implicitly defined
> >    as 1024 bytes minus the length of the URL.

Hmm,  Do we think it's useful/worthwhile to spec a shorter explicit
limit?  I guess this is hard to answer without canonical applications of
user input being established...

Answers to all the stuff about inputs, XSS, etc. in the future...thanks
for the good questions!

- Solderpunk


From jmcbray@carcosa.net  Tue Aug 27 16:34:10 2019
From: jmcbray@carcosa.net (Jason McBrayer)
Date: Tue, 27 Aug 2019 11:34:10 -0400
Subject: Questions on INPUT behavior
In-Reply-To: <20190826173519.GB12090@SDF.ORG>
References: <CAFTy05Ym5QbQq5dcRS6bVQhD8Av4Z3bnghnejQ_oDk3BJEuZKA@mail.gmail.com>
 <20190825033727.GC1955@brevard.conman.org> <20190826173519.GB12090@SDF.ORG>
Message-ID: <87zhju62rx.fsf@cassilda.carcosa.net>

solderpunk writes:
>> > 5. In the above example, what happens if a request to that URL
>> > returns a status code of 10? Should the client strip the existing
>> > query components from the URL, or append a new key=value pair to
>> > the end?
>
> Hmm. If a client requests the URL above, it should include the query
> string in the request. So why would the server respond with a status
> 10 in that case? I mean, it's currently not prohibited in the spec for
> a server to do that, so this is a fair question. I'm not sure whether
> we *should* forbid it or spec some sensible client response. Did you
> have a use case in mind or are you just keeping an eye out for edge
> cases?

I can imagine a client asking successive questions in response to
answers. But I'm not sure what the client should do. We might want to
specify that Gemini URLs should not contain query parts except in
requests initiated by 1x responses. Or that the query part should never
be significant in a published URL; that it should be a pre-filled
suggestion that can be modified by the client.

--
Jason McBrayer      | ?Strange is the night where black stars rise,
jmcbray at carcosa.net | and strange moons circle through the skies,
                    | but stranger still is lost Carcosa.?
                    | ? Robert W. Chambers,The King in Yellow

From sean@conman.org  Tue Aug 27 17:03:35 2019
From: sean@conman.org (Sean Conner)
Date: Tue, 27 Aug 2019 12:03:35 -0400
Subject: Questions on INPUT behavior
In-Reply-To: <87zhju62rx.fsf@cassilda.carcosa.net>
References: <CAFTy05Ym5QbQq5dcRS6bVQhD8Av4Z3bnghnejQ_oDk3BJEuZKA@mail.gmail.com>
 <20190825033727.GC1955@brevard.conman.org> <20190826173519.GB12090@SDF.ORG>
 <87zhju62rx.fsf@cassilda.carcosa.net>
Message-ID: <20190827160335.GA24210@brevard.conman.org>

It was thus said that the Great Jason McBrayer once stated:
> We might want to specify that Gemini URLs should not contain query parts
> except in requests initiated by 1x responses.

  What if I want to bookmark some search results?

> Or that the query part should never be significant in a published URL;

  See above.

> that it should be a pre-filled suggestion that can be modified by the
> client.

  One interesting aspect of Apache is that a generated index page accepts a
query string to sort the output.  "C=N" sorts by name; "C=S" sorts by size
(then by name); "O=A" sorts ascending; "O=D" sorts decending.  I would hate
to lose the ability to do that (not that I use it now).

  Again, a server doesn't have to support that, but it could.

  -spc (Or am I being evil for trying to bring too much of the web into
	Gemini?)

From jmcbray@carcosa.net  Wed Aug 28 02:20:38 2019
From: jmcbray@carcosa.net (Jason McBrayer)
Date: Tue, 27 Aug 2019 21:20:38 -0400
Subject: Questions on INPUT behavior
In-Reply-To: <20190827160335.GA24210@brevard.conman.org>
References: <CAFTy05Ym5QbQq5dcRS6bVQhD8Av4Z3bnghnejQ_oDk3BJEuZKA@mail.gmail.com>
 <20190825033727.GC1955@brevard.conman.org> <20190826173519.GB12090@SDF.ORG>
 <87zhju62rx.fsf@cassilda.carcosa.net>
 <20190827160335.GA24210@brevard.conman.org>
Message-ID: <87k1aykrvd.fsf@camilla.carcosa.net>


Sean Conner writes:
>   -spc (Or am I being evil for trying to bring too much of the web into
> 	Gemini?)

No, bookmarking search results is a valid use-case.

Maybe servers should not be allowed to return a 1x response to a request
with a query string?

-- 
+----------------------------------------------------------------------+
| Jason F. McBrayer                                jmcbray at carcosa.net |
| The scalloped tatters of the King in Yellow must hide Yhtill forever.|

From sean@conman.org  Wed Aug 28 05:22:11 2019
From: sean@conman.org (Sean Conner)
Date: Wed, 28 Aug 2019 00:22:11 -0400
Subject: Questions on INPUT behavior
In-Reply-To: <87k1aykrvd.fsf@camilla.carcosa.net>
References: <CAFTy05Ym5QbQq5dcRS6bVQhD8Av4Z3bnghnejQ_oDk3BJEuZKA@mail.gmail.com>
 <20190825033727.GC1955@brevard.conman.org> <20190826173519.GB12090@SDF.ORG>
 <87zhju62rx.fsf@cassilda.carcosa.net>
 <20190827160335.GA24210@brevard.conman.org>
 <87k1aykrvd.fsf@camilla.carcosa.net>
Message-ID: <20190828042211.GA16025@brevard.conman.org>

It was thus said that the Great Jason McBrayer once stated:
> 
> Sean Conner writes:
> >   -spc (Or am I being evil for trying to bring too much of the web into
> > 	Gemini?)
> 
> No, bookmarking search results is a valid use-case.
> 
> Maybe servers should not be allowed to return a 1x response to a request
> with a query string?

=> gemini://gemini.conman.org/hilo/	A Simple Guessing Game

  -spc




From lazar.michael22@gmail.com  Wed Aug 28 16:24:51 2019
From: lazar.michael22@gmail.com (Michael Lazar)
Date: Wed, 28 Aug 2019 11:24:51 -0400
Subject: Questions on INPUT behavior
In-Reply-To: <87zhju62rx.fsf@cassilda.carcosa.net>
References: <CAFTy05Ym5QbQq5dcRS6bVQhD8Av4Z3bnghnejQ_oDk3BJEuZKA@mail.gmail.com>
 <20190825033727.GC1955@brevard.conman.org> <20190826173519.GB12090@SDF.ORG>
 <87zhju62rx.fsf@cassilda.carcosa.net>
Message-ID: <CAFTy05ZqmiDXZs4DDoWrTxRudNGocprUWgh5srb2QKkLTCw30A@mail.gmail.com>

Jason McBrayer wrote:
> solderpunk writes:
> >> > 5. In the above example, what happens if a request to that URL
> >> > returns a status code of 10? Should the client strip the existing
> >> > query components from the URL, or append a new key=value pair to
> >> > the end?
> >
> > Hmm. If a client requests the URL above, it should include the query
> > string in the request. So why would the server respond with a status
> > 10 in that case? I mean, it's currently not prohibited in the spec for
> > a server to do that, so this is a fair question. I'm not sure whether
> > we *should* forbid it or spec some sensible client response. Did you
> > have a use case in mind or are you just keeping an eye out for edge
> > cases?
>
> I can imagine a client asking successive questions in response to
> answers. But I'm not sure what the client should do. We might want to
> specify that Gemini URLs should not contain query parts except in
> requests initiated by 1x responses. Or that the query part should never
> be significant in a published URL; that it should be a pre-filled
> suggestion that can be modified by the client.

Here's the example that I was thinking about when I wrote this question. I have
a gopher site that acts as a search engine for drink recipes [1]. Users can
filter their search results based on predefined tags, or they can search by
keyword using a gopher menu "7" query.

After adding some search filters, your path might look like this*:

    gopher://mozz.us:7003/1/search?tag=37&tag=5&image=1

And then if you submit a search to that path, it will append the "q=" param to
the existing filters:

    gopher://mozz.us:7003/1/search?tag=37&tag=5&image=1&q=irish

I'm trying to think of how I could re-implement this type of application in
gemini. And I can't really come up with a good solution if we assume that user
input clears the current query params.

This is admittedly a fringe case and I haven't seen anybody else do this type
of advanced search filtering in gopher. But it's fairly common to use query
params like this in HTTP when designing REST-like endpoints. For example, I
might have a link at the top of my search results that sets
"?limit=20" to control
how many items are returned. I would want the user to be able to submit a new
search string while preserving their previous choice for the limit.

*side note: Many gopher clients can't load this URL directly because they
incorrectly treat everything after the "?" as a search query, or they strip it
off completely (I'm looking at you, lynx!) [2].

[1] gopher://mozz.us:7003/1/search
[2] https://www.w3.org/Addressing/URL/4_1_Gopher+.html

- mozz

From sean@conman.org  Wed Aug 28 16:59:20 2019
From: sean@conman.org (Sean Conner)
Date: Wed, 28 Aug 2019 11:59:20 -0400
Subject: Questions on INPUT behavior
In-Reply-To: <CAFTy05ZqmiDXZs4DDoWrTxRudNGocprUWgh5srb2QKkLTCw30A@mail.gmail.com>
References: <CAFTy05Ym5QbQq5dcRS6bVQhD8Av4Z3bnghnejQ_oDk3BJEuZKA@mail.gmail.com>
 <20190825033727.GC1955@brevard.conman.org> <20190826173519.GB12090@SDF.ORG>
 <87zhju62rx.fsf@cassilda.carcosa.net>
 <CAFTy05ZqmiDXZs4DDoWrTxRudNGocprUWgh5srb2QKkLTCw30A@mail.gmail.com>
Message-ID: <20190828155920.GA5574@brevard.conman.org>

It was thus said that the Great Michael Lazar once stated:
> 
> Here's the example that I was thinking about when I wrote this question. I have
> a gopher site that acts as a search engine for drink recipes [1]. Users can
> filter their search results based on predefined tags, or they can search by
> keyword using a gopher menu "7" query.
> 
> After adding some search filters, your path might look like this*:
> 
>     gopher://mozz.us:7003/1/search?tag=37&tag=5&image=1

  Wait a second ... I thought gopher URLs don't support the query type. 
It's not mentioned at all in RFC-4266 (and there are no updates as far as I
can see).

> And then if you submit a search to that path, it will append the "q=" param to
> the existing filters:
> 
>     gopher://mozz.us:7003/1/search?tag=37&tag=5&image=1&q=irish
> 
> I'm trying to think of how I could re-implement this type of application in
> gemini. And I can't really come up with a good solution if we assume that user
> input clears the current query params.

  Add on to the path component?  I did a very short version of that for my
guessing game:

	gemini://gemini.conman.org/hilo/

  -spc

From lazar.michael22@gmail.com  Wed Aug 28 17:35:34 2019
From: lazar.michael22@gmail.com (Michael Lazar)
Date: Wed, 28 Aug 2019 12:35:34 -0400
Subject: Questions on INPUT behavior
In-Reply-To: <20190828155920.GA5574@brevard.conman.org>
References: <CAFTy05Ym5QbQq5dcRS6bVQhD8Av4Z3bnghnejQ_oDk3BJEuZKA@mail.gmail.com>
 <20190825033727.GC1955@brevard.conman.org> <20190826173519.GB12090@SDF.ORG>
 <87zhju62rx.fsf@cassilda.carcosa.net>
 <CAFTy05ZqmiDXZs4DDoWrTxRudNGocprUWgh5srb2QKkLTCw30A@mail.gmail.com>
 <20190828155920.GA5574@brevard.conman.org>
Message-ID: <CAFTy05Ykne_nZWyAk6uM_Q+7uo=iBqwLkunqWORd-w-1YZU7HA@mail.gmail.com>

On Wed, Aug 28, 2019 at 11:59 AM Sean Conner <sean at conman.org> wrote:
>   Wait a second ... I thought gopher URLs don't support the query type.
> It's not mentioned at all in RFC-4266 (and there are no updates as far as I
> can see).

>From RFC-4266:

   <selector> is the Gopher selector string.  In the Gopher protocol,
   Gopher selector strings are a sequence of octets that may contain any
   octets except 09 hexadecimal (US-ASCII HT or tab), 0A hexadecimal
   (US-ASCII character LF), and 0D (US-ASCII character CR).

Aside for those 3 reserved octets, you can stick anything you want in the
selector part of the URL. Query string don't have any special meaning to
gopher, they're just additional bytes in the selector that get sent to the
server.

>> And then if you submit a search to that path, it will append the "q=" param to
>> the existing filters:
>>
>>     gopher://mozz.us:7003/1/search?tag=37&tag=5&image=1&q=irish
>>
>> I'm trying to think of how I could re-implement this type of application in
>> gemini. And I can't really come up with a good solution if we assume that user
>> input clears the current query params.
>
>  Add on to the path component?  I did a very short version of that for my
> guessing game:

This would lead to a bunch of different paths that point to the same resource:

    /search/tag_37/tag_5/image_1/
    /search/tag_5/tag_37/image_1/
    /search/image_1/tag_5/tag_37/
    ...

Of course, I could write my server to be able to understand and parse these
path components. But it throws the whole "path as a hierarchy" paradigm out
the window. I can only assume that this issue is why query param key-value
pairs were invented in the first place.

- mozz

From julien@sideburns.eu  Wed Aug 28 17:47:31 2019
From: julien@sideburns.eu (julienXX)
Date: Wed, 28 Aug 2019 18:47:31 +0200
Subject: Questions on INPUT behavior
In-Reply-To: <20190828155920.GA5574@brevard.conman.org>
References: <CAFTy05Ym5QbQq5dcRS6bVQhD8Av4Z3bnghnejQ_oDk3BJEuZKA@mail.gmail.com>
 <20190825033727.GC1955@brevard.conman.org> <20190826173519.GB12090@SDF.ORG>
 <87zhju62rx.fsf@cassilda.carcosa.net>
 <CAFTy05ZqmiDXZs4DDoWrTxRudNGocprUWgh5srb2QKkLTCw30A@mail.gmail.com>
 <20190828155920.GA5574@brevard.conman.org>
Message-ID: <fb1a6742-b9ff-58d6-5c65-01b8efddb853@sideburns.eu>

> ?? [..]? I did a very short version of that for my
> guessing game:
>
> ????gemini://gemini.conman.org/hilo/
>
> ?? -spc
>
I can't get your guessing game working in either Asuka or AV-98. When 
issuing requests
like gemini://gemini.conman.org/hilo/1058?query=32 I still get back a 
status 10 code with
the "Guess..." prompt. Is it supposed to be working?
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.orbitalfox.eu/archives/gemini/attachments/20190828/06287878/attachment.htm>

From sean@conman.org  Wed Aug 28 18:16:27 2019
From: sean@conman.org (Sean Conner)
Date: Wed, 28 Aug 2019 13:16:27 -0400
Subject: Questions on INPUT behavior
In-Reply-To: <CAFTy05Ykne_nZWyAk6uM_Q+7uo=iBqwLkunqWORd-w-1YZU7HA@mail.gmail.com>
References: <CAFTy05Ym5QbQq5dcRS6bVQhD8Av4Z3bnghnejQ_oDk3BJEuZKA@mail.gmail.com>
 <20190825033727.GC1955@brevard.conman.org> <20190826173519.GB12090@SDF.ORG>
 <87zhju62rx.fsf@cassilda.carcosa.net>
 <CAFTy05ZqmiDXZs4DDoWrTxRudNGocprUWgh5srb2QKkLTCw30A@mail.gmail.com>
 <20190828155920.GA5574@brevard.conman.org>
 <CAFTy05Ykne_nZWyAk6uM_Q+7uo=iBqwLkunqWORd-w-1YZU7HA@mail.gmail.com>
Message-ID: <20190828171622.GB5574@brevard.conman.org>

It was thus said that the Great Michael Lazar once stated:
> On Wed, Aug 28, 2019 at 11:59 AM Sean Conner <sean at conman.org> wrote:
> >   Wait a second ... I thought gopher URLs don't support the query type.
> > It's not mentioned at all in RFC-4266 (and there are no updates as far as I
> > can see).
> 
> >From RFC-4266:
> 
>    <selector> is the Gopher selector string.  In the Gopher protocol,
>    Gopher selector strings are a sequence of octets that may contain any
>    octets except 09 hexadecimal (US-ASCII HT or tab), 0A hexadecimal
>    (US-ASCII character LF), and 0D (US-ASCII character CR).
> 
> Aside for those 3 reserved octets, you can stick anything you want in the
> selector part of the URL. Query string don't have any special meaning to
> gopher, they're just additional bytes in the selector that get sent to the
> server.

  I did try your site with my gopher client and it worked fine.  I'm just
not used to seeing query strings with gopher URLs.

> >  Add on to the path component?  I did a very short version of that for my
> > guessing game:
> 
> This would lead to a bunch of different paths that point to the same resource:
> 
>     /search/tag_37/tag_5/image_1/
>     /search/tag_5/tag_37/image_1/
>     /search/image_1/tag_5/tag_37/
>     ...

  Unless you maintain then in some canonical ordering (say, tags in sort
order, then images in sort order, etc.).  Might be more problem than it's
worth, but it is a solution.

  The path of a URL has nothing to do with a filesystem---it's just a
convention.  The link gemini://gemini.conman.org/qotd is not a file, nor a
directory.  Nor is gemini://gemini.conman.org/bible/ a directory (or a file
for that matter).  

> Of course, I could write my server to be able to understand and parse these
> path components. But it throws the whole "path as a hierarchy" paradigm out
> the window. I can only assume that this issue is why query param key-value
> pairs were invented in the first place.

  The path is an abstract reference to a resource.  It's only hierarchial in
your mind.  There is no spoon.

  -spc

From sean@conman.org  Wed Aug 28 18:23:15 2019
From: sean@conman.org (Sean Conner)
Date: Wed, 28 Aug 2019 13:23:15 -0400
Subject: Questions on INPUT behavior
In-Reply-To: <fb1a6742-b9ff-58d6-5c65-01b8efddb853@sideburns.eu>
References: <CAFTy05Ym5QbQq5dcRS6bVQhD8Av4Z3bnghnejQ_oDk3BJEuZKA@mail.gmail.com>
 <20190825033727.GC1955@brevard.conman.org> <20190826173519.GB12090@SDF.ORG>
 <87zhju62rx.fsf@cassilda.carcosa.net>
 <CAFTy05ZqmiDXZs4DDoWrTxRudNGocprUWgh5srb2QKkLTCw30A@mail.gmail.com>
 <20190828155920.GA5574@brevard.conman.org>
 <fb1a6742-b9ff-58d6-5c65-01b8efddb853@sideburns.eu>
Message-ID: <20190828172311.GC5574@brevard.conman.org>

It was thus said that the Great julienXX once stated:
> >?? [..]? I did a very short version of that for my
> >guessing game:
> >
> >????gemini://gemini.conman.org/hilo/
> >
> >?? -spc
> >
> I can't get your guessing game working in either Asuka or AV-98. When 
> issuing requests
> like gemini://gemini.conman.org/hilo/1058?query=32 I still get back a 
> status 10 code with
> the "Guess..." prompt. Is it supposed to be working?

  I think this is the reqeust your client (not that you wrote the client,
but it's the one you are using) is sending:

	gemini://gemini.conman.org/hilo/1058?query=32

  There's nothing in the spec that says the name is "query".  It should be

	gemini://gemini.conman.org/hilo/1058?32

  Or at least, that's what I'm expecting.  I'm thinking this part of the
spec needs a bit of clarification.

  -spc


From lazar.michael22@gmail.com  Wed Aug 28 19:16:16 2019
From: lazar.michael22@gmail.com (Michael Lazar)
Date: Wed, 28 Aug 2019 14:16:16 -0400
Subject: Questions on INPUT behavior
In-Reply-To: <20190828171622.GB5574@brevard.conman.org>
References: <CAFTy05Ym5QbQq5dcRS6bVQhD8Av4Z3bnghnejQ_oDk3BJEuZKA@mail.gmail.com>
 <20190825033727.GC1955@brevard.conman.org> <20190826173519.GB12090@SDF.ORG>
 <87zhju62rx.fsf@cassilda.carcosa.net>
 <CAFTy05ZqmiDXZs4DDoWrTxRudNGocprUWgh5srb2QKkLTCw30A@mail.gmail.com>
 <20190828155920.GA5574@brevard.conman.org>
 <CAFTy05Ykne_nZWyAk6uM_Q+7uo=iBqwLkunqWORd-w-1YZU7HA@mail.gmail.com>
 <20190828171622.GB5574@brevard.conman.org>
Message-ID: <CAFTy05ZHzdv6qE1qW_2gb-EbVpL8c4FCZw7XdQhfFN6kPFhGKQ@mail.gmail.com>

On Wed, Aug 28, 2019 at 1:16 PM Sean Conner <sean at conman.org> wrote:
> > Of course, I could write my server to be able to understand and parse these
> > path components. But it throws the whole "path as a hierarchy" paradigm out
> > the window. I can only assume that this issue is why query param key-value
> > pairs were invented in the first place.
>
>   The path is an abstract reference to a resource.  It's only hierarchial in
> your mind.  There is no spoon.
>
>   -spc

I used to think that way too, but then my gemini proxy got pwned by your torture
test :-) Then I discovered that I had to deal with splitting path components,
concatenating relative paths, resolving dot-segments, and a bunch of
other hierarchical
junk that I didn't consider before and am probably still getting wrong now.

All hail the spoon

- mozz

From sean@conman.org  Wed Aug 28 19:57:14 2019
From: sean@conman.org (Sean Conner)
Date: Wed, 28 Aug 2019 14:57:14 -0400
Subject: Questions on INPUT behavior
In-Reply-To: <CAFTy05ZHzdv6qE1qW_2gb-EbVpL8c4FCZw7XdQhfFN6kPFhGKQ@mail.gmail.com>
References: <CAFTy05Ym5QbQq5dcRS6bVQhD8Av4Z3bnghnejQ_oDk3BJEuZKA@mail.gmail.com>
 <20190825033727.GC1955@brevard.conman.org> <20190826173519.GB12090@SDF.ORG>
 <87zhju62rx.fsf@cassilda.carcosa.net>
 <CAFTy05ZqmiDXZs4DDoWrTxRudNGocprUWgh5srb2QKkLTCw30A@mail.gmail.com>
 <20190828155920.GA5574@brevard.conman.org>
 <CAFTy05Ykne_nZWyAk6uM_Q+7uo=iBqwLkunqWORd-w-1YZU7HA@mail.gmail.com>
 <20190828171622.GB5574@brevard.conman.org>
 <CAFTy05ZHzdv6qE1qW_2gb-EbVpL8c4FCZw7XdQhfFN6kPFhGKQ@mail.gmail.com>
Message-ID: <20190828185714.GD5574@brevard.conman.org>

It was thus said that the Great Michael Lazar once stated:
> On Wed, Aug 28, 2019 at 1:16 PM Sean Conner <sean at conman.org> wrote:
> > > Of course, I could write my server to be able to understand and parse these
> > > path components. But it throws the whole "path as a hierarchy" paradigm out
> > > the window. I can only assume that this issue is why query param key-value
> > > pairs were invented in the first place.
> >
> >   The path is an abstract reference to a resource.  It's only hierarchial in
> > your mind.  There is no spoon.
> >
> >   -spc
> 
> I used to think that way too, but then my gemini proxy got pwned by your torture
> test :-) 

  Heh.  Sorry about that.

> Then I discovered that I had to deal with splitting path components,
> concatenating relative paths, resolving dot-segments, and a bunch of other
> hierarchical junk that I didn't consider before and am probably still
> getting wrong now.

  Well, the resolving dot-segments algorithm is mentioned in RFC-3986,
section 5.2.4, and the URL merging algorithm is section 5.2.2.  Implement
those (and there are test cases in the RFC) and you should be okay.

> All hail the spoon

  -spc (Spoooooooooooooooooooooon!)


From julien@sideburns.eu  Thu Aug 29 08:57:21 2019
From: julien@sideburns.eu (julienXX)
Date: Thu, 29 Aug 2019 09:57:21 +0200
Subject: Questions on INPUT behavior
In-Reply-To: <20190828172311.GC5574@brevard.conman.org>
References: <CAFTy05Ym5QbQq5dcRS6bVQhD8Av4Z3bnghnejQ_oDk3BJEuZKA@mail.gmail.com>
 <20190825033727.GC1955@brevard.conman.org> <20190826173519.GB12090@SDF.ORG>
 <87zhju62rx.fsf@cassilda.carcosa.net>
 <CAFTy05ZqmiDXZs4DDoWrTxRudNGocprUWgh5srb2QKkLTCw30A@mail.gmail.com>
 <20190828155920.GA5574@brevard.conman.org>
 <fb1a6742-b9ff-58d6-5c65-01b8efddb853@sideburns.eu>
 <20190828172311.GC5574@brevard.conman.org>
Message-ID: <e6de5335-0049-b579-e42e-6d12b0d0214b@sideburns.eu>


>    I think this is the reqeust your client (not that you wrote the client,
> but it's the one you are using) is sending:
>
> 	gemini://gemini.conman.org/hilo/1058?query=32
>
>    There's nothing in the spec that says the name is "query".  It should be
>
> 	gemini://gemini.conman.org/hilo/1058?32
>
>    Or at least, that's what I'm expecting.  I'm thinking this part of the
> spec needs a bit of clarification.
>
>    -spc
>
>
Oh my bad, I did not remember I had this keyword in my code.


From solderpunk@SDF.ORG  Sun Sep  1 10:02:25 2019
From: solderpunk@SDF.ORG (solderpunk)
Date: Sun, 1 Sep 2019 09:02:25 +0000
Subject: Default index files
In-Reply-To: <0adfb2ad-eefc-e0db-0668-53c4a75bf4b1@lavabit.com>
References: <38640569.96406.1566167877850@ichabod.co-bxl>
 <e27c642b-a34c-3c1a-bfcd-b2649f4f1925@sideburns.eu>
 <05e3f6de-2d23-4c08-e380-27cfc8065e50@lavabit.com>
 <20190821211835.GB13961@brevard.conman.org>
 <5ba154ce-80e5-db84-1510-46acf8035706@lavabit.com>
 <CAFTy05aBdMECR3+_TUXZXeBpx01D87z2i3dU58cH6XArytPEjQ@mail.gmail.com>
 <87a7c0ay38.fsf@cassilda.carcosa.net>
 <0adfb2ad-eefc-e0db-0668-53c4a75bf4b1@lavabit.com>
Message-ID: <20190901090225.GB14657@SDF.ORG>

On Fri, Aug 23, 2019 at 12:29:32PM +0000, James Tomasino wrote:
> 
> I fully support conventions from the start. It seems there was quite a
> wide diversion of naming right from the start. Having it as a commonly
> configurable choice in the servers is very helpful as well. That avoids
> the porting issues.
> 
> Thanks for all the feedback. This is a very productive list.
> 

Somebody suggested to me (and I forget exactly who, sorry), that in
addition to the formal spec document it might be a good idea to have a
separate document of "Gemini Best Practices" which are "only"
recommendations or conventions, as opposed to strict requirements, but
still relatively important to maintaining a smoothly functioning
ecosystem.  This seems like a good idea, and clarifying these filename
conventions seems like an obvious thing to do there.  I'll try to
produce such a list soon!

-Solderpunk


From solderpunk@SDF.ORG  Sun Sep  1 12:04:51 2019
From: solderpunk@SDF.ORG (solderpunk)
Date: Sun, 1 Sep 2019 11:04:51 +0000
Subject: Text reflow woes (or: I want bullets back!)y
In-Reply-To: <20190819181906.GF28055@SDF.ORG>
References: <962619280.54375.1566058199182@ichabod.co-bxl>
 <87v9uvy58k.fsf@camilla.carcosa.net>
 <20190818145439.GF5354@SDF.ORG> <20190818171031.GG5354@SDF.ORG>
 <20190818213253.GE26287@brevard.conman.org>
 <20190819181906.GF28055@SDF.ORG>
Message-ID: <20190901110451.GC14657@SDF.ORG>

Okay, I'm ready to cautiously, tentatively pick this question up again.
Even while I've been away I've tried to mull this one over.

One particular thought I've seized upon is this: the *only* good reason
to add the complexity of defining any kind of markup syntax is so that
clients can wrap Gemini content at arbitrary widths without breaking all
the very nice and useful and valuable formatting abilities which
text/plain already provides with Zen-like simplicity.  If nobody ever
tried to wrap text to new widths, people could *just write* Markdown
(whatever Markdown means to them) and it would work and look nice, and
fancier clients could optionally render some parts of it in visually
appealing ways.  Basically, text wrapping/reflowing is the complicating
factor here.  Text wrapping will break nice formatting of lists and
tables and things absent some markup for identifying lists and tables
and things, and detailed rules on how to render those items to arbitrary
width.

The *only* reason that wrapping/reflowing is such a hot topic is the
combination of the two facts:

i)  Most people producing Gopher content format it for 70 or 80 columns,
    following various presciptions of Ancient Lore (NB: there are some
    interesting exceptions, e.g. trnslts at rawtext.club offers all their
    content in the user's choice of 40, 72 or 120 chars!).
ii) More and more people consuming Gopher content are doing it on
    phones, tablets and other newfangled devices which can't display 70
    or 80 columns neatly so that things look weird.

(At least, I assume this is the reason there's so much demand for this.
If anybody thinks this is wrong, I'd love to hear it)

Point ii) above is not going to change any time soon, in fact it's only
going to become increasingly common as time goes on, whether the
retrogrouches amongst us like it or not.  But point i) is just an
arbitrary convention and so entirely mutable.

This raises the question: is there a number of characters at which
text/gemini content could be, by convention, wrapped by the author such
that it displays nicely on a majority of mobile devices whilst not
looking ridiculous on real displays?

At
gopher://zaibatsu.circumlunar.space:70/0/~solderpunk/files/text-wrapping-experiment.txt
I have some text wrapped at 70, 60, 50, 40, 30 and finally 35 columns.
Using Pocket Gopher on my phone, I can read text wrapped at 70 columns
no worries if I hold the phone in landscape orientation.  In portrait I
need 35, which admittedly doesn't look quite right on my laptop screen.
But I think my phone screen is atypically small, and I wonder if maybe
40 would be workable for a lot of people?  Feedback from actual device
users very welcome...

-Solderpunk


From jmcbray@carcosa.net  Sun Sep  1 13:08:11 2019
From: jmcbray@carcosa.net (Jason McBrayer)
Date: Sun, 01 Sep 2019 08:08:11 -0400
Subject: Fwd: Re: Text reflow woes (or: I want bullets back!)y
References: <962619280.54375.1566058199182@ichabod.co-bxl>
 <87v9uvy58k.fsf@camilla.carcosa.net> <20190818145439.GF5354@SDF.ORG>
 <20190818171031.GG5354@SDF.ORG> <20190818213253.GE26287@brevard.conman.org>
 <20190819181906.GF28055@SDF.ORG> <20190901110451.GC14657@SDF.ORG>
Message-ID: <87zhjo2p90.fsf@cassilda.carcosa.net>


solderpunk writes:
> This raises the question: is there a number of characters at which
> text/gemini content could be, by convention, wrapped by the author
> such that it displays nicely on a majority of mobile devices whilst
> not looking ridiculous on real displays?

I answered on the fediverse, but my kind-of-average phone, with
DiggieDog, will show 80 in landscape or 50 in portrait.

I'm not sure the only reason wrapping is an issue is mobile devices; I
would like to see good but simple typography be the expectation on
Gemini (heavier than plain text, lighter than HTML). But I fully admit
that this raises the implementation complexity, and my own graphical
client experiment has not yet got to the point where I am trying to
render markdown.

--
Jason McBrayer      | ?Strange is the night where black stars rise,
jmcbray at carcosa.net | and strange moons circle through the skies,
                    | but stranger still is lost Carcosa.?
                    | ? Robert W. Chambers,The King in Yellow

From solderpunk@SDF.ORG  Sun Sep  1 13:43:51 2019
From: solderpunk@SDF.ORG (solderpunk)
Date: Sun, 1 Sep 2019 12:43:51 +0000
Subject: Fwd: Re: Text reflow woes (or: I want bullets back!)y
In-Reply-To: <87zhjo2p90.fsf@cassilda.carcosa.net>
References: <962619280.54375.1566058199182@ichabod.co-bxl>
 <87v9uvy58k.fsf@camilla.carcosa.net>
 <20190818145439.GF5354@SDF.ORG> <20190818171031.GG5354@SDF.ORG>
 <20190818213253.GE26287@brevard.conman.org>
 <20190819181906.GF28055@SDF.ORG> <20190901110451.GC14657@SDF.ORG>
 <87zhjo2p90.fsf@cassilda.carcosa.net>
Message-ID: <20190901124351.GD14657@SDF.ORG>

> I answered on the fediverse, but my kind-of-average phone, with
> DiggieDog, will show 80 in landscape or 50 in portrait.

Thanks for the data point!

> I'm not sure the only reason wrapping is an issue is mobile devices; I
> would like to see good but simple typography be the expectation on
> Gemini (heavier than plain text, lighter than HTML).

Could you elaborate a little on what you mean by "simple typography" and
how it relates to wrapping/flowing in particular?  I understand you'd
like things like section headings in a larger, perhaps bolder font, and
the ability to bold/italicise words, etc., but unless I'm missing
something (very possible!) this is all unrelated to wrapping?

-Solderpunk
 

From jmcbray@carcosa.net  Mon Sep  2 13:20:24 2019
From: jmcbray@carcosa.net (Jason McBrayer)
Date: Mon, 02 Sep 2019 08:20:24 -0400
Subject: Fwd: Re: Fwd: Re: Text reflow woes (or: I want bullets back!)y
References: <962619280.54375.1566058199182@ichabod.co-bxl>
 <87v9uvy58k.fsf@camilla.carcosa.net> <20190818145439.GF5354@SDF.ORG>
 <20190818171031.GG5354@SDF.ORG> <20190818213253.GE26287@brevard.conman.org>
 <20190819181906.GF28055@SDF.ORG> <20190901110451.GC14657@SDF.ORG>
 <87zhjo2p90.fsf@cassilda.carcosa.net> <20190901124351.GD14657@SDF.ORG>
Message-ID: <87v9ua3n5j.fsf@cassilda.carcosa.net>


solderpunk writes:

> Could you elaborate a little on what you mean by "simple typography"
> and how it relates to wrapping/flowing in particular? I understand
> you'd like things like section headings in a larger, perhaps bolder
> font, and the ability to bold/italicise words, etc., but unless I'm
> missing something (very possible!) this is all unrelated to wrapping?

They are only loosely related, in that 80 columns of monospace text,
while fully serviceable in a text terminal, is not good typography on a
screen that's capable of displaying something more similar to a printed
page.

But separating these issues: maybe we should just specify Gemini maps as
max 70 columns of monospaced, unflowed text. If people want better
typography, they can send text/markdown.

My apologies for any roughness in my writing today; I've got a pretty
bad cold.

--
Jason McBrayer      | ?Strange is the night where black stars rise,
jmcbray at carcosa.net | and strange moons circle through the skies,
                    | but stranger still is lost Carcosa.?
                    | ? Robert W. Chambers,The King in Yellow

From tomasino@lavabit.com  Mon Sep  2 13:46:41 2019
From: tomasino@lavabit.com (James Tomasino)
Date: Mon, 02 Sep 2019 12:46:41 +0000
Subject: Fwd: Re: Fwd: Re: Text reflow woes (or: I want bullets back!)y
In-Reply-To: <87v9ua3n5j.fsf@cassilda.carcosa.net>
References: <962619280.54375.1566058199182@ichabod.co-bxl>
 <87v9uvy58k.fsf@camilla.carcosa.net> <20190818145439.GF5354@SDF.ORG>
 <20190818171031.GG5354@SDF.ORG> <20190818213253.GE26287@brevard.conman.org>
 <20190819181906.GF28055@SDF.ORG> <20190901110451.GC14657@SDF.ORG>
 <87zhjo2p90.fsf@cassilda.carcosa.net> <20190901124351.GD14657@SDF.ORG>
 <87v9ua3n5j.fsf@cassilda.carcosa.net>
Message-ID: <65CA7818-F893-4905-8199-8A152D3B702B@lavabit.com>

On September 2, 2019 12:20:24 PM UTC, Jason McBrayer <jmcbray at carcosa.net> wrote:
>But separating these issues: maybe we should just specify Gemini maps
>as
>max 70 columns of monospaced, unflowed text. If people want better
>typography, they can send text/markdown.

If we assume that mime-types other than text/gemini are rendered according to their own rules (eg, markdown) then the issue of wrapping is left to text/gemini and any types that don't have inherent rules (eg, text/plain). I think we have just a few choices:

1. Display as-is authored.
2. Wrap everything
3. Wrap only long lines (need to decide on arbitrary width)
4. Define markup to be explicit about wrapping vs. fixed.

#1 is the easiest to implement but leaves the same problem as gopher, and it's likely that some client authors will go rogue and implement #2 or #3 anyway. #4 adds complexity and opens a door for more and more markup.

What it we look at combination mime-types, though? What if we allowed something to be defined as a Gemini map & in markdown, or asciidoc, etc? Parsing mine types to indicate "this is a Gemini file" first gives you links, and if the secondary type is known to the client can give you formatting. It can fall back on "display as-is" for unknown types.

Now this doesn't necessarily solve text/plain if folks are determined to wrap it, but I think it makes Gemini map files more flexible over time without adding burden to the spec directly. 


From lazar.michael22@gmail.com  Thu Sep  5 03:13:22 2019
From: lazar.michael22@gmail.com (Michael Lazar)
Date: Wed, 4 Sep 2019 22:13:22 -0400
Subject: Text reflow woes (or: I want bullets back!)y
In-Reply-To: <20190901110451.GC14657@SDF.ORG>
References: <962619280.54375.1566058199182@ichabod.co-bxl>
 <87v9uvy58k.fsf@camilla.carcosa.net>
 <20190818145439.GF5354@SDF.ORG> <20190818171031.GG5354@SDF.ORG>
 <20190818213253.GE26287@brevard.conman.org> <20190819181906.GF28055@SDF.ORG>
 <20190901110451.GC14657@SDF.ORG>
Message-ID: <CAFTy05ZgLdWWsisZzDRN-EwBMi2QMb3xs0MD6_VSkQwtoR6PwA@mail.gmail.com>

On Sun, Sep 1, 2019 at 7:05 AM solderpunk <solderpunk at sdf.org> wrote:
> Point ii) above is not going to change any time soon, in fact it's only
> going to become increasingly common as time goes on, whether the
> retrogrouches amongst us like it or not.  But point i) is just an
> arbitrary convention and so entirely mutable.
>
> This raises the question: is there a number of characters at which
> text/gemini content could be, by convention, wrapped by the author such
> that it displays nicely on a majority of mobile devices whilst not
> looking ridiculous on real displays?

I think this is a valid idea that is worth seriously considering. I actually
went through the same train of thought about a week ago, but I held back from
posting because wasn't entirely sure how I felt about it, and I'm
simultaneously working on a proposal for a simplified markdown dialect for
gemini [1].

I have a iPhone 10 XR and use the iOS gopher client by Charles Childers. My
font size can fit 96 characters wide and 44 characters narrow. I could probably
read a slightly smaller font, but I have trouble clicking on the links with my
fat fingers.

Limiting the width below 70 characters is largely unexplored territory. This is
the type of constraint that could inspire people to get creative in their page
design (in a good way). Gemini pages might end up evolving their own distinct
identity that distinguishes them from other text platforms. It could also open
the door to experimenting with terminal client UI, for example displaying
multiple pages side-by-side.

Sources say that everything from 45 to 75 characters wide is satisfactory for
text readability [2]. I would probably aim for 45-50 to comfortably fit most
smart phones for most people.

Perhaps the largest downside of using a fixed width format is that you lose
accessibility. People with reduced vision might want/need to use a larger font
than average. With re-flowed text this is easy because the text will wrap to
fit their screen. Also, I've heard that screen readers work poorly with hard
line wraps, although I can't find a citation for that.

[1] gemini://mozz.us/markdown/
[2] http://webtypography.net/2.1.2

From solderpunk@SDF.ORG  Thu Sep  5 19:28:15 2019
From: solderpunk@SDF.ORG (solderpunk)
Date: Thu, 5 Sep 2019 18:28:15 +0000
Subject: Text reflow woes (or: I want bullets back!)y
In-Reply-To: <CAFTy05ZgLdWWsisZzDRN-EwBMi2QMb3xs0MD6_VSkQwtoR6PwA@mail.gmail.com>
References: <962619280.54375.1566058199182@ichabod.co-bxl>
 <87v9uvy58k.fsf@camilla.carcosa.net>
 <20190818145439.GF5354@SDF.ORG> <20190818171031.GG5354@SDF.ORG>
 <20190818213253.GE26287@brevard.conman.org>
 <20190819181906.GF28055@SDF.ORG> <20190901110451.GC14657@SDF.ORG>
 <CAFTy05ZgLdWWsisZzDRN-EwBMi2QMb3xs0MD6_VSkQwtoR6PwA@mail.gmail.com>
Message-ID: <20190905182815.GA26903@SDF.ORG>

> I think this is a valid idea that is worth seriously considering. I actually
> went through the same train of thought about a week ago, but I held back from
> posting because wasn't entirely sure how I felt about it, and I'm
> simultaneously working on a proposal for a simplified markdown dialect for
> gemini [1].

I've also wondered about something along these lines.  It's an
intriguing idea.  Some ill-defined and possibly semi-irrational fear
tickles in the back of my head that it *sounds* like a simple and
harmless thing to allow, but could in practice be opening some can of
ambiguity worms that will come back to bite us.
 
> I have a iPhone 10 XR and use the iOS gopher client by Charles Childers. My
> font size can fit 96 characters wide and 44 characters narrow. I could probably
> read a slightly smaller font, but I have trouble clicking on the links with my
> fat fingers.

Thanks for this data point!  I've gotten a few responses on Mastodon to
my query as to what width various people can read on their phones.
Almost everybody has said they can read 50 characters comfortably in
portrait mode.  One person reported 50 in one client, 46 in another.  It
seems like 45 columns would work for the majority of people.  I'm going
to format the rest of this email wrapped at 45 columns to help us all
get a feel for that size.

> Limiting the width below 70 characters is largely unexplored territory. This is
> the type of constraint that could inspire people to get creative in their page
> design (in a good way). Gemini pages might end up evolving their own distinct
> identity that distinguishes them from other text platforms. It could also open
> the door to experimenting with terminal client UI, for example displaying
> multiple pages side-by-side.

I agree that there's a certain amount of
excitement associated the unexplored
possibilities associated with a new format.
Not only would a convention of wrapping
Gemini content at 45 chars effectively remove
the need to add enough markdup to the spec to
facilitate near reflow, it could, like you
say, give the medium a distinctie look and
feel and encourage interesting new
developments like multi-column layouts.

My biggest concern at this point is that link
labels could easily exceed 45 chars and then
clients need to come up with a nice way to
wrap them...

> Perhaps the largest downside of using a fixed width format is that you lose
> accessibility. People with reduced vision might want/need to use a larger font
> than average. With re-flowed text this is easy because the text will wrap to
> fit their screen. Also, I've heard that screen readers work poorly with hard
> line wraps, although I can't find a citation for that.

This is a bit of a concern.  I noticed that
dgold recently removed all ASCII art from
their phlog for accessibility reasons - see
gopher://ascraeus.org/0/phlog/030.txt.

-Solderpunk

From sean@conman.org  Thu Sep  5 19:55:41 2019
From: sean@conman.org (Sean Conner)
Date: Thu, 5 Sep 2019 14:55:41 -0400
Subject: CGI suport for Gemini
Message-ID: <20190905185541.GA28270@brevard.conman.org>


  I see that mozz.us has added CGI support for Gemini, which makes two
servers [1] (as far as I can see), so I think it's time to go into a bit of
details about how I adapted RFC-3875 for Gemini.  I should note that I don't
expect Gemini servers to support this---I only did it because I could.

  First, a bit about the specification. This is just a light overview of the
CGI specification and readers are encouraged to read RFC-3875 for the full
details.  It's a way to generate content for a server using an external
process and was originally meant for the web.  The spec itself is fairly
agnostic to HTTP though, which means it's pretty easy to adapt to Gemini.

  The output from a script contains a header portion, followed by a blank
line, followed by the body.  The headers defined by RFC-3875 are:

	Content-Type:	mandatory, contains MIME type
	Location:	optional, contains absolute URL to new location
	Status:		optional, contains status code and text phrase

  Other headers can be included but it's up to the CGI handler to deal with
those (section 6.3.4 and 6.3.5).  Unlike email or HTTP hheaders, any headers
output from a CGI script MUST be one-per-line, which simplifies processing. 
If the Status: header isn't present, it defaults to '200 OK' (but more on
this with respect to Gemini below).

  The input to a CGI program comes from environment variables.  The
following headers are defined:

	AUTH_TYPE		authentication type, see below for discussion
	CONTENT_LENGTH		length of incoming body
	CONETNT_TYPE		media-type of incoming body
	GATEWAY_INTERFACE	MUST be "CGI/1.1"
	PATH_INFO		see below for discussion
	PATH_TRANSLATED		see below for discussion
	QUERY_STRING		MUST exist; if no query given, defaults to ""
	REMOTE_ADDR		MUST exist
	REMOTE_HOST		SHOULD exist; MAY be REMOTE_ADDR
	REMOTE_IDENT		MAY exist, see RFC-1413 for info
	REMOTE_USER		see below for discussion
	REQUEST_METHOD		MUST exist
	SCRIPT_NAME		MUST exist, path to script
	SERVER_NAME		MUST exist
	SERVER_PORT		MUST exist
	SERVER_PROTOCOL		MUST exist
	SERVER_SOFTWARE		MUST exist

  There may also exist protocol specific headers (for the web, these would
be "HTTP_..." and for Gemini they should be "GEMINI_...") but these are
implementation defined; there are none defined in the RFC.  Other
environment variables may also exist, depending upon the operating system or
configuration and again are beyond the scope of the RFC.

  Per section 4.4, if the query string does NOT contain an unencoded '='
character, then the query should be broken up into words, splitting on an
unencoded '+' character and passed to the CGI program as command line
parameters; otherwise, if there is an unencoded '=' character, treat the
query string a a list of name/value pairs, and DO NOT pass the query string
as command line parameters. [2]

  Now for the Gemini-specific parts.  Some of this only applies to my server
implemeation and is marked as such; other bits should probably apply to
other implementations to ensure a consistent approach to CGI programs under
Gemini.

  My server receives a request and parses it.  The path portion is then
checked against a redirection list (temporary, permanent, gone [4]), then
against a handler list [3].  Only after passing through that processing is
the file system checked.  As the processing proceeds down the filesystem, if
a file is marked as executable (the server is Unix), then the server assumes
it's a CGI program.  The following environment variables are set:

	GATEWAY_INTERFACE	"CGI/1.1"
	QUERY_STRING		the raw query string per the request, or ""
	REMOTE_ADDR		IP address of client
	REMOTE_HOST		IP address of client
	REQUEST_METHOD		"" (see discussion)
	SCRIPT_NAME		URL path to script
	SERVER_NAME		host of server
	SERVER_PORT		port of server
	SERVER_PROTOCOL		"GEMINI"
	SERVER_SOFTWARE		"GLV-1.12556/1"
	REMOTE_IDENT		not set
	CONTENT_TYPE		not set
	CONTENT_LENGTH		not set

  I don't support RFC-1413, so I don't bother setting REMOTE_IDENT.  There's
no body, so I don't bother setting CONTENT_TYPE or CONTENT_LENGTH.  And
after some thought, I decided to go with "" for REQUEST_METHOD.  Gemini
doesn't have the concept of requests with respect to HTTP.  I mean, I suppoe
"GET" *could* apply, but I didn't want to give the impression that Gemini
would offer other methods, so to signal intent, I went with an empty string,
given that REQUEST_METHOD is mandatory.  I only set PATH_INFO and
PATH_TRANSLATED in certain circumstances---when the path continues on past
the CGI program in the request.  For example:

	/test/cgi		PATH_INFO/PATH_TRANSLATED NOT set
	/test/cgi/foo/bar	PATH_INFO/PATH_TRANSLATED set

  Given the second exxample, they would be set as:

	PATH_INFO	"/foo/bar"
	PATH_TRANSLATED	"/home/spc/projects/gemini/root/foo/bar"

(see RFC-3875 for more details).

  Since I also run my own website using Apache, you can configure the CGI
script to get Apache style environment variables, and if enabled, the
following will be set:

	DOCUMENT_ROOT		top level directory of Gemini content
	CONTEXT_DOCUMENT_ROOT	same as DOCUMENT_ROOT
	CONTEXT_PREFIX		""
	SCRIPT_FILENAME		actual path to script on filesystem

  And because of that, I added support to run web-based CGI scripts and if
configured (http mode), the following environment variables are also
included (or changed):

	REQUEST_METHOD		"GET"
	SERVER_PROTOCOL		"HTTP/1.0"
	HTTP_ACCEPT		"*/*"
	HTTP_CONNECTION		"close"
	HTTP_HOST		SERVER_NAME
	HTTP_REFERER		""
	HTTP_USER_AGENT		""

  I hardcoded the last two in case web-based CGI scripts rely upon those
variables being set.  I'll get to how I handle the output below [7].

  I set AUTH_INFO and REMOTE_USER only if a client certificate is provided
AND the configuration enables TLS environment variables to be set (this is
specific to my server):

	AUTH_TYPE	"Certificate"
	REMOTE_USER	The comman name subfield from the client certificate
			subject field.

  If TLS environment variables are enabled, then I also add the following
environment variables:

	TLS_CIPHER
	TLS_VERSION
	TLS_CLIENT_HASH
	TLS_CLIENT_ISSUER
	TLS_CLIENT_ISSUER_*	(each subfield of the client issuer)
	TLS_CLIENT_SUBJECT
	TLS_CLIENT_SUBJECT_*	(each subfield of the client subject)
	TLS_CLIENT_NOT_BEFORE
	TLS_CLIENT_NOT_AFTER
	TLS_CLIENT_REMAIN	TLS_CLIENT_NOT_AFTER - TLS_CLIENT_NOT_BEFORE

  Also, if Apache style environment variables are configured, instead of the
above TLS_* environment variables, the following Apache environment
variables are set:

	SSL_CHIPER
	SSL_PROTOCOL
	SSL_CLIENT_I_DN
	SSL_CLIENT_I_DN_*	(each subfield of the client issuer)
	SSL_CLIENT_S_DN
	SSL_CLIENT_S_DN_*	(each subfield of the client subject)
	SSL_CLIENT_V_START
	SSL_CLIENT_V_END
	SSL_CLIENT_V_REMAIN	SSL_CLIENT_V_END - SSL_CLIENT_V_START

  Once the variables are set, the program is executed, the output collected
and the response is generated.  The CGI module will automatically detect
three digit status codes and translate appropriately (in order, first match
used):

	HTTP status	Gemini status
	---------	--------
	200-299		20
	301		31
	300-399		30
	403		60
	404		51
	405		59
	400-499		50
	500-599		40
	000-999		50

  If a Gemini reponse of 20 is seen, then the Content-Type is used; if a
Gemini response of 30-39 is seen, then Location: is used, otherwise the text
portion of the status resply is used; any body for a status other than 20 is
accepted but ignored (I specifically ignored 410---I don't have any scripts
that return this status, and I can't see this status being returned by a CGI
script, but it can be easily added).

  A lot of this was done by also running multiple tests under Apache with a
CGI script to see what is and isn't set per environment variables.  And I'm
not saying that all Gemini CGI modules need to support, say, the Apache
environment variables or the HTTP specific variables.  Again, a lot of this
was done just because I could and to also push the limits of what could be
run with my CGI module.

  Anyway, that's it for this.  I think it's enough.

  -spc

[1]	The other being gemini://gemini.conman.org/

[2]	This requirement pushed me over the edge into doing a rewrite of my
	URL parsing code [6].

[3]	On second thought, I think I should reverse that ordering.

[4]	Handlers are references to non-files.  Examples on my server are the
	Hi-Lo guessing game, The King James Bible, the Quote of the Day and
	technically, the gRFC and torture test [5].

[5]	These are technically files, but there is some additional processing
	going on.  For the gRFC, they are parsed for date, current status
	and title.  For the torture test, they contain response code and
	MIME types.

[6]	https://github.com/spc476/LPeg-Parsers/blob/e6e321995c512b9076dba452569521cb4cb90cdf/url.lua

[7]	Now that I think about it, I should probably set:

		CONTENT_TYPE	text/plain
		CONTENT_LENGTH	0

	just to be safe.

From sean@conman.org  Thu Sep  5 20:04:11 2019
From: sean@conman.org (Sean Conner)
Date: Thu, 5 Sep 2019 15:04:11 -0400
Subject: Text reflow woes (or: I want bullets back!)y
In-Reply-To: <20190905182815.GA26903@SDF.ORG>
References: <962619280.54375.1566058199182@ichabod.co-bxl>
 <87v9uvy58k.fsf@camilla.carcosa.net> <20190818145439.GF5354@SDF.ORG>
 <20190818171031.GG5354@SDF.ORG> <20190818213253.GE26287@brevard.conman.org>
 <20190819181906.GF28055@SDF.ORG> <20190901110451.GC14657@SDF.ORG>
 <CAFTy05ZgLdWWsisZzDRN-EwBMi2QMb3xs0MD6_VSkQwtoR6PwA@mail.gmail.com>
 <20190905182815.GA26903@SDF.ORG>
Message-ID: <20190905190411.GB28270@brevard.conman.org>

> 
> I agree that there's a certain amount of
> excitement associated the unexplored
> possibilities associated with a new format.
> Not only would a convention of wrapping
> Gemini content at 45 chars effectively remove
> the need to add enough markdup to the spec to
> facilitate near reflow, it could, like you
> say, give the medium a distinctie look and
> feel and encourage interesting new
> developments like multi-column layouts.
> 
> My biggest concern at this point is that link
> labels could easily exceed 45 chars and then
> clients need to come up with a nice way to
> wrap them...

  The link format:

=> link-URL link-text

  You could state that the link-text should be 45 characters or less, and if
not given, then the link-URL should be truncated at 42 characters, with
"..." added on the end for display (if less than 42 characters, then no need
for the "..." at the end).

  In Lua, this would be:

	if #linkurl > 42 then
	  linktext = linkurl:sub(1,42) .. "..."
	end

  In a string-hostile language like C:

	char buffer[46];

	if (strlen(linkurl) > 42)
	  snprintf(buffer,sizeof(buffer),"*.*s...",42,42,linkurl);

  So I don't think it's a hard thing to do.

> > Perhaps the largest downside of using a fixed width format is that you lose
> > accessibility. People with reduced vision might want/need to use a larger font
> > than average. With re-flowed text this is easy because the text will wrap to
> > fit their screen. Also, I've heard that screen readers work poorly with hard
> > line wraps, although I can't find a citation for that.
> 
> This is a bit of a concern.  I noticed that
> dgold recently removed all ASCII art from
> their phlog for accessibility reasons - see
> gopher://ascraeus.org/0/phlog/030.txt.

  Or how about:  lines that start with '=>' are links and are handled
differently, lines starting with a ' ' are fixed (but should be
less than N characters in length), and starting with any other character
should be reflowed until a blank line, a line staring with '=>' or
whitespace.

  So this wouldn't be reflowed.
But this would
reflow because it doesn't start with a whitespace
=> example:foo link text is handled differently.

  -spc (Just some thoughts ... )


From b__m__e@mailfence.com  Thu Sep  5 22:17:31 2019
From: b__m__e@mailfence.com (Brian Evans)
Date: Thu, 5 Sep 2019 23:17:31 +0200 (CEST)
Subject: Text reflow woes (or: I want bullets back!)y
Message-ID: <1740057096.200925.1567718251195@ichabod.co-bxl>

spc writes:
>  Or how about:  lines that start with '=>' are links and are handled
> differently, lines starting with a ' ' are fixed (but should be
> less than N characters in length), and starting with any other character
> should be reflowed until a blank line, a line staring with '=>' or
> whitespace.

I agree with that proposal wholeheartedly. It creates one additional simple
parse case for fixed lines (that will not be truncated to N characters if they
go beyond). But I do not think that additional parse to implement adds
any major work or complexity to clients.

I am of the opinions that link lines _should_ wrap. My reason for this
is that many people may want to do url only links:

=> gemini://this.is.a/url/to/some/place_or_other?it-has-a-data-component-that-exceeds-the-limit-of-characters

It is reasonable to want to see the whole link before following it.

So, I am in favor of:

1. Regular text and links both wrap to n (tbd) characters
2. A leading space creates a non-wrapping line that will
   be truncated at n (tbd) characters if it exceeds that
   number of chars. Clients can optionally add an ellipses.

One thing to consider with wrapping or truncating links is that many
terminal based clients will implement links with numbers. Given that
those numbers will be based by the number of links on a page, it will
be difficult for content authors to predict what the behavior of longer
lines will be (where something might wrap or get cut) in order to make
room for interface elements such as:
=> A link
13 => A link
[13] A link
(13) A link
( 13) => A link
Any of those are reasonable and possible ways a client can represent
a link on the screen. Because how clients do this will vary, things can
get unpredictable. As such, what happens at what boundary should, I
believe, be a part of the spec. So that people can know what to expect.
They should also expect differing clients to render things mildly differently
and not rely on very long lines to always appear identically.

As a side note: I agree that accessibility is a solid concern.

--?
Sent with https://mailfence.com
Secure and private email

From tomasino@lavabit.com  Thu Sep  5 22:38:56 2019
From: tomasino@lavabit.com (James Tomasino)
Date: Thu, 5 Sep 2019 21:38:56 +0000
Subject: SPOOFED: Text reflow woes (or: I want bullets back!)y
In-Reply-To: <1740057096.200925.1567718251195@ichabod.co-bxl>
References: <1740057096.200925.1567718251195@ichabod.co-bxl>
Message-ID: <6dff3df8-4269-6b52-f056-124970a28588@lavabit.com>

On 9/5/19 9:17 PM, Brian Evans wrote:
> 1. Regular text and links both wrap to n (tbd) characters
> 2. A leading space creates a non-wrapping line that will
>    be truncated at n (tbd) characters if it exceeds that
>    number of chars. Clients can optionally add an ellipses.

I can't believe how simple that is. A leading space for fixed content is
ridiculously simple. I love it.

Regarding accessibility, it's hard without metadata, but even so at this
point we would have three distinctions:

1. Links (which could be announced as such to screen readers)
2. Regular text (which would be read as body)
3. Fixed formatting via leading space (blocks of which could be
announced to screen readers and optionally read or skipped)

That's really not too bad from an accessibility POV for such a minimal
protocol.


From lazar.michael22@gmail.com  Fri Sep  6 02:58:05 2019
From: lazar.michael22@gmail.com (Michael Lazar)
Date: Thu, 5 Sep 2019 21:58:05 -0400
Subject: Text reflow woes (or: I want bullets back!)y
In-Reply-To: <20190905190411.GB28270@brevard.conman.org>
References: <962619280.54375.1566058199182@ichabod.co-bxl>
 <87v9uvy58k.fsf@camilla.carcosa.net>
 <20190818145439.GF5354@SDF.ORG> <20190818171031.GG5354@SDF.ORG>
 <20190818213253.GE26287@brevard.conman.org> <20190819181906.GF28055@SDF.ORG>
 <20190901110451.GC14657@SDF.ORG>
 <CAFTy05ZgLdWWsisZzDRN-EwBMi2QMb3xs0MD6_VSkQwtoR6PwA@mail.gmail.com>
 <20190905182815.GA26903@SDF.ORG> <20190905190411.GB28270@brevard.conman.org>
Message-ID: <CAFTy05aXgqA4qvrd9nVyhUmxc0bKGBxGw15bNAc88oRgDNFXZw@mail.gmail.com>

On Thu, Sep 5, 2019 at 3:04 PM Sean Conner <sean at conman.org> wrote:
>   Or how about:  lines that start with '=>' are links and are handled
> differently, lines starting with a ' ' are fixed (but should be
> less than N characters in length), and starting with any other character
> should be reflowed until a blank line, a line staring with '=>' or
> whitespace.
>
>   So this wouldn't be reflowed.
> But this would
> reflow because it doesn't start with a whitespace
> => example:foo link text is handled differently.

I'm not a fan of using significant whitespace in markdown languages.
Spot the difference between these two lines. One should be fixed width and
one should be reflowed:



Beyond that, I can't help but feel that this would lead to the worst of both
worlds. If I drop down to fixed width lines (say N=70) because I want to add
a bullet list to my page, now clients must render at least 70 lines in order to
accurately view my content. So what good does having other sections of reflowed
text do for me at that point?

I do think that preformatted text blocks have their place in markdown
languages for simple things like code snippets and ASCII art. The kind of stuff
that you can cut off and it doesn't affect the readability of the page. But you
can't extend them to replace all of the page formatting. In my opinion this
needs to be an all-or-nothing decision:

1. Fixed-width text with no special syntax
2. Reflowed text with some simple flavor of markdown for styling

From b__m__e@mailfence.com  Fri Sep  6 03:52:52 2019
From: b__m__e@mailfence.com (Brian Evans)
Date: Fri, 6 Sep 2019 04:52:52 +0200 (CEST)
Subject: Text reflow woes (or: I want bullets back!)y
Message-ID: <2007686399.210773.1567738372606@ichabod.co-bxl>

Michael writes:
> In my opinion this
> needs to be an all-or-nothing decision:
>
> 1. Fixed-width text with no special syntax
> 2. Reflowed text with some simple flavor of markdown for styling

In #1 above is the idea that there would be no wrapping and any
text that went over the  width limit would be truncated?

I can see that being a bad user experience if someone's device
does not conform easily to the size that is chosen. It is also
annoying to enforce. A perfectly fine document would not be
readable because their lines go to 60 instead of 45? 

I am fine with a fixed width, but only if wrapping or reflowing
is available and declarable by the content author.

- - -

In #2 is reflowed what we are aiming for or is wrapped what we
are aiming for? Both terms have been used during the ongoing
conversation and I have lost track of which one people are
preferring and how each person defines them.

Example:

In this example I am writing a long line and
then a newline and a shorter line.


Reflow (ignores whitespace beyond single spaces):

In this example I am writing a long
line and then a newline and a
shorter line.

Wrap (recognizes whitespace and just wraps the long line):

In this example I am writing a long
line and
then a newline and a shorter line.

- - -

I am definitely still open to the idea of a simple markdown flavor,
which would potentially make some of this conversation moot. That
again ups the client complexity a good amount though so it would
have to be **very** simple.

- - -

Tomasino writes:
> I can't believe how simple that is. A leading space for fixed content is
> ridiculously simple. I love it.

Right? Nice and easy. Given that fixed content will likely be more rare
than wrapped or flowed content it seems like an elegant solution.

--?
Sent with https://mailfence.com
Secure and private email

From sean@conman.org  Fri Sep  6 06:33:48 2019
From: sean@conman.org (Sean Conner)
Date: Fri, 6 Sep 2019 01:33:48 -0400
Subject: Text reflow woes (or: I want bullets back!)y
In-Reply-To: <CAFTy05ZgLdWWsisZzDRN-EwBMi2QMb3xs0MD6_VSkQwtoR6PwA@mail.gmail.com>
References: <962619280.54375.1566058199182@ichabod.co-bxl>
 <87v9uvy58k.fsf@camilla.carcosa.net> <20190818145439.GF5354@SDF.ORG>
 <20190818171031.GG5354@SDF.ORG> <20190818213253.GE26287@brevard.conman.org>
 <20190819181906.GF28055@SDF.ORG> <20190901110451.GC14657@SDF.ORG>
 <CAFTy05ZgLdWWsisZzDRN-EwBMi2QMb3xs0MD6_VSkQwtoR6PwA@mail.gmail.com>
Message-ID: <20190906053348.GA11998@brevard.conman.org>

It was thus said that the Great Michael Lazar once stated:
> On Sun, Sep 1, 2019 at 7:05 AM solderpunk <solderpunk at sdf.org> wrote:
> > Point ii) above is not going to change any time soon, in fact it's only
> > going to become increasingly common as time goes on, whether the
> > retrogrouches amongst us like it or not.  But point i) is just an
> > arbitrary convention and so entirely mutable.
> >
> > This raises the question: is there a number of characters at which
> > text/gemini content could be, by convention, wrapped by the author such
> > that it displays nicely on a majority of mobile devices whilst not
> > looking ridiculous on real displays?
> 
> I think this is a valid idea that is worth seriously considering. I actually
> went through the same train of thought about a week ago, but I held back from
> posting because wasn't entirely sure how I felt about it, and I'm
> simultaneously working on a proposal for a simplified markdown dialect for
> gemini [1].
> 
> [1] gemini://mozz.us/markdown/

  I read through those, and it appears that you generate an AST from the
markdown-like text, then run through that AST to generate HTML.  Is there
code to generate text output, or is that just the file itself?

  -spc


From sean@conman.org  Fri Sep  6 06:39:24 2019
From: sean@conman.org (Sean Conner)
Date: Fri, 6 Sep 2019 01:39:24 -0400
Subject: Text format proposal (was Re: Text reflow woes (or: I want bullets
 back!)y)
In-Reply-To: <2007686399.210773.1567738372606@ichabod.co-bxl>
References: <2007686399.210773.1567738372606@ichabod.co-bxl>
Message-ID: <20190906053923.GB11998@brevard.conman.org>

It was thus said that the Great Brian Evans once stated:
  > 
  > Tomasino writes:
  > > I can't believe how simple that
  > > is. A leading space for fixed
  > > content is ridiculously simple. I
  > > love it.
  > 
  > Right? Nice and easy. Given that
  > fixed content will likely be more
  > rare than wrapped or flowed content
  > it seems like an elegant solution.

How about a full sample?

  -spc (This entire email fits the
	specificaion below ... )

  A Proposed Formatting Specification
        for Gemini Index files.
            by Sean Conner

The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", 
"SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and 
"OPTIONAL" in this document are to be interpreted as described in BCP 14 
[RFC2119] [RFC8174] when, and only when, they appear in all capitals, as 
shown here.

=> https://www.ietf.org/rfc/rfc2119.txt [RFC2119] BCP 14
=> https://www.ietf.org/rfc/rfc8174.txt [RFC8174] (update)

A Gemini index file, regardless of character encoding [1], shall only
consist of the space character [2], graphic characters [3] and a limited set
of control characters out of the C0 set [4]; the C1 control set [5] is
outright rejected and MUST NOT appear in a Gemini index file.

The following C0 control set characters are allowed:

  HT (character 9) Horizontal Tab. 
     Classified as "whitespace"

  LF (character 10) Line Feed.
     Classified as "end of line marker"

  CR (character 13) Carriage Return.
     Classified as "end of line marker"

  SP (character 32) Space.
     Classified as "whitespace"

Any other C0 control character MUST NOT appear in a Gemini index file. 
Characters not defined as "end of line marker" or "whitespace" is
considered, per this specification, to be a "graphical character".

The two characters LF and CR MUST appear in that order in a Gemini index
file.  It is unspecified (at this time) what should happen if a single LF or
CR is encountered.  Both characters together constitute the "end of line
marker".  It is also unspecified (at this time) what should happen if a C0
control character not listed above, or a C1 control character is encountered
in a Gemini index file.

A "line of text" is any sequence of "whitespace" and "graphical characters"
followed by an "end of line marker".

A "line of text" that starts with the character sequence => is considered a
"link line" and contains a link to another document.  The BNF [RFC5234] for
a "link line" is:

  link = mark WSP url [ WSP text ] CRLF
  mark = "=>"
  url  = %x21-7E 
              ; see [RFC3986] for syntax
  text = %x20-FF 
              ; see [RFC3629] for format
  CR   = %x0D
  LF   = %x0A
  CRLF = CR LF
  SP   = %x20
  HTAB = %x09
  WSP  = SP / HTAB

=> https://www.ietf.org/rfc/rfc5234 [RFC5234] BNF syntax
=> https://www.ietf.org/rfc/rfc3986 [RFC3986] URL syntax
=> https://www.ietf.org/rfc/rfc3629 [RFC3639] UTF-8 format

For maximum interoperability, the text portion (if present) should be at
most 40 characters in length; if longer, it is up to the client to handle it
as it sees fit.  It MAY "wrap", it SHOULD "reflow", it MAY "cut off" the text. 
If the text portion doesn't appear, then the URL MUST be displayed as the
text portion, subject to the same limitations just mentioned.

To "wrap" text, once the text has reached the right edge of the screen [6],
the text resumes at the left edge, even if it cuts a word in half.  Upon
encoutering an "end of line marker", move to the next line.  For example, to
"wrap" the following paragraphs:

"Lorem ipsum dolor sit amet, consectetur adipiscing elit.  Vestibulum mauris
leo, condimentum vitae varius at, elementum sed odio.  Sed commodo felis
lacinia blandit vestibulum.  
Duis vel sagittis massa.  Maecenas sodales dui
tristique velit luctus tincidunt a sit amet neque.  Sed vitae velit in
sapien semper accumsan.  Nulla sem odio, malesuada a viverra at, tristique
eu tortor.

"Quisque auctor porta enim, eget tincidunt augue cursus non.  Nulla at
condimentum purus.  Curabitur maximus malesuada risus, at ultrices nisl
luctus vel.  Nulla eget est luctus, dignissim urna vel, luctus felis.  Donec
facilisis malesuada porta.  Nulla elementum felis ut justo sollicitudin
pellentesque.  Vestibulum faucibus, ipsum tincidunt volutpat lacinia, turpis
libero bibendum sem, in malesuada turpis lectus et neque."

with a width of 30 characters:

  123456789012345678901234567890
  ------------------------------
  "Lorem ipsum dolor sit amet, c
  onsectetur adipiscing elit. Ve
  stibulum mauris leo, condiment
  um vitae varius at, elementum 
  sed odio. Sed commodo felis la
  cinia blandit vestibulum. 
  Duis vel sagittis massa. Maece
  nas sodales dui tristique veli
  t luctus tincidunt a sit amet 
  neque. Sed vitae velit in sapi
  en semper accumsan. Nulla sem 
  odio, malesuada a viverra at, 
  tristique eu tortor.

  "Quisque auctor porta enim, eg
  et tincidunt augue cursus non.
   Nulla at condimentum purus. C
  urabitur maximus malesuada ris
  us, at ultrices nisl luctus ve
  l. Nulla eget est luctus, dign
  issim urna vel, luctus felis. 
  Donec facilisis malesuada port
  a. Nulla elementum felis ut ju
  sto sollicitudin pellentesque.
   Vestibulum faucibus, ipsum ti
  ncidunt volutpat lacinia, turp
  is libero bibendum sem, in mal
  esuada turpis lectus et neque.
  "
To "reflow" text, lines are broken at whitespace [7], where an "end of line
marker" is placed to start the next line, and any existing "end of line
markers" are ignored unless there are two in a row.  For example, the two
example paragraphs "reflowed" at 30 characters:

  123456789012345678901234567890
  ------------------------------
  "Lorem ipsum dolor sit amet,
  consectetur adipiscing elit. 
  Vestibulum mauris leo,
  condimentum vitae varius at,
  elementum sed odio.  Sed
  commodo felis lacinia blandit
  vestibulum.  Duis vel
  sagittis massa.  Maecenas
  sodales dui tristique velit
  luctus tincidunt a sit amet
  neque.  Sed vitae velit in
  sapien semper accumsan. 
  Nulla sem odio, malesuada a
  viverra at, tristique eu
  tortor.

  "Quisque auctor porta enim,
  eget tincidunt augue cursus
  non.  Nulla at condimentum
  purus.  Curabitur maximus
  malesuada risus, at ultrices
  nisl luctus vel.  Nulla eget
  est luctus, dignissim urna
  vel, luctus felis.  Donec
  facilisis malesuada porta. 
  Nulla elementum felis ut
  justo sollicitudin
  pellentesque.  Vestibulum
  faucibus, ipsum tincidunt
  volutpat lacinia, turpis
  libero bibendum sem, in
  malesuada turpis lectus et
  neque."

If a suitable breaking point cannot be found (no whitespace or "end of line
markers" found), then the line MUST be wrapped to the next line, at which
the "reflow" algorithm is picked up again.  An example of a paragraph that
exhibits such behavior, again at 30 characters:

"Lorem ipsum dolor sit amet, consectetur adipiscing elit.  Vestibulum mauris
leo, condimentumvitaevariusat,elementum sed odio.  Sed commodo felis
lacinia blandit vestibulum.  Duis vel sagittis massa.  Maecenas sodales dui
tristique velit luctus tincidunt a sit amet neque.  Sed vitae velit in
sapien semper accumsan.  Nulla sem odio, malesuada a viverra at, tristique
eu tortor."

  123456789012345678901234567890
  ------------------------------
  "Lorem ipsum dolor sit amet,
  consectetur adipiscing elit. 
  Vestibulum mauris leo,
  condimentumvitaevariusat,eleme
  ntum sed odio.  Sed commodo
  felis lacinia blandit
  vestibulum.  Duis vel
  sagittis massa.  Maecenas
  sodales dui tristique velit
  luctus tincidunt a sit amet
  neque.  Sed vitae velit in
  sapien semper accumsan. 
  Nulla sem odio, malesuada a
  viverra at, tristique eu
  tortor."

  To "cut off", any characters past the right edge of the screen are simple
discared until the next "end of line marker":

    123456789012345678901234567890
    ------------------------------
    "Lorem ipsum dolor sit amet, c
    leo, condimentum vitae varius 
    lacinia blandit vestibulum.  
    Duis vel sagittis massa.  Maec
    tristique velit luctus tincidu
    sapien semper accumsan.  Nulla
    eu tortor.

    "Quisque auctor porta enim, eg
    condimentum purus.  Curabitur 
    luctus vel.  Nulla eget est lu
    facilisis malesuada porta.  Nu
    pellentesque.  Vestibulum fauc
    libero bibendum sem, in malesu

A "line of text" that starts with one or more "whitespace" characters,
followed by "graphical characters" is a "fixed line" and MUST NOT be
"reflowed"; it MAY be "wrapped" or it MAY be "cut off".  For maximum
interoperability, such "fixed" lines SHOULD be 40 characters or less.  The
BNF for a "fixed" line:

  fixed = 1*WSP VCHAR *text CRLF
  VCHAR = %x21-FF
               ; see [RFC3629] for format

=> https://www.ietf.org/rfc/rfc3629 [RFC3639] UTF-8 format

It is an ambiguous condition when a line consists of only whitespace
characters, and such a line SHOULD NOT appear in a Gemini index file.

A "line of text" that does not start with whitespace or the character
sequence => is subject to being "reflowed" until two consecutive "end of
line markers" are encountered.

It should be noted that this document follows the format given above, with
no fixed line longer than 40 characters and no link text longer than 40
characters.  The rest of the text can be reflowed at any given width.  This
should give a feeling for what such a document would look like.

               * * * * *

[1] An assumption is being made that any character encoding system used is
based on US-ASCII, which defines the first 128 characters.

[2] US-ASCII character 32.  It is both considered a control character as one
of the unit separation characters FS (file separator), GS (group separator),
RS (record separator) and US (unit separator) as a finer grained separator
character, and as a graphic character dispite not having a graphical
representation.  For UTF-8, this will also include the variations on white
space, such as thin spacing, zero-width spacing, etc.

[3] Any character with a visual representation, or as part of a visual
representation.

[4] Characters 0 through 31.

[5] The so-called ANSI escape codes.  See Wikipedia for more information.
=> https://en.wikipedia.org/wiki/C0_and_C1_control_codes#C1_controls C1 Set

[6] This assumes a "left-to-right" ordering of characters.  Other orderings
of rendering text is out of scope for this document.

[7] An ambitious implementation may want to break at a dash (-) or a soft
hyphen (UTF-8 character \u00AD).

From tomasino@lavabit.com  Fri Sep  6 10:00:16 2019
From: tomasino@lavabit.com (James Tomasino)
Date: Fri, 06 Sep 2019 09:00:16 +0000
Subject: Text format proposal (was Re: Text reflow woes (or: I want
 bullets back!)y)
In-Reply-To: <20190906053923.GB11998@brevard.conman.org>
References: <2007686399.210773.1567738372606@ichabod.co-bxl>
 <20190906053923.GB11998@brevard.conman.org>
Message-ID: <9EE2AD0B-5BA9-4392-99A8-502D1A4E35FA@lavabit.com>

From: Sean Conner <sean@conman.org>
The two characters LF and CR MUST appear in that order in a Gemini index
file.  It is unspecified (at this time) what should happen if a single LF or
CR is encountered.  Both characters together constitute the "end of line
marker".

------

Was there an earlier discussion on this point? That looks lifted from the gopher RFC, but is there a reason why it's applying to Gemini? It seems quite specific and arbitrary to require both these days. Did someone have a good justification already?


From sean@conman.org  Fri Sep  6 15:46:03 2019
From: sean@conman.org (Sean Conner)
Date: Fri, 6 Sep 2019 10:46:03 -0400
Subject: Text format proposal (was Re: Text reflow woes (or: I want
 bullets back!)y)
In-Reply-To: <9EE2AD0B-5BA9-4392-99A8-502D1A4E35FA@lavabit.com>
References: <2007686399.210773.1567738372606@ichabod.co-bxl>
 <20190906053923.GB11998@brevard.conman.org>
 <9EE2AD0B-5BA9-4392-99A8-502D1A4E35FA@lavabit.com>
Message-ID: <20190906144603.GC11998@brevard.conman.org>

It was thus said that the Great James Tomasino once stated:
> From: Sean Conner <sean at conman.org>
> > The two characters LF and CR MUST appear in that order in a Gemini index
> > file.  It is unspecified (at this time) what should happen if a single LF or
> > CR is encountered.  Both characters together constitute the "end of line
> > marker".
> 
> Was there an earlier discussion on this point? That looks lifted from the
> gopher RFC, but is there a reason why it's applying to Gemini? It seems
> quite specific and arbitrary to require both these days. Did someone have
> a good justification already?

  Well, the use of CRLF is mentioned several times in the Gemini spec:

=> gopher://zaibatsu.circumlunar.space/0/~solderpunk/gemini/spec-spec.txt

(specifically sections 1.2, 1.3.1 and 1.3.5.2).  It doesn't have the
language MUST, SHOULD, etc, though.  Also, CRLF is an Internet standard for
transfering text (you'll see it in many other specifications, like SMTP and
HTTP), so that's why I added that language.

  I have code (used in both my gopher and gemini clients) that can deal with
either a CRLF (Internet standard; Windows text files) or LF (Linux, Mac
OS-X), but I think it might be easier on clients to just look for both (my
code will not deal with just a CR or an LFCR for instance, not that I've
ever come across any text with that format in a long time [1]).

  -spc (Didn't expect CRLF to be a point of contention ... )

[1]	I know Classic Mac (pre OS-X) and some older 8-bit computers used CR
	only.




From lazar.michael22@gmail.com  Fri Sep  6 16:21:09 2019
From: lazar.michael22@gmail.com (Michael Lazar)
Date: Fri, 6 Sep 2019 11:21:09 -0400
Subject: Text reflow woes (or: I want bullets back!)y
In-Reply-To: <2007686399.210773.1567738372606@ichabod.co-bxl>
References: <2007686399.210773.1567738372606@ichabod.co-bxl>
Message-ID: <CAFTy05YwTUp=v41MJkK2thVRQkobR3bGQYgUBd=dnmkAbyhkJw@mail.gmail.com>

On Thu, Sep 5, 2019 at 10:53 PM Brian Evans <b__m__e at mailfence.com> wrote:
> Michael writes:
> > In my opinion this
> > needs to be an all-or-nothing decision:
> >
> > 1. Fixed-width text with no special syntax
> > 2. Reflowed text with some simple flavor of markdown for styling
>
> In #1 above is the idea that there would be no wrapping and any
> text that went over the  width limit would be truncated?

Yes, in my experience this is how most gopher clients do it. You can't assume
that somebody's ASCII banner, or markdown table, or whatever custom formatting
they use is going to look correct if it is reflowed or wrapped. So the safest
thing to do is preserve the original line breaks and just display as many
columns as you can fit in your display.

> I can see that being a bad user experience if someone's device
> does not conform easily to the size that is chosen. It is also
> annoying to enforce. A perfectly fine document would not be
> readable because their lines go to 60 instead of 45?

I totally agree with you that it's a bad experience. That is why I support
experimenting with making the "standard" width something like 45 characters,
so that it reasonably fits in most types of displays.

This would only be enforced for documents of type "text/gemini" that are
specifically designed to be consumed over gemini. I'm not proposing that we
dictate how servers or clients handle other types of text documents.

> In #2 is reflowed what we are aiming for or is wrapped what we
> are aiming for? Both terms have been used during the ongoing
> conversation and I have lost track of which one people are
> preferring and how each person defines them.

I thought we were discussing text reflowing, as defined in section 1.3.5.3 of
the gemini speculative spec. Apologies if I missed the mark on this. This thread
has grown so large now that I feel like conversations are starting to go around
in circles.

From lazar.michael22@gmail.com  Fri Sep  6 16:43:07 2019
From: lazar.michael22@gmail.com (Michael Lazar)
Date: Fri, 6 Sep 2019 11:43:07 -0400
Subject: Text reflow woes (or: I want bullets back!)y
In-Reply-To: <20190906053348.GA11998@brevard.conman.org>
References: <962619280.54375.1566058199182@ichabod.co-bxl>
 <87v9uvy58k.fsf@camilla.carcosa.net>
 <20190818145439.GF5354@SDF.ORG> <20190818171031.GG5354@SDF.ORG>
 <20190818213253.GE26287@brevard.conman.org> <20190819181906.GF28055@SDF.ORG>
 <20190901110451.GC14657@SDF.ORG>
 <CAFTy05ZgLdWWsisZzDRN-EwBMi2QMb3xs0MD6_VSkQwtoR6PwA@mail.gmail.com>
 <20190906053348.GA11998@brevard.conman.org>
Message-ID: <CAFTy05at9CXjnNgpFNiJDcu8ivRTqopsUBebjPZ4RDQboqqoww@mail.gmail.com>

On Fri, Sep 6, 2019 at 1:33 AM Sean Conner <sean at conman.org> wrote:
>   I read through those, and it appears that you generate an AST from the
> markdown-like text, then run through that AST to generate HTML.  Is there
> code to generate text output, or is that just the file itself?
>
>   -spc

The design_document.tx is the original markdown-like document that I wrote.
As you suspected, here's what I ran to generate the other files:

    $ ./parse.py design_document.txt > design_document.json
    $ ./render.py design_document.json > design_document.html

I didn't include anything that can take the AST and render it as plain text. I
suppose it would be pretty trivial to write though. That could be something
that a TUI gemini client might utilize to generate a "fancy" text display like
colorizing links or making title elements bold + centered.

From solderpunk@SDF.ORG  Sat Sep  7 15:12:48 2019
From: solderpunk@SDF.ORG (solderpunk)
Date: Sat, 7 Sep 2019 14:12:48 +0000
Subject: Text reflow woes (or: I want bullets back!)y
In-Reply-To: <2007686399.210773.1567738372606@ichabod.co-bxl>
References: <2007686399.210773.1567738372606@ichabod.co-bxl>
Message-ID: <20190907141248.GB25258@SDF.ORG>

> Tomasino writes:
> > I can't believe how simple that is. A leading space for fixed content is
> > ridiculously simple. I love it.
> 
> Right? Nice and easy. Given that fixed content will likely be more rare
> than wrapped or flowed content it seems like an elegant solution.

I'm trying to be cautious and avoid jumping to a snap decision, but:
wow!  I think I'm more enthused about this idea than anything else which
has been proposed.  It's wonderfully simple, even more so than the idea
which was brought up much earlier about using spaces at the *end* of the
line.  It is also vaguely compatible with some flavours of Markdown,
where code blocks are indicated with four leading spaces - Markdown
documents formatted in this way would be (in that respect) correctly
rendered by Gemini clients implementing this proposal.  Bulletted lists
arguably look even nicer when formatted with a leading space:

 * The first item
 * A second item
 * Item the third

I acknowledge that this solution is not perfect and e.g. won't gracefully
handle bulleted lists with items which are more than one line long (not
sure how big a problem this is in practice - the longer each list item
gets, the more perfectly fine the whole list looks, IMHO, if each line
is formatted as a paragraph of its own), but I think by now it should be
obvious that there is no hope of achieving a perfect solution covering
all situations while still keeping the implementation effort very low.
This proposal gets us an awful lot of bang for the buck.  For use cases
where it just won't cut the mustard, it might be time to consider
serving text/markdown over Gemini or, heck, even text/html over HTTP via
Shizaru or a similarly non-evil server.  Gemini won't - can't - be the
ideal tool for every job.

It might be a good idea for people to start experimenting with
implementing this, so we can get an informed perspective on just how
hard to implement this *really* is, and on how certain kinds of content
renders.

-Solderpunk


From solderpunk@SDF.ORG  Sat Sep  7 16:06:00 2019
From: solderpunk@SDF.ORG (solderpunk)
Date: Sat, 7 Sep 2019 15:06:00 +0000
Subject: CGI suport for Gemini
In-Reply-To: <20190905185541.GA28270@brevard.conman.org>
References: <20190905185541.GA28270@brevard.conman.org>
Message-ID: <20190907150600.GE25258@SDF.ORG>

Thanks for taking the time to write this up!

I guess I'm a little surprised / confused to see how closely your
implementation sticks to the HTTP version of CGI, i.e. by going to the
extent of adding a meaningless dummy environment variable for
REQUEST_METHOD because that variable MUST exist in HTTP CGI
implementations.  I understand this this approach (combined with
translating HTTP status codes to Gemini codes) permits existing CGI
scripts written for HTTP to be deployed over Gemini without
modification, which I suppose is nice, but...I imagine the majority of
existing CGI scripts generate HTML output, which, while perfectly
cromulent to serve over Gemini, is not really supposed to be mainstream
usage.

Back when I started work on Shizaru I expected to one day add CGI
support and my plan then was to actually *not* set REMOTE_ADDR at all
(along with lots of other things, like stripping any Cookie headers out
of the response).  I see now this would be an RFC violation, but if I
ever get around to this, I'll still do it.  Shizaru is supposed to be
about Doing the Right Thing and creating a subspace of the web where
people can relax and feel safe.  It's explicitly an opinionated piece of
software and I guess you could even call it an activism project, so,
well, RFC be damned.

To the extent that I presume the majority of CGI scripts for Gemini will
be written from scratch for Gemini and so backward compatibility isn't
a problem, I wonder if it's worthwhile including something in the spec
defining an explicit subset of RFC-3875 as being used for Gemini.  This
would let us get rid of stuff which is obviously not needed (like
REQUEST_METHOD), and gives us the option of maybe getting rid of stuff
that maybe we can agree we'd rather not have (like REMOTE_ADDR?).

-Solderpunk


From jmcbray@carcosa.net  Sat Sep  7 21:38:43 2019
From: jmcbray@carcosa.net (Jason McBrayer)
Date: Sat, 07 Sep 2019 16:38:43 -0400
Subject: Text reflow woes (or: I want bullets back!)y
References: <2007686399.210773.1567738372606@ichabod.co-bxl>
 <20190907141248.GB25258@SDF.ORG>
 <mailman.62.1567865576.15469.gemini@lists.orbitalfox.eu>
Message-ID: <878sqzrgdo.fsf@cassilda.carcosa.net>

solderpunk <solderpunk at SDF.ORG> writes:

> This proposal gets us an awful lot of bang for the buck.  For use cases
> where it just won't cut the mustard, it might be time to consider
> serving text/markdown over Gemini

Yeah. I think this is probably the least bad of the really simple
solutions. It keeps it simpler than using even Text Junior, but makes
the main use cases easy to handle.

> It might be a good idea for people to start experimenting with
> implementing this, so we can get an informed perspective on just how
> hard to implement this *really* is, and on how certain kinds of
> content renders.

I've not progressed on Voskhod, because of being sick and just busy at
home, but I'll probably implement these wrapping rules for text/gemini
before I implement support for text/markdown, once I get past fighting
with the build system to be able to debug stuff. It would be great for
Julien to have a go at implementing this in Asuka, since that's as far
as I know the only currently existing client that has an idea of its
screen width.

One question: should non-wrapped lines be rendered in a fixed-width
font, in a client that is capable of using both fixed-width and
proportional fonts?

-- 
Jason McBrayer      | ?Strange is the night where black stars rise,
jmcbray at carcosa.net | and strange moons circle through the skies,
                    | but stranger still is lost Carcosa.?
                    | ? Robert W. Chambers,The King in Yellow

From jmcbray@carcosa.net  Sat Sep  7 21:30:14 2019
From: jmcbray@carcosa.net (Jason McBrayer)
Date: Sat, 07 Sep 2019 16:30:14 -0400
Subject: Text format proposal (was Re: Text reflow woes (or: I want
 bullets back!)y)
References: <2007686399.210773.1567738372606@ichabod.co-bxl>
 <20190906053923.GB11998@brevard.conman.org>
 <9EE2AD0B-5BA9-4392-99A8-502D1A4E35FA@lavabit.com>
 <20190906144603.GC11998@brevard.conman.org>
 <mailman.57.1567781168.15469.gemini@lists.orbitalfox.eu>
Message-ID: <87d0gbrgrt.fsf@cassilda.carcosa.net>

Sean Conner <sean at conman.org> writes:

> (specifically sections 1.2, 1.3.1 and 1.3.5.2).  It doesn't have the
> language MUST, SHOULD, etc, though.  Also, CRLF is an Internet standard for
> transfering text (you'll see it in many other specifications, like SMTP and
> HTTP), so that's why I added that language.

IMO, it makes sense to require CRLF in the plain text parts of the
protocol (after requests, after the status line of a response), but I
don't think that the text/gemini file format needs to have CR/LF; IMO
clients should be prepared to accept either LF or CR/LF just as they
would with text/plain. And maybe if we're serious about supporting old
devices, clients should be prepared for bare CR, too (Classic MacOS).
But it's a pain in the arse to authors to have to save text documents
with non-native line endings, and I don't feel like servers need to be
in the business of reformatting the content they serve.

-- 
Jason McBrayer      | ?Strange is the night where black stars rise,
jmcbray at carcosa.net | and strange moons circle through the skies,
                    | but stranger still is lost Carcosa.?
                    | ? Robert W. Chambers,The King in Yellow

From jmcbray@carcosa.net  Sat Sep  7 21:41:01 2019
From: jmcbray@carcosa.net (Jason McBrayer)
Date: Sat, 07 Sep 2019 16:41:01 -0400
Subject: CGI suport for Gemini
References: <20190905185541.GA28270@brevard.conman.org>
 <20190907150600.GE25258@SDF.ORG>
 <mailman.63.1567868768.15469.gemini@lists.orbitalfox.eu>
Message-ID: <874l1nrg9u.fsf@cassilda.carcosa.net>

solderpunk <solderpunk at SDF.ORG> writes:

> To the extent that I presume the majority of CGI scripts for Gemini will
> be written from scratch for Gemini and so backward compatibility isn't
> a problem, I wonder if it's worthwhile including something in the spec
> defining an explicit subset of RFC-3875 as being used for Gemini.  This
> would let us get rid of stuff which is obviously not needed (like
> REQUEST_METHOD), and gives us the option of maybe getting rid of stuff
> that maybe we can agree we'd rather not have (like REMOTE_ADDR?).

I agree with this, but think it ought to be in a separate standard
document from the main protocol documentation.

-- 
Jason McBrayer      | ?Strange is the night where black stars rise,
jmcbray at carcosa.net | and strange moons circle through the skies,
                    | but stranger still is lost Carcosa.?
                    | ? Robert W. Chambers,The King in Yellow

From jmcbray@carcosa.net  Sat Sep  7 21:38:43 2019
From: jmcbray@carcosa.net (Jason McBrayer)
Date: Sat, 07 Sep 2019 16:38:43 -0400
Subject: Text reflow woes (or: I want bullets back!)y
References: <2007686399.210773.1567738372606@ichabod.co-bxl>
 <20190907141248.GB25258@SDF.ORG>
 <mailman.62.1567865576.15469.gemini@lists.orbitalfox.eu>
Message-ID: <878sqzrgdo.fsf@cassilda.carcosa.net>

solderpunk <solderpunk at SDF.ORG> writes:

> This proposal gets us an awful lot of bang for the buck.  For use cases
> where it just won't cut the mustard, it might be time to consider
> serving text/markdown over Gemini

Yeah. I think this is probably the least bad of the really simple
solutions. It keeps it simpler than using even Text Junior, but makes
the main use cases easy to handle.

> It might be a good idea for people to start experimenting with
> implementing this, so we can get an informed perspective on just how
> hard to implement this *really* is, and on how certain kinds of
> content renders.

I've not progressed on Voskhod, because of being sick and just busy at
home, but I'll probably implement these wrapping rules for text/gemini
before I implement support for text/markdown, once I get past fighting
with the build system to be able to debug stuff. It would be great for
Julien to have a go at implementing this in Asuka, since that's as far
as I know the only currently existing client that has an idea of its
screen width.

One question: should non-wrapped lines be rendered in a fixed-width
font, in a client that is capable of using both fixed-width and
proportional fonts?

-- 
Jason McBrayer      | ?Strange is the night where black stars rise,
jmcbray at carcosa.net | and strange moons circle through the skies,
                    | but stranger still is lost Carcosa.?
                    | ? Robert W. Chambers,The King in Yellow

From jmcbray@carcosa.net  Sat Sep  7 21:30:14 2019
From: jmcbray@carcosa.net (Jason McBrayer)
Date: Sat, 07 Sep 2019 16:30:14 -0400
Subject: Text format proposal (was Re: Text reflow woes (or: I want
 bullets back!)y)
References: <2007686399.210773.1567738372606@ichabod.co-bxl>
 <20190906053923.GB11998@brevard.conman.org>
 <9EE2AD0B-5BA9-4392-99A8-502D1A4E35FA@lavabit.com>
 <20190906144603.GC11998@brevard.conman.org>
 <mailman.57.1567781168.15469.gemini@lists.orbitalfox.eu>
Message-ID: <87d0gbrgrt.fsf@cassilda.carcosa.net>

Sean Conner <sean at conman.org> writes:

> (specifically sections 1.2, 1.3.1 and 1.3.5.2).  It doesn't have the
> language MUST, SHOULD, etc, though.  Also, CRLF is an Internet standard for
> transfering text (you'll see it in many other specifications, like SMTP and
> HTTP), so that's why I added that language.

IMO, it makes sense to require CRLF in the plain text parts of the
protocol (after requests, after the status line of a response), but I
don't think that the text/gemini file format needs to have CR/LF; IMO
clients should be prepared to accept either LF or CR/LF just as they
would with text/plain. And maybe if we're serious about supporting old
devices, clients should be prepared for bare CR, too (Classic MacOS).
But it's a pain in the arse to authors to have to save text documents
with non-native line endings, and I don't feel like servers need to be
in the business of reformatting the content they serve.

-- 
Jason McBrayer      | ?Strange is the night where black stars rise,
jmcbray at carcosa.net | and strange moons circle through the skies,
                    | but stranger still is lost Carcosa.?
                    | ? Robert W. Chambers,The King in Yellow

From jmcbray@carcosa.net  Sat Sep  7 21:41:01 2019
From: jmcbray@carcosa.net (Jason McBrayer)
Date: Sat, 07 Sep 2019 16:41:01 -0400
Subject: CGI suport for Gemini
References: <20190905185541.GA28270@brevard.conman.org>
 <20190907150600.GE25258@SDF.ORG>
 <mailman.63.1567868768.15469.gemini@lists.orbitalfox.eu>
Message-ID: <874l1nrg9u.fsf@cassilda.carcosa.net>

solderpunk <solderpunk at SDF.ORG> writes:

> To the extent that I presume the majority of CGI scripts for Gemini will
> be written from scratch for Gemini and so backward compatibility isn't
> a problem, I wonder if it's worthwhile including something in the spec
> defining an explicit subset of RFC-3875 as being used for Gemini.  This
> would let us get rid of stuff which is obviously not needed (like
> REQUEST_METHOD), and gives us the option of maybe getting rid of stuff
> that maybe we can agree we'd rather not have (like REMOTE_ADDR?).

I agree with this, but think it ought to be in a separate standard
document from the main protocol documentation.

-- 
Jason McBrayer      | ?Strange is the night where black stars rise,
jmcbray at carcosa.net | and strange moons circle through the skies,
                    | but stranger still is lost Carcosa.?
                    | ? Robert W. Chambers,The King in Yellow

From sean@conman.org  Sat Sep  7 23:48:00 2019
From: sean@conman.org (Sean Conner)
Date: Sat, 7 Sep 2019 18:48:00 -0400
Subject: Text reflow woes (or: I want bullets back!)y
In-Reply-To: <20190901110451.GC14657@SDF.ORG>
References: <962619280.54375.1566058199182@ichabod.co-bxl>
 <87v9uvy58k.fsf@camilla.carcosa.net> <20190818145439.GF5354@SDF.ORG>
 <20190818171031.GG5354@SDF.ORG> <20190818213253.GE26287@brevard.conman.org>
 <20190819181906.GF28055@SDF.ORG> <20190901110451.GC14657@SDF.ORG>
Message-ID: <20190907224800.GD11998@brevard.conman.org>

It was thus said that the Great solderpunk once stated:
> 
> At
> gopher://zaibatsu.circumlunar.space:70/0/~solderpunk/files/text-wrapping-experiment.txt
> I have some text wrapped at 70, 60, 50, 40, 30 and finally 35 columns.
> Using Pocket Gopher on my phone, I can read text wrapped at 70 columns
> no worries if I hold the phone in landscape orientation.  In portrait I
> need 35, which admittedly doesn't look quite right on my laptop screen.
> But I think my phone screen is atypically small, and I wonder if maybe
> 40 would be workable for a lot of people?  Feedback from actual device
> users very welcome...

  I just added something similar to my server:

	gemini://gemini.conman.org/test/testwrap.gemini

It has links to texts of various widths.  You can test other widths by going
to:

	gemini://gemini.conman.org/test/wrap;77

Replace the number at the end with your preferred width (keep the semicolon
though), and text will wrap at that point.  The lower limit is 1 and there's
no upper limit.  That happens to be the only page where you can specify the
width, by the way.

  -spc


From sean@conman.org  Sun Sep  8 07:31:25 2019
From: sean@conman.org (Sean Conner)
Date: Sun, 8 Sep 2019 02:31:25 -0400
Subject: CGI suport for Gemini
In-Reply-To: <20190907150600.GE25258@SDF.ORG>
References: <20190905185541.GA28270@brevard.conman.org>
 <20190907150600.GE25258@SDF.ORG>
Message-ID: <20190908063125.GG11998@brevard.conman.org>

It was thus said that the Great solderpunk once stated:
> Thanks for taking the time to write this up!
> 
> I guess I'm a little surprised / confused to see how closely your
> implementation sticks to the HTTP version of CGI, 

  I would think that's now par for course 8-P

> i.e. by going to the
> extent of adding a meaningless dummy environment variable for
> REQUEST_METHOD because that variable MUST exist in HTTP CGI
> implementations.  

  I did it to see just how difficult it would be, and in fact, it wasn't
that difficult at all (well, supporting the command line options of RFC-3875
took a bit of work and I had to change how I parse URLs, but that was the
only real snag).

> I understand this this approach (combined with
> translating HTTP status codes to Gemini codes) permits existing CGI
> scripts written for HTTP to be deployed over Gemini without
> modification, which I suppose is nice, but...I imagine the majority of
> existing CGI scripts generate HTML output, which, while perfectly
> cromulent to serve over Gemini, is not really supposed to be mainstream
> usage.

  No, but I did have ulterior motives---my web-based blog is CGI based, and
I can run it via this module (as long as I enable the http-environment
variables).

> Back when I started work on Shizaru I expected to one day add CGI
> support and my plan then was to actually *not* set REMOTE_ADDR at all
> (along with lots of other things, like stripping any Cookie headers out
> of the response).  I see now this would be an RFC violation, but if I
> ever get around to this, I'll still do it.  Shizaru is supposed to be
> about Doing the Right Thing and creating a subspace of the web where
> people can relax and feel safe.  It's explicitly an opinionated piece of
> software and I guess you could even call it an activism project, so,
> well, RFC be damned.

  I might be inclined to set REMOTE_ADDR to "127.0.0.1" and call it a day. 
That way, any CGI scripts that rely upon that have something, and it doesn't
leak any information.  And nothing in the RFC state you *have* to set the
HTTP related environment variables (or do what I do and set them to "" to
prevent CGI scripts from bombing out).

  I could even do that for my CGI module for Gemini---technically, the CGI
script doesn't get raw access to the socket, so the data is "technically"
coming from the localhost ... 

> To the extent that I presume the majority of CGI scripts for Gemini will
> be written from scratch for Gemini and so backward compatibility isn't
> a problem, I wonder if it's worthwhile including something in the spec
> defining an explicit subset of RFC-3875 as being used for Gemini.  This
> would let us get rid of stuff which is obviously not needed (like
> REQUEST_METHOD), and gives us the option of maybe getting rid of stuff
> that maybe we can agree we'd rather not have (like REMOTE_ADDR?).

  Here are the environment variables defined by RFC-3875, and some
appropriate ways to handle them:

	AUTH_TYPE		only if a user certificate, then set to "Certificate"
	CONTENT_LENGTH		don't set (it's optional)
	CONTENT_TYPE		don't set (it's optional)
	GATEWAY_INTERFACE	"CGI/1.1"
	PATH_INFO		required under certain conditions (see RFC)
	PATH_TRANSLATED		required under certain conditions (see RFC)
	QUERY_STRING		"" if no query sent, otherwise, query string (this is MANDATORY)
	REMOTE_ADDR		"127.0.0.1"
	REMOTE_HOST		"127.0.0.1"
	REMOTE_IDENT		don't set (it's optional)
	REMOTE_USER		only if a user certificate, then the CN field of the subject
	REQUEST_METHOD		""
	SCRIPT_NAME		set (see RFC)
	SERVER_NAME		set
	SERVER_PORT		set
	SERVER_PROTOCOL		"GEMINI"
	SERVER_SOFTWARE		set

  If you *want* to run a web-based CGI script, then the following should
probably be defined as:

	DOCUMENT_ROOT		maybe set? (Apache sets this)
	REQUEST_METHOD		"GET"
	SERVER_PROTOCOL		"HTTP/1.0"

and translate status codes appropriately.
	
  Also, one could define other environment variables starting with "GEMINI_"
but I can't think of much that could be set (wait, maybe the TLS client
certificate stuff, now that I think about it), but it's allowed under the
RFC.  Also, some critical environment variables used by the OS like PATH,
LANG, etc.  I did set up a way to define these (and others) on a global and
per-script basis.

  You don't have to deviate from the RFC *that much.*

  -spc

From sean@conman.org  Sun Sep  8 07:34:56 2019
From: sean@conman.org (Sean Conner)
Date: Sun, 8 Sep 2019 02:34:56 -0400
Subject: Text format proposal (was Re: Text reflow woes (or: I want
 bullets back!)y)
In-Reply-To: <87d0gbrgrt.fsf@cassilda.carcosa.net>
References: <2007686399.210773.1567738372606@ichabod.co-bxl>
 <20190906053923.GB11998@brevard.conman.org>
 <9EE2AD0B-5BA9-4392-99A8-502D1A4E35FA@lavabit.com>
 <20190906144603.GC11998@brevard.conman.org>
 <mailman.57.1567781168.15469.gemini@lists.orbitalfox.eu>
 <87d0gbrgrt.fsf@cassilda.carcosa.net>
Message-ID: <20190908063455.GH11998@brevard.conman.org>

It was thus said that the Great Jason McBrayer once stated:
> Sean Conner <sean at conman.org> writes:
> 
> > (specifically sections 1.2, 1.3.1 and 1.3.5.2).  It doesn't have the
> > language MUST, SHOULD, etc, though.  Also, CRLF is an Internet standard for
> > transfering text (you'll see it in many other specifications, like SMTP and
> > HTTP), so that's why I added that language.
> 
> IMO, it makes sense to require CRLF in the plain text parts of the
> protocol (after requests, after the status line of a response), but I
> don't think that the text/gemini file format needs to have CR/LF; IMO
> clients should be prepared to accept either LF or CR/LF just as they
> would with text/plain. And maybe if we're serious about supporting old
> devices, clients should be prepared for bare CR, too (Classic MacOS).
> But it's a pain in the arse to authors to have to save text documents
> with non-native line endings, and I don't feel like servers need to be
> in the business of reformatting the content they serve.

  I can live with that.  Just note that lines can end in one of three
possible ways:

	CR LF	Windows
	LF	Unix (which includes Linux and Mac OS-X)
	CR	vanishingly small set of systems (classic Mac)

  I don't think I've ever come across the order LF CR.

  -spc



From solderpunk@SDF.ORG  Sun Sep  8 15:14:10 2019
From: solderpunk@SDF.ORG (solderpunk)
Date: Sun, 8 Sep 2019 14:14:10 +0000
Subject: Defining sections in Gemini maps?
Message-ID: <20190908141410.GA18305@SDF.ORG>

Here's an idea that has been in my mind for a little while.  I think
it's a good one, but feedback is welcome.

I thought that even if we end up using something very minimal (like the
recently proposed "initial whitespace means fixed content" idea, which
I'm still very excited about!) as the format for Gemini maps, it might
still be a good idea to include a notion of "sections" (probably, but
not necessarily, using Markdown's

# Section
## Subsection
### Subsection

syntax).

This idea has nothing to do with text formatting as such, and the spec
would be totally silent on the presentation of these headings, with no
implication that they should be in a different size, font, colour,
whatever (though I suspect many clients might do this).  Rather, it's
supposed to be a purely semantic thing, to *organise* the content in a
long page.  Advanced clients could do things like display a table of
contents, or "jump to next (sub)section" navigation hotkeys, etc.  If it
makes things look prettier, that's a nice side-effect, but really it's
about elevating the "textual content is king" philosophy of Gopher to
the next level.  Basic clients could, as always, be totally blind to
this without it causing problems.

This might seem like an odd thing for me to propose when I've been so
resistant to defining a proper markup system for Gemini.  IMHO this is
something quite different, but I understand that it might not look it.
If this idea is unpopular I'm prepared to drop it without much of a
fight, but I thought I'd at least float it.

-Solderpunk


From solderpunk@SDF.ORG  Sun Sep  8 15:42:08 2019
From: solderpunk@SDF.ORG (solderpunk)
Date: Sun, 8 Sep 2019 14:42:08 +0000
Subject: CRLF requirements (was Re: Text format proposal)
In-Reply-To: <87d0gbrgrt.fsf@cassilda.carcosa.net>
References: <2007686399.210773.1567738372606@ichabod.co-bxl>
 <20190906053923.GB11998@brevard.conman.org>
 <9EE2AD0B-5BA9-4392-99A8-502D1A4E35FA@lavabit.com>
 <20190906144603.GC11998@brevard.conman.org>
 <mailman.57.1567781168.15469.gemini@lists.orbitalfox.eu>
 <87d0gbrgrt.fsf@cassilda.carcosa.net>
Message-ID: <20190908144208.GB18305@SDF.ORG>

> IMO, it makes sense to require CRLF in the plain text parts of the
> protocol (after requests, after the status line of a response), but I
> don't think that the text/gemini file format needs to have CR/LF; IMO
> clients should be prepared to accept either LF or CR/LF just as they
> would with text/plain. And maybe if we're serious about supporting old
> devices, clients should be prepared for bare CR, too (Classic MacOS).
> But it's a pain in the arse to authors to have to save text documents
> with non-native line endings, and I don't feel like servers need to be
> in the business of reformatting the content they serve.

I will admit that the current liberal use of CRLF throughout the Gemini
spec is the result of me blindly copying from Gopher and other RFCs (as
Sean mentioned, it's ubiquitous).  My initial response to what you wrote
above is that it makes an awful lot of sense.  And, in fact, is probably
a lot closer to what extant clients are actually doing.

Does anybody want to make a strong counterargument, that CRLF should be
strictly required in text/gemini?  If not I'll update the spec-spec.

-Solderpunk


From sean@conman.org  Mon Sep  9 01:37:14 2019
From: sean@conman.org (Sean Conner)
Date: Sun, 8 Sep 2019 20:37:14 -0400
Subject: CRLF requirements (was Re: Text format proposal)
In-Reply-To: <20190908144208.GB18305@SDF.ORG>
References: <2007686399.210773.1567738372606@ichabod.co-bxl>
 <20190906053923.GB11998@brevard.conman.org>
 <9EE2AD0B-5BA9-4392-99A8-502D1A4E35FA@lavabit.com>
 <20190906144603.GC11998@brevard.conman.org>
 <mailman.57.1567781168.15469.gemini@lists.orbitalfox.eu>
 <87d0gbrgrt.fsf@cassilda.carcosa.net> <20190908144208.GB18305@SDF.ORG>
Message-ID: <20190909003714.GI11998@brevard.conman.org>

It was thus said that the Great solderpunk once stated:
> > IMO, it makes sense to require CRLF in the plain text parts of the
> > protocol (after requests, after the status line of a response), but I
> > don't think that the text/gemini file format needs to have CR/LF; IMO
> > clients should be prepared to accept either LF or CR/LF just as they
> > would with text/plain. And maybe if we're serious about supporting old
> > devices, clients should be prepared for bare CR, too (Classic MacOS).
> > But it's a pain in the arse to authors to have to save text documents
> > with non-native line endings, and I don't feel like servers need to be
> > in the business of reformatting the content they serve.
> 
> I will admit that the current liberal use of CRLF throughout the Gemini
> spec is the result of me blindly copying from Gopher and other RFCs (as
> Sean mentioned, it's ubiquitous).  My initial response to what you wrote
> above is that it makes an awful lot of sense.  And, in fact, is probably
> a lot closer to what extant clients are actually doing.
> 
> Does anybody want to make a strong counterargument, that CRLF should be
> strictly required in text/gemini?  If not I'll update the spec-spec.

  As memntioned, I think the request and the status response should have the
CRLF, but the content, even if text/gemini, should use whatever line endings
are easier/standard for the content creator..  So clients should expect
text/* types with endings of CRLF or LF (CR will probably be rare, and I've
never encountered LFCR).

  -spc


From jmcbray@carcosa.net  Tue Sep 10 00:35:10 2019
From: jmcbray@carcosa.net (Jason McBrayer)
Date: Mon, 09 Sep 2019 19:35:10 -0400
Subject: Defining sections in Gemini maps?
In-Reply-To: <20190908141410.GA18305@SDF.ORG> (solderpunk@sdf.org's message of
 "Sun, 8 Sep 2019 14:14:10 +0000")
References: <20190908141410.GA18305@SDF.ORG>
Message-ID: <87h85loxg1.fsf@cassilda.carcosa.net>

solderpunk <solderpunk at SDF.ORG> writes:
[section headers]

> This idea has nothing to do with text formatting as such, and the spec
> would be totally silent on the presentation of these headings, with no
> implication that they should be in a different size, font, colour,
> whatever (though I suspect many clients might do this).  Rather, it's
> supposed to be a purely semantic thing, to *organise* the content in a
> long page.

I think that a lot of the other things that go under "text formatting"
have semantic value that clients could take into account, too. Things
like *emphasis* and **strong emphasis** (i.e., as opposed to italic and
bold). I like the idea of clients generating TOCs and so forth, but I
think it's an argument in favor of using a semantic markup language in
general. I'm not sure where you could fairly draw the line once you
started down that road.

-- 
Jason McBrayer      | ?Strange is the night where black stars rise,
jmcbray at carcosa.net | and strange moons circle through the skies,
                    | but stranger still is lost Carcosa.?
                    | ? Robert W. Chambers,The King in Yellow

From sean@conman.org  Tue Sep 10 03:07:41 2019
From: sean@conman.org (Sean Conner)
Date: Mon, 9 Sep 2019 22:07:41 -0400
Subject: Best practices in Gemini servers
Message-ID: <20190910020740.GL11998@brevard.conman.org>


  To get away from the text formatting argument (which I think comprises
over half the messages so far) I thought I might ask for some guidelines as
to the best practice for Gemini servers.  I came up with these as I was
reworking my Gemini server (getting ready to release it, as I've had one
person already request a copy).  So here we go:

  I have this bit of code to check the request:

	  if loc.scheme ~= 'gemini'
	  or loc.host   ~= CONF.network.host
	  or loc.port   ~= CONF.network.port then
	    log(ios,59,"",reply(ios,"59\t",MSG[59],"\r\n"))
	    ios:close()
	    return
	  end

  I'm currently returning a "Bad Request" for this, if the protocol, host
and port don't match what is currently configured on my server.  The other
possible status is "Proxy Request Refused".  My server doesn't do proxy
requests.  What should the proper status code be?  Is "Bad Request" fine
here?

  Next.  Each request is run through a series of checks to see if a resource
has moved or is gone:

	redirect =
	{
	  permanent = { ... } -- list of permenent redirects
	  temporary = { ... } -- list of tempoarary redirects
	  gone      = { ... } -- list of gone items
	}

  For any given list, it's checked in the order presented, but the ordering
of the major sections is currently defined as: temporary, permanent then
gone.  I keep going back and forth if this shouldn't be: gone, permanent,
temporary or even if it matters.

  Next.  The actual order of things is:

	read request
	check redirects
	check authorization
	check handlers

  Each of the checks consist of the path matched against a pattern, and the
first match wins.  So for instance (the path fields, for instance, are Lua
patterns---think regex):

	redirect =
	{
	  permanent =
	  {
	    { '^/source%-code$'     , "/sourcecode/"   } ,
	    { '^/source%-code/(.*)' , "/sourcecode/$1" } ,
	  }
	},

	authorization =
	{
	  {
	    path   = '^/private/',
	    status = 61,
	    check  = function(issuer,subject,url) ... end,
	  },
	
	  {
	    path   = '^/conman%-labs%-private/',
	    status = 62,
	    check  = function(issuer,subject,url) ... end,
	  },
	},

	handler =
	{
	  {
	    path   = '^(/hilo/)(.*)',
	    module = "hilo",
	  },
	
	  {
	    path   = '^/test/wrap(%;?(%d*))',
	    module = "wrap",
	  },
	
	  {
	    path      = ".*",
	    module    = "filesystem",
	    directory = "gemini.conman.org",
	    no_access =
	    {
	      "^%.",  -- no to any dot files
	      "%~$",  -- no to any backup files
	    },
	  },

  So given a path like "/private/Welcome.txt", there are no redirects that
match, so it's not redirected.  It does match one of the authorization
patterns, so a check for the certificate is made, and if it passes that
(it's done that way so that the individual handlers don't have to handle
authentication themselves), then it goes through the handlers to match the
last one, pointing to the "filename" handler.  My question here, or more of
a concern really, is I think I have the ordering wrong---I think I should
check authorization first before redirection checking, because not doing so
may lead to leaking of protected resource names.

  So my question here, does it make sense to have the order be:

	check request
	check authorization
	check redirection
	check handlers

to prevent possible leaking of data?  I'm thinking yes, but wouldn't mind
seeing a discussion.

  -spc (So anyway, back to our regularly schedule talk on text formatting ... )

From jmcbray@carcosa.net  Tue Sep 10 20:27:20 2019
From: jmcbray@carcosa.net (Jason McBrayer)
Date: Tue, 10 Sep 2019 15:27:20 -0400
Subject: Best practices in Gemini servers
In-Reply-To: <20190910020740.GL11998@brevard.conman.org> (Sean Conner's
 message of "Mon, 9 Sep 2019 22:07:41 -0400")
References: <20190910020740.GL11998@brevard.conman.org>
Message-ID: <874l1kostj.fsf@cassilda.carcosa.net>

Sean Conner <sean at conman.org> writes:

>   I'm currently returning a "Bad Request" for this, if the protocol, host
> and port don't match what is currently configured on my server.  The other
> possible status is "Proxy Request Refused".  My server doesn't do proxy
> requests.  What should the proper status code be?  Is "Bad Request" fine
> here?

In my opinion, the Most Correct response to return would be "Proxy
Request Refused". If they had made the same request to a the right
server or if this server had been configured differently, it would have
succeeded, so the request isn't malformed or anything. But Bad Request
is probably the next-best response; Not Found would also make a kind of
sense. 

>   So my question here, does it make sense to have the order be:
>
> 	check request
> 	check authorization
> 	check redirection
> 	check handlers
>
> to prevent possible leaking of data?  I'm thinking yes, but wouldn't mind
> seeing a discussion.
>

I think this is good. I don't know that there's an equivalent best
practices in HTTP; I think this is all pretty implementation-defined. 

-- 
Jason McBrayer      | ?Strange is the night where black stars rise,
jmcbray at carcosa.net | and strange moons circle through the skies,
                    | but stranger still is lost Carcosa.?
                    | ? Robert W. Chambers,The King in Yellow

From sean@conman.org  Tue Sep 10 20:35:23 2019
From: sean@conman.org (Sean Conner)
Date: Tue, 10 Sep 2019 15:35:23 -0400
Subject: Best practices in Gemini servers
In-Reply-To: <874l1kostj.fsf@cassilda.carcosa.net>
References: <20190910020740.GL11998@brevard.conman.org>
 <874l1kostj.fsf@cassilda.carcosa.net>
Message-ID: <20190910193523.GA30060@brevard.conman.org>

It was thus said that the Great Jason McBrayer once stated:
> Sean Conner <sean at conman.org> writes:
> 
> >   I'm currently returning a "Bad Request" for this, if the protocol, host
> > and port don't match what is currently configured on my server.  The other
> > possible status is "Proxy Request Refused".  My server doesn't do proxy
> > requests.  What should the proper status code be?  Is "Bad Request" fine
> > here?
> 
> In my opinion, the Most Correct response to return would be "Proxy
> Request Refused". If they had made the same request to a the right
> server or if this server had been configured differently, it would have
> succeeded, so the request isn't malformed or anything. But Bad Request
> is probably the next-best response; Not Found would also make a kind of
> sense. 

  Hmmm ... if my sever did any proxying, then yes, "Proxy Request Refused"
would make sense.  "Not found" doesn't, because the resource could be found,
not just through me.  

  I suppose I could serve up "Proxy Request Refused" ... 

> >   So my question here, does it make sense to have the order be:
> >
> > 	check request
> > 	check authorization
> > 	check redirection
> > 	check handlers
> >
> > to prevent possible leaking of data?  I'm thinking yes, but wouldn't mind
> > seeing a discussion.
> >
> 
> I think this is good. I don't know that there's an equivalent best
> practices in HTTP; I think this is all pretty implementation-defined. 

  I only thought of that as I refactoring my server code.  I think I will
make that change as it feels right to me as well.  Thanks.

  -spc


From sean@conman.org  Wed Sep 11 00:01:21 2019
From: sean@conman.org (Sean Conner)
Date: Tue, 10 Sep 2019 19:01:21 -0400
Subject: Client testing (was Re: Text reflow woes (or: I want bullets
 back!))
In-Reply-To: <20190819172114.GD28055@SDF.ORG>
References: <20190815081859.GB26532@SDF.ORG>
 <20190815235156.GC24356@brevard.conman.org>
 <CAFTy05YJoK4PCtwqofobvwUDh+gh6gEv4ci0m_5BHQojj+hNjQ@mail.gmail.com>
 <20190819075355.GI26287@brevard.conman.org> <20190819172114.GD28055@SDF.ORG>
Message-ID: <20190910230121.GD17809@brevard.conman.org>

It was thus said that the Great solderpunk once stated:
> 
> I've started a test client which you provide a hostname and it throws
> various requests at that host and checks the response status against its
> expectations.  It's not quite ready for prime time yet, though.

  How's the test client coming along?

> Although, it's already made me realise something that we haven't specced
> any behaviour for at all: how should a server respond to an empty
> request?  i.e. just CRLF.  Is this invalid, such that it should trigger
> a 59 response?  Some servers do this, but others seem to treat it as a
> request for the root document.

  Oh, another question I have.  Because my server treats that as an error,
and I think it should be an error---why not all servers currently support
multiple sites, it is possible, and without a URL to give the server name,
there's no way a multi-site server will know what to serve up.

  -spc


From lazar.michael22@gmail.com  Wed Sep 11 03:47:47 2019
From: lazar.michael22@gmail.com (Michael Lazar)
Date: Tue, 10 Sep 2019 22:47:47 -0400
Subject: Best practices in Gemini servers
In-Reply-To: <20190910193523.GA30060@brevard.conman.org>
References: <20190910020740.GL11998@brevard.conman.org>
 <874l1kostj.fsf@cassilda.carcosa.net>
 <20190910193523.GA30060@brevard.conman.org>
Message-ID: <CAFTy05YSFChRxvb0sy76b0Ar8Q8UFv9wS+hktukpOxastu7+9g@mail.gmail.com>

On Tue, Sep 10, 2019 at 3:35 PM Sean Conner <sean at conman.org> wrote:
> It was thus said that the Great Jason McBrayer once stated:
> > Sean Conner <sean at conman.org> writes:
> >
> > >   I'm currently returning a "Bad Request" for this, if the protocol, host
> > > and port don't match what is currently configured on my server.  The other
> > > possible status is "Proxy Request Refused".  My server doesn't do proxy
> > > requests.  What should the proper status code be?  Is "Bad Request" fine
> > > here?
> >
> > In my opinion, the Most Correct response to return would be "Proxy
> > Request Refused". If they had made the same request to a the right
> > server or if this server had been configured differently, it would have
> > succeeded, so the request isn't malformed or anything. But Bad Request
> > is probably the next-best response; Not Found would also make a kind of
> > sense.
>
>   Hmmm ... if my sever did any proxying, then yes, "Proxy Request Refused"
> would make sense.  "Not found" doesn't, because the resource could be found,
> not just through me.
>
>   I suppose I could serve up "Proxy Request Refused" ...

On Tue, Sep 10, 2019 at 3:35 PM Sean Conner <sean at conman.org> wrote:
> It was thus said that the Great Jason McBrayer once stated:
> > Sean Conner <sean at conman.org> writes:
> >
> > >   I'm currently returning a "Bad Request" for this, if the protocol, host
> > > and port don't match what is currently configured on my server.  The other
> > > possible status is "Proxy Request Refused".  My server doesn't do proxy
> > > requests.  What should the proper status code be?  Is "Bad Request" fine
> > > here?
> >
> > In my opinion, the Most Correct response to return would be "Proxy
> > Request Refused". If they had made the same request to a the right
> > server or if this server had been configured differently, it would have
> > succeeded, so the request isn't malformed or anything. But Bad Request
> > is probably the next-best response; Not Found would also make a kind of
> > sense.
>
>   Hmmm ... if my sever did any proxying, then yes, "Proxy Request Refused"
> would make sense.  "Not found" doesn't, because the resource could be found,
> not just through me.
>
>   I suppose I could serve up "Proxy Request Refused" ...

My server returns NOT FOUND only because it made the implementation simpler &
cleaner to use the same response code for all unmatched URLs. Either the server
can locate the resource specified by the given URL, or it can't. It feels
arbitrary to make a distinction on whether it's the path component or the
hostname or the scheme that doesn't match. Perhaps I should be using PERMANENT
FAILURE instead since it's the more general 5x error code.

From jmcbray@carcosa.net  Wed Sep 11 17:59:12 2019
From: jmcbray@carcosa.net (Jason McBrayer)
Date: Wed, 11 Sep 2019 16:59:12 +0000
Subject: Fwd: elpher now supports gemini
Message-ID: <a46af05e5d70b9719adc76690f3de4cb@www.carcosa.net>

Elpher, an emacs gopher client by lambdalabs, now supports Gemini. I saw the announcement here:

gopher://thelambdalab.xyz:70/0/phlog/2019-09-11-Elpher-now-supports-Gemini.txt

The project page is here: gopher://thelambdalab.xyz/1/projects/elpher/

Just to note, I'm not the author, though I've been a user of it since its initial release.

--
Jason McBrayer
jmcbray at carcosa.net

?Strange is the night where black stars rise,
and strange moons circle through the skies,
but stranger still is lost Carcosa.?
? Robert W. Chambers,The King in Yellow

From plugd@thelambdalab.xyz  Thu Sep 12 08:02:50 2019
From: plugd@thelambdalab.xyz (plugd)
Date: Thu, 12 Sep 2019 09:02:50 +0200
Subject: Fwd: elpher now supports gemini
In-Reply-To: <a46af05e5d70b9719adc76690f3de4cb@www.carcosa.net>
References: <a46af05e5d70b9719adc76690f3de4cb@www.carcosa.net>
Message-ID: <lz1rwmro85.fsf@bs-mbpr348.d.ethz.ch>

Hi Jason,

Jason McBrayer writes:

> Elpher, an emacs gopher client by lambdalabs, now supports Gemini. I
> saw the announcement here:

Thanks for posting this.  As I pointed out in that post the Gemini
support is still highly "experimental".  (I mean, there are only a
handful of servers out there to test it on - hopefully this will
change!)  So feedback is hugely welcome.

> Just to note, I'm not the author, though I've been a user of it since
> its initial release.

Nice to hear!  Feel free to send me any thoughts you have on the new
release.

Cheers,

plugd/lamdalabs/tim/whatever
(I'm going through a bit of a phlogosphere identity crisis here..)


From sean@conman.org  Fri Sep 13 00:39:06 2019
From: sean@conman.org (Sean Conner)
Date: Thu, 12 Sep 2019 19:39:06 -0400
Subject: [ANN] GLV-1.12556 Gemini Server now released
Message-ID: <20190912233906.GB18107@brevard.conman.org>


  I am finally releasing GLV-1.12556 [1], the server software responsible
for the gemini.conman.org server!  While the source code has always been
available via my Gemini server, it wasn't an easy download, but now it's up
on Github:

	https://github.com/spc476/GLV-1.12556

  From the README:

	Features:
	
	* Serves any type of document
	* Configurable filenames for default Gemini index files
	* Configurable extension for Gemini index files
	* Will create a Gemini index file for directories sans a Gemini index file
	* Support for CGI
	        * Gemini-specific CGI scripts
	        * HTTP-specific CGI scripts
	* Support for user directories
	* Authentication by client certificates
	* Easily extensible with support for custom handlers
	* Configuration via file
	
	Prerequisites:
	
	* Lua 5.3
	* LibreSSL 2.5.0 or higher
	* GNU libmagic (NOTE:  This is NOT image manipulation, but file
	        identification)
	* A whole bunch of Lua modules, availble at:
	        * https://github.com/spc476/lua-conmanorg
	        * https://github.com/spc476/LPeg-Parsers

  And maybe a feature, maybe a bug---it's GPL3+.

  If anyone has noticed some issues with my server over the past few days,
this is why---I have been busy with cleaning up the code and making sure
other people had a chance of running this.  It does include a client, but
it's "technically" a client---it just makes a single request you specify on
the command line (although it will follow rediects) and dumps it to stdout. 
That's it.  It's not pretty, but it was enough to test my server.

  So anyway, it's out there.  Have fun with it.

  -spc

[1]	Named after NASA's serial number for Gemini 1.

From plugd@thelambdalab.xyz  Fri Sep 13 08:38:04 2019
From: plugd@thelambdalab.xyz (plugd)
Date: Fri, 13 Sep 2019 09:38:04 +0200
Subject: IPv6 and gemini
Message-ID: <lzh85g3aub.fsf@bs-mbpr348.d.ethz.ch>

Hi all,

I've been having intermittent connection issues with some of the gemini
servers.  While this is of course to be expected at this point, it
seemed odd that, for instance, gemini://zaibatsu.circumlunar.space
seemed to be offline more often than not.  I finally got around to
looking at this more carefully, and noticed that using gnutls-cli to
open a connection to the IPv4 address always succeeds, whereas
connections to the IPv6 address that the resolver returns do not.
Since the network that I'm using supports IPv6 and falls back to IPv4
when necessary, this was causing a problem.

Furthermore, because of the requirement that clients transmit the full
URL to the server, it's not trivial to get around this by just directing
the client to the IPv4 address: the server probably won't recognise the
URL and will respond with an error code.

There seem to be four options:

1. Have clients only look at IPv4 addresses (i.e. ignore AAAA DNS
records).
 - Pro: would immediately solve the problem in this case.
 - Con: gemini gets stuck in the past.

2. Have clients do a reverse-DNS lookup when the gemini URL contains
an IP and use this to construct a URL to supply to the gemini server.
 - Pro: would allow clients to connect using URLs with literal IP
   addresses in them.
 - Cons:
    a) connecting via the hostname still wouldn't work.
    b) if a single server is hosting several gemini sites the result
       of the connection would be non-deterministic.
    
3. Have servers recognise IP URLs.
 - Pros and cons same as for 2.

4. Have servers ensure that if they have an AAAA record they also listen
for IPv6 gemini connections.
  - Pros: future-proof, no client-side changes necessary.
  - Con: some additional work necessary on the server side.

Obviously 4 is my favourite because it's less (no) work for me. :)

plugd


From sean@conman.org  Fri Sep 13 09:45:12 2019
From: sean@conman.org (Sean Conner)
Date: Fri, 13 Sep 2019 04:45:12 -0400
Subject: IPv6 and gemini
In-Reply-To: <lzh85g3aub.fsf@bs-mbpr348.d.ethz.ch>
References: <lzh85g3aub.fsf@bs-mbpr348.d.ethz.ch>
Message-ID: <20190913084512.GD18107@brevard.conman.org>

It was thus said that the Great plugd once stated:
> Hi all,
> 
> I've been having intermittent connection issues with some of the gemini
> servers.  While this is of course to be expected at this point, it
> seemed odd that, for instance, gemini://zaibatsu.circumlunar.space
> seemed to be offline more often than not.  I finally got around to
> looking at this more carefully, and noticed that using gnutls-cli to
> open a connection to the IPv4 address always succeeds, whereas
> connections to the IPv6 address that the resolver returns do not.
> Since the network that I'm using supports IPv6 and falls back to IPv4
> when necessary, this was causing a problem.
> 
> Furthermore, because of the requirement that clients transmit the full
> URL to the server, it's not trivial to get around this by just directing
> the client to the IPv4 address: the server probably won't recognise the
> URL and will respond with an error code.

  Worse than that:

[spc]lucy:~/projects/gemini/Lua>lua client.lua gemini://127.0.0.1/
ios:write() = name `127.0.0.1' not present in server certificate

  Of course, an option could be added to the client to overwrite the
hostname from the URL, so for example:

GenericUnixPrompt> geminiclient -h example.com gemini://127.0.0.1/

so it would use the IP address to connect, but instead of sending
'127.0.0.1' as the host, it would use the one passed in as an option.  That
might be easier said than done though [1].

> There seem to be four options:

  [ snip ]

> 4. Have servers ensure that if they have an AAAA record they also listen
> for IPv6 gemini connections.
>   - Pros: future-proof, no client-side changes necessary.
>   - Con: some additional work necessary on the server side.

  It depends.  On GLV-1.12556, all that takes is to use an address of "::"
to listen on all IPv4 and IPv6 interfaces, and that should work with any
modern IP stack.

  There is also a fifth option:

	5. Have clients attempt to connect to both addresses and use the one
	that connects first.
	- Pro: should always work
	- Con: complicates the client

> Obviously 4 is my favourite because it's less (no) work for me. :)

  I like 4 as well.

  -spc

[1]	Looking at my own very simplistic client and yeah, I would have to
	use a lower level API call to do that.  Ick.

From plugd@thelambdalab.xyz  Fri Sep 13 10:05:18 2019
From: plugd@thelambdalab.xyz (plugd)
Date: Fri, 13 Sep 2019 11:05:18 +0200
Subject: IPv6 and gemini
In-Reply-To: <20190913084512.GD18107@brevard.conman.org>
References: <lzh85g3aub.fsf@bs-mbpr348.d.ethz.ch>
 <20190913084512.GD18107@brevard.conman.org>
Message-ID: <lza7b836sx.fsf@bs-mbpr348.d.ethz.ch>


Sean Conner writes:

>> 4. Have servers ensure that if they have an AAAA record they also listen
>> for IPv6 gemini connections.
>>   - Pros: future-proof, no client-side changes necessary.
>>   - Con: some additional work necessary on the server side.
>
>   It depends.  On GLV-1.12556, all that takes is to use an address of "::"
> to listen on all IPv4 and IPv6 interfaces, and that should work with any
> modern IP stack.

I didn't want to presume. :-)

>   There is also a fifth option:
>
> 	5. Have clients attempt to connect to both addresses and use the one
> 	that connects first.
> 	- Pro: should always work
> 	- Con: complicates the client

Ideally this should already have been happening, but determining whether
a server is not listening is difficult, isn't it?  At some point you
have to simply define a timeout.  Which means that, unless you want
false negatives you have to wait a while (say a few seconds at least)
before declaring the connection a failure.  This is okay if it happens
once, but it'd be awful if this were happening for every single
selector.  Which means that clients would also have to implement some
local caching mechanism ...

>
>> Obviously 4 is my favourite because it's less (no) work for me. :)
>
>   I like 4 as well.

Yay!

plugd


From Bradley@NorthTech.US  Fri Sep 13 15:24:05 2019
From: Bradley@NorthTech.US (Bradley D. Thornton)
Date: Fri, 13 Sep 2019 07:24:05 -0700
Subject: Fwd: elpher now supports gemini
In-Reply-To: <lz1rwmro85.fsf@bs-mbpr348.d.ethz.ch>
References: <a46af05e5d70b9719adc76690f3de4cb@www.carcosa.net>
 <lz1rwmro85.fsf@bs-mbpr348.d.ethz.ch>
Message-ID: <e31903ff-4b55-4dcf-34dd-7a53af4ffb8a@NorthTech.US>



On 9/12/2019 12:02 AM, plugd wrote:
> Hi Jason,
> 
> Jason McBrayer writes:
> 
>> Elpher, an emacs gopher client by lambdalabs, now supports Gemini. I
>> saw the announcement here:
> 
> Thanks for posting this.  As I pointed out in that post the Gemini
> support is still highly "experimental".  (I mean, there are only a
> handful of servers out there to test it on - hopefully this will
> change!)  So feedback is hugely welcome.
> 

This is a really nice client, aside from the ability to easily check the
source that is served using the "." binding, and that's golden when
testing. I was thrown off a bit when I brought up zaibatsu and didn't
recognize anything - when you wear one lense, you won't see what you
already know because you're not looking through the lense that sees
another aspect.

Then it dawned on me that I was looking at a gophermap, so I figure it's
a Gegobi server. Pretty kewl how it does that.

The thing I like most about it includes my hope that my fav Gopher
clients integrate seamless Gemini support as you have. When I first
installed and fired it up, I stupidly made the assumption that, like
most of the Gemini clients, I could just ask for the hostname and the
URI would wrap it - duh! No! Obviously, because as soon as I typed in
the hostname of my server the Gopher site came up instead of the Gemini
site - as it should.

It's not a big deal prepending gemini:// anyway. I do wish it was easier
to determine the URL I'm currently at though. That will take some
getting used to not having it prominently displayed.

I made some observations and took some notes about the various servers,
and some of URLs being served up as well. First, before anyone starts
looking at what might be askew with the servers, I need to say that
while using the other Gemini client that I like so far, all sites come
up with no problem at all in Asuka.

1.) Okay first, I get a lot of this in Elpher:

<snip>
---- ERROR -----

When attempting to retrieve gemini://vger.cloud:
Gemini server reports PERMANENT FAILURE for this request.

----------------

Press 'u' to return to the previous page.
</snip>

2.) I experienced problems with gemini.conman.org loading beyond 1%.

3.) zaibatsu.circumlunar.space comes up, but it takes a while. Like I
said above, in Asuka, all sites come up rather quickly, although I can
tell the difference in the resources being served. In Elpher it can take
several seconds, however.

A feature of Elpher that I find really kewl is that it doesn't presume
it's okay to just plough ahead when it perceives there's something funky
with the cert, as illustrated in this image (I'm unable to select this
text in Elpher to paste it, if there's a way, please enlighten me):
https://bit.ly/2kKJCrv

That originally came up for gemini://conman.org (certificate/host
mismatch), because that's NOT the hostname the cert was issued for.
Again, Asuka and the other clients don't complain, but prolly should ;)
No warning when entering the correct URL of gemini://gemini.conman.org

If I reject the certificate for zaibatsu here's the server response I get:

<snip>


---- ERROR -----

When attempting to retrieve gemini://zaibatsu.circumlunar.space:
Wrong type argument: processp, nil.

----------------

Press 'u' to return to the previous page.

</snip>

It would be nice if Elpher would return the actual two-digit Gemini
error codes.

4.) gemini://carcosa.net - The only thing I can say is that it comes up
fast as lightning.

5.) gemini://heavysquare.com - very fast, but I do get the cert warning
saying it was signed by sectigo, a CA I've never heard of. That cert
warning in Elpher is really nice, if I haven't said so already!

6.) gemini://mozz.us - I get the following, and again, it would be nice
if Elpher displayed the actual two digit error codes. I've been running
Jetforce too, and my server uses a LetsEncrypt cert, so no surprise that
even though the connections are refused, there's no cert warning in
Elpher for either servers.

<snip>


---- ERROR -----

When attempting to retrieve gemini://mozz.us:
Gemini server reports PERMANENT FAILURE for this request.

----------------

</snip>

I can't help but wonder if this is because of an AAAA RR? My Jetforce
server is currently listening on 0.0.0.0 and I'm not sure if I can put
"::" in the startup script's configs like Sean mentioned earlier.

7.) gemini://dgold.eu - refuses the connection as well.

8.) gemini://typed-hole.org - I don't know which one's faster in
responding, this one or carcosa. I get a permanent failure on the links
to the games in Elpher, but the guestbook and lobst.rs links work fine.
This is a Pollux server.

9.) gemini://consensus.circumlunar.space - Connection refused (I could
swear it came up for me before in Elpher).

<snip>

---- ERROR -----

When attempting to retrieve gemini://consensus.circumlunar.space:
make client process failed: Connection refused, :name, elpher-process,
:buffer, #<killed buffer>, :host, consensus.circumlunar.space, :service,
1965, :nowait, nil, :tls-parameters, nil.

----------------

</snip>

10.) tilde.black and tilde.pink - both servers return Permanent failure.
Elpher warns  of a self-signed cert for tilde.pink (I'm don't remember,
but I may have cached the cert with an "a" for tilde.black). I haven't
tried either of those with Asuka yet, they've only been listed for less
than a week.

As far as the IPv4/IPv6 issue, I don't really think most of those
options should really be left to the author of the client software to
tackle, and think server support for binding "::" to the NIC to be the
best solution. Alternately, perhaps temporarily dropping the AAAA RR
temporarily, until the Gemini server supports IPv6 bindings, if there
aren't other services listening on the host.

I may have missed a few things here and there, but this is all really
just the result of playing around with Elpher, which, if I'm not really
careful, might get me to start saying nice things about Emacs ;)

I hope that helps :)


-- 
Bradley D. Thornton
Manager Network Services
http://NorthTech.US
TEL: +1.310.421.8268

From plugd@thelambdalab.xyz  Fri Sep 13 17:42:50 2019
From: plugd@thelambdalab.xyz (plugd)
Date: Fri, 13 Sep 2019 18:42:50 +0200
Subject: Fwd: elpher now supports gemini
In-Reply-To: <e31903ff-4b55-4dcf-34dd-7a53af4ffb8a@NorthTech.US>
References: <a46af05e5d70b9719adc76690f3de4cb@www.carcosa.net>
 <lz1rwmro85.fsf@bs-mbpr348.d.ethz.ch>
 <e31903ff-4b55-4dcf-34dd-7a53af4ffb8a@NorthTech.US>
Message-ID: <lz4l1gi1v9.fsf@bs-mbpr348.d.ethz.ch>

Hi Bradley,

Wow - I didn't expect such a detailed usage report!  Thank you very
much, this is incredibly useful.

I will go through all of your comments in detail later.  But at the
moment I want to rush out a quick reply to point out that some of the
"Gemini server reports PERMINANT FAILURE" errors might have been due to
a bug in the URL processing code.  I was mishandling the (important!)
edge case where the filename portion is empty, resulting in broken URLs
being sent to servers. This should now be fixed.

I agree that the the failed connection errors need cleaning up a bit.

I'm not sure what's causing zaibatsu to load slowly for you.  In my case
at the moment it's due to the IPv6 issues that I mentioned earlier.  (It
turns out that Emacs _does_ eventually fall back to the IPv4 address,
but only after a whole _minute_ or so of waiting.)  Is it possible that
your experience is just due to elpher not rendering anything until the
entire document is available?  (I would prefer not to have to do this,
but I'm not smart enough to figure out how to do this without breaking a
lot of the things I like about the current factoring of the code.)

Regarding the cert verification stuff: I'd love to take credit for this
but it is in fact just Emacs' defualt GnuTLS behaviour.  At some point I
hope to change this to reflect solderpunk's TOFU suggestion, as I expect
it'd get annoying when there are upwards of 100 or 1000 gemini servers
with different self-signed certificates.

Hopefully your server (which I don't think I'd stumbled on before)
should be accessible now following the URL parsing fixes.  I've also
added the URL of the current page to the header in the latest release,
so hopefully this also reduces confusion somewhat.


> As far as the IPv4/IPv6 issue, I don't really think most of those
> options should really be left to the author of the client software to
> tackle, and think server support for binding "::" to the NIC to be the
> best solution. Alternately, perhaps temporarily dropping the AAAA RR
> temporarily, until the Gemini server supports IPv6 bindings, if there
> aren't other services listening on the host.

I'm starting to think that this is more of an emacs networking issue.
While the problem does manifest with, for instance, AV-96, it's not
nearly as severe - there's "only" a 10-20s delay in the connection,
compared with a whole minute in emacs.  If only there were a way of
altering the default timeout used by emacs...

> I may have missed a few things here and there, but this is all really
> just the result of playing around with Elpher, which, if I'm not really
> careful, might get me to start saying nice things about Emacs ;)

Be careful, it's a slippery slope... :-P

> I hope that helps :)

It absolutely does!!

plugd

p.s. with the current release I have no problems with the following
servers:

* gemini://vger.cloud/
* gemini://tilde.black/
* gemini://tilde.pink/
* gemini://carcosa.net/
* gemini://heavysquare.com/
* gemini://mozz.us/
* gemini://typed-hole.org/
* gemini://zaibatsu.circumlunar.space/

The following I can't connect to at all (i.e. no server response):
* gemini://gopher.black/
* gemini://consensus.circumlunar.space/
* gemini://dgold.eu/

I cross-checked with AV-98 and got the same results.


From tomasino@lavabit.com  Fri Sep 13 17:55:00 2019
From: tomasino@lavabit.com (James Tomasino)
Date: Fri, 13 Sep 2019 16:55:00 +0000
Subject: Fwd: elpher now supports gemini
In-Reply-To: <lz4l1gi1v9.fsf@bs-mbpr348.d.ethz.ch>
References: <a46af05e5d70b9719adc76690f3de4cb@www.carcosa.net>
 <lz1rwmro85.fsf@bs-mbpr348.d.ethz.ch>
 <e31903ff-4b55-4dcf-34dd-7a53af4ffb8a@NorthTech.US>
 <lz4l1gi1v9.fsf@bs-mbpr348.d.ethz.ch>
Message-ID: <d4baf02d-0f67-f2f7-48a9-9c9e1b0fb8c3@lavabit.com>

On 9/13/19 4:42 PM, plugd wrote:
> p.s. with the current release I have no problems with the following
> servers:
> 
> * gemini://vger.cloud/
> ...
> 
> The following I can't connect to at all (i.e. no server response):
> * gemini://gopher.black/
> * gemini://consensus.circumlunar.space/
> * gemini://dgold.eu/

gopher.black is not currently running a gemini server. It was only a
short-term test. It may return, but don't let it cloud your test results.


From plugd@thelambdalab.xyz  Fri Sep 13 21:02:28 2019
From: plugd@thelambdalab.xyz (plugd)
Date: Fri, 13 Sep 2019 22:02:28 +0200
Subject: URLs in request lines
Message-ID: <lz8sqsx8vf.fsf@bs-mbpr348.d.ethz.ch>

Hi all,

This question occurred to me when debugging some 5x error responses from
servers: how strictly are servers expected to be when responding to
requests?  In particular, if a client is given a URL such as

gemini://example.com

(i.e. with an empty file name) is it expected to translate it into

gemini://example.com/  ?

The gopher-side of elpher tends to be on the strict side when
representing URLs, due to RFC 1436 strongly emphasizing that gopher
selectors should be regarded as meaningless "opaque" strings which
aren't to be messed with. (Kind of like actor addresses in the actor
model of computation.) So there is _no_ guarantee that a server will
return something sensible for the selector taken from the URL
gopher://example.com/1/ if all you've been given is
gopher://example.com/1.

Should I keep this behaviour for gemini too?  TBH I'd prefer to at least
to able to interpret gemini://exmaple.com as gemini://example.com/ when
no filename is present, and leave everything else alone.  Which would
mean the "/" selector would become the equivalent of "" in gopher.

plugd


From sean@conman.org  Fri Sep 13 21:42:10 2019
From: sean@conman.org (Sean Conner)
Date: Fri, 13 Sep 2019 16:42:10 -0400
Subject: URLs in request lines
In-Reply-To: <lz8sqsx8vf.fsf@bs-mbpr348.d.ethz.ch>
References: <lz8sqsx8vf.fsf@bs-mbpr348.d.ethz.ch>
Message-ID: <20190913204209.GE18107@brevard.conman.org>

It was thus said that the Great plugd once stated:
> Hi all,
> 
> This question occurred to me when debugging some 5x error responses from
> servers: how strictly are servers expected to be when responding to
> requests?  In particular, if a client is given a URL such as
> 
> gemini://example.com
> 
> (i.e. with an empty file name) is it expected to translate it into
> 
> gemini://example.com/  ?

  Yes.  In RFC-3986, if you follow the BNF, you'll find this bit:

   URI           = scheme ":" hier-part [ "?" query ] [ "#" fragment ]

   hier-part     = "//" authority path-abempty
                 / path-absolute
                 / path-rootless
                 / path-empty

   path-abempty  = *( "/" segment )

  When parsing a URL like:

	gemini://example.com

we have the 'scheme' portion, then the two '//' which means we're following
the first rule in 'hier-part'.  'authority' is the host part (which I didn't
include) followed by a 'path-abempty', of which there can be 0 or more of,
so that's a perfectly cromulent URL.  It's the responsibility of the
*server* to handle the situation, not the client.

  Semantically speaking, these:

	gemini://example.com
	gemini://example.com/

are the same.

  A related problem is a relative URL like:

	/test/torture/../../test/./torture/../../../../test/./././torture/./0022

  That collapses down to:

	/test/torture/0022

but in this case, I think it would be the responsibiliy of the *client* to
collapse the first into the second (and then add the scheme, host, etc.).  I
know my own server does the collapsing, but I think I may change that.

  -spc

From plugd@thelambdalab.xyz  Fri Sep 13 22:01:45 2019
From: plugd@thelambdalab.xyz (plugd)
Date: Fri, 13 Sep 2019 23:01:45 +0200
Subject: URLs in request lines
In-Reply-To: <20190913204209.GE18107@brevard.conman.org>
References: <lz8sqsx8vf.fsf@bs-mbpr348.d.ethz.ch>
 <20190913204209.GE18107@brevard.conman.org>
Message-ID: <lz7e6bykp2.fsf@bs-mbpr348.d.ethz.ch>

Sean Conner writes:
> It was thus said that the Great plugd once stated:
>> Hi all,
>> 
>> This question occurred to me when debugging some 5x error responses from
>> servers: how strictly are servers expected to be when responding to
>> requests?  In particular, if a client is given a URL such as
>> 
>> gemini://example.com
>> 
>> (i.e. with an empty file name) is it expected to translate it into
>> 
>> gemini://example.com/  ?
>
>   Yes.  In RFC-3986, if you follow the BNF, you'll find this bit:

[snip]

Great, thank you for the explanation.  (I should have RTFM, sorry!)

>
> we have the 'scheme' portion, then the two '//' which means we're following
> the first rule in 'hier-part'.  'authority' is the host part (which I didn't
> include) followed by a 'path-abempty', of which there can be 0 or more of,
> so that's a perfectly cromulent URL.  It's the responsibility of the
> *server* to handle the situation, not the client.

Converting to this canonical form actually makes several things easier
on the client side too.

>   A related problem is a relative URL like:
>
> 	/test/torture/../../test/./torture/../../../../test/./././torture/./0022
>
>   That collapses down to:
>
> 	/test/torture/0022
>
> but in this case, I think it would be the responsibiliy of the *client* to
> collapse the first into the second (and then add the scheme, host, etc.).  I
> know my own server does the collapsing, but I think I may change that.

Fair enough.  The URL library elpher uses doesn't automatically do this,
but it seems simple enough to do (famous last words)..

Thanks for the help,

plugd


From sean@conman.org  Fri Sep 13 22:01:48 2019
From: sean@conman.org (Sean Conner)
Date: Fri, 13 Sep 2019 17:01:48 -0400
Subject: Fwd: elpher now supports gemini
In-Reply-To: <e31903ff-4b55-4dcf-34dd-7a53af4ffb8a@NorthTech.US>
References: <a46af05e5d70b9719adc76690f3de4cb@www.carcosa.net>
 <lz1rwmro85.fsf@bs-mbpr348.d.ethz.ch>
 <e31903ff-4b55-4dcf-34dd-7a53af4ffb8a@NorthTech.US>
Message-ID: <20190913210148.GF18107@brevard.conman.org>

It was thus said that the Great Bradley D. Thornton once stated:
> 
> 2.) I experienced problems with gemini.conman.org loading beyond 1%.

  What type of problem?  I've been making a lot of changes to the server
code recently and there might be issues that aren't client releated but
server releated.  

> 3.) zaibatsu.circumlunar.space comes up, but it takes a while. Like I
> said above, in Asuka, all sites come up rather quickly, although I can
> tell the difference in the resources being served. In Elpher it can take
> several seconds, however.

  Of the servers, I get:

gemini://gemini.conman.org/		comes up quick [1]
gemini://zaibatsu.circumlunar.space/	comes up quick
gemini://carcosa.net/			comes up quick
gemini://heavysquare.com/		comes up quick
gemini://mozz.us/			comes up quick
gemini://dgold.eu/			error: cannot connect to dgold.eu
gemini://typed-hole.org/		comes up quick
gemini://gopher.black/			(gone---mentioned in another email)
gemini://tilde.black/			comes up quick
gemini://consensus.circumlunar.space/	error: cannot connect to consensus.circumlunar.space
gemini://tilde.pink/			comes up quick
gemini://165.22.178.247/		comes up quick (but returns status 51)
gemini://vger.cloud/			comes up quick

  And of certificates:

gemini://gemini.conman.org/		unknown CA [2]
gemini://zaibatsu.circumlunar.space/	self-signed
gemini://carcosa.net/			self-signed
gemini://heavysquare.com/		unknown CA
gemini://mozz.us/			valid
gemini://dgold.eu/			N/A (can't connect)
gemini://typed-hole.org/		self-signed
gemini://gopher.black/			N/A (gone)
gemini://tilde.black/			valid
gemini://consensus.circumlunar.space/	N/A (can't connect)
gemini://tilde.pink/			self-signed
gemini://165.22.178.247/		self-signed
gemini://vger.cloud/			valid



> A feature of Elpher that I find really kewl is that it doesn't presume
> it's okay to just plough ahead when it perceives there's something funky
> with the cert, as illustrated in this image (I'm unable to select this
> text in Elpher to paste it, if there's a way, please enlighten me):
> https://bit.ly/2kKJCrv
> 
> That originally came up for gemini://conman.org (certificate/host
> mismatch), because that's NOT the hostname the cert was issued for.

  Yup.  I don't know how to create a certificate for multiple hostnames.

> Again, Asuka and the other clients don't complain, but prolly should ;)

  Probably, but if you aren't doing certificate validation (to get around
the whole "self-signed" thing, perhaps it's a moot point?)

  -spc

[1]	It better for me.  I wrote the server.

[2]	I have my own private CA I signed the certificate with.

From sean@conman.org  Fri Sep 13 22:02:55 2019
From: sean@conman.org (Sean Conner)
Date: Fri, 13 Sep 2019 17:02:55 -0400
Subject: Fwd: elpher now supports gemini
In-Reply-To: <lz4l1gi1v9.fsf@bs-mbpr348.d.ethz.ch>
References: <a46af05e5d70b9719adc76690f3de4cb@www.carcosa.net>
 <lz1rwmro85.fsf@bs-mbpr348.d.ethz.ch>
 <e31903ff-4b55-4dcf-34dd-7a53af4ffb8a@NorthTech.US>
 <lz4l1gi1v9.fsf@bs-mbpr348.d.ethz.ch>
Message-ID: <20190913210255.GG18107@brevard.conman.org>

It was thus said that the Great plugd once stated:
> p.s. with the current release I have no problems with the following
> servers:
> 
> * gemini://vger.cloud/
> * gemini://tilde.black/
> * gemini://tilde.pink/
> * gemini://carcosa.net/
> * gemini://heavysquare.com/
> * gemini://mozz.us/
> * gemini://typed-hole.org/
> * gemini://zaibatsu.circumlunar.space/
> 
> The following I can't connect to at all (i.e. no server response):
> * gemini://gopher.black/
> * gemini://consensus.circumlunar.space/
> * gemini://dgold.eu/
> 
> I cross-checked with AV-98 and got the same results.

  You're missing <gemini://gemini.conman.org> from that list.

  -spc (I'm just saying ... )

From sean@conman.org  Fri Sep 13 22:06:02 2019
From: sean@conman.org (Sean Conner)
Date: Fri, 13 Sep 2019 17:06:02 -0400
Subject: URLs in request lines
In-Reply-To: <lz7e6bykp2.fsf@bs-mbpr348.d.ethz.ch>
References: <lz8sqsx8vf.fsf@bs-mbpr348.d.ethz.ch>
 <20190913204209.GE18107@brevard.conman.org>
 <lz7e6bykp2.fsf@bs-mbpr348.d.ethz.ch>
Message-ID: <20190913210602.GH18107@brevard.conman.org>

It was thus said that the Great plugd once stated:
> Sean Conner writes:
> >   A related problem is a relative URL like:
> >
> > 	/test/torture/../../test/./torture/../../../../test/./././torture/./0022
> >
> >   That collapses down to:
> >
> > 	/test/torture/0022
> >
> > but in this case, I think it would be the responsibiliy of the *client* to
> > collapse the first into the second (and then add the scheme, host, etc.).  I
> > know my own server does the collapsing, but I think I may change that.
> 
> Fair enough.  The URL library elpher uses doesn't automatically do this,
> but it seems simple enough to do (famous last words)..

  The algorithm for that is described in  RFC-3986, section 5.2.4.  If you
can handle the examples from the RFC, you should be good to go.

  -spc


From plugd@thelambdalab.xyz  Fri Sep 13 22:36:04 2019
From: plugd@thelambdalab.xyz (plugd)
Date: Fri, 13 Sep 2019 23:36:04 +0200
Subject: Fwd: elpher now supports gemini
In-Reply-To: <20190913210255.GG18107@brevard.conman.org>
References: <a46af05e5d70b9719adc76690f3de4cb@www.carcosa.net>
 <lz1rwmro85.fsf@bs-mbpr348.d.ethz.ch>
 <e31903ff-4b55-4dcf-34dd-7a53af4ffb8a@NorthTech.US>
 <lz4l1gi1v9.fsf@bs-mbpr348.d.ethz.ch>
 <20190913210255.GG18107@brevard.conman.org>
Message-ID: <lzv9tvq3p7.fsf@bs-mbpr348.d.ethz.ch>

Sean Conner writes:
>   You're missing <gemini://gemini.conman.org> from that list.

Woops!  The funny thing is that it's only missing because I was ticking
off the links listed at the bottom of _your page!_ :-) But for
completeness, here's the _complete_ list of elpher-approved servers:

> * gemini://vger.cloud/
> * gemini://tilde.black/
> * gemini://tilde.pink/
> * gemini://carcosa.net/
> * gemini://heavysquare.com/
> * gemini://mozz.us/
> * gemini://typed-hole.org/
> * gemini://zaibatsu.circumlunar.space/
* gemini://gemini.conman.org/

plugd


From plugd@thelambdalab.xyz  Sat Sep 14 09:02:16 2019
From: plugd@thelambdalab.xyz (plugd)
Date: Sat, 14 Sep 2019 10:02:16 +0200
Subject: URLs in request lines
In-Reply-To: <20190913204209.GE18107@brevard.conman.org>
References: <lz8sqsx8vf.fsf@bs-mbpr348.d.ethz.ch>
 <20190913204209.GE18107@brevard.conman.org>
Message-ID: <lzpnk3tiev.fsf@bs-mbpr348.d.ethz.ch>

Hi again Sean,

Sean Conner writes:
> we have the 'scheme' portion, then the two '//' which means we're following
> the first rule in 'hier-part'.  'authority' is the host part (which I didn't
> include) followed by a 'path-abempty', of which there can be 0 or more of,
> so that's a perfectly cromulent URL.  It's the responsibility of the
> *server* to handle the situation, not the client.

I just read over this again and realised I'd been too hasty in my
earlier response.  You point out that according to the URI RFC an empty
path is a valid URL, and while this is good to know, does the following
necessarily follow?

>   Semantically speaking, these:
>
> 	gemini://example.com
> 	gemini://example.com/
>
> are the same.

For gopher, gopher://example.com/1 and gopher://example.com/1/ are not
semantically the same. (Although they are often - but not always -
treated as such.)  Section 6.2.3 on scheme-based normalization notes
that http://example.com and http://example.com/ are semantically
equivalent, and goes on to suggest that URIs of other schemes _should_
follow this example.  So I suppose we now say that gemini does?

plugd


From sean@conman.org  Sat Sep 14 10:50:26 2019
From: sean@conman.org (Sean Conner)
Date: Sat, 14 Sep 2019 05:50:26 -0400
Subject: URLs in request lines
In-Reply-To: <lzpnk3tiev.fsf@bs-mbpr348.d.ethz.ch>
References: <lz8sqsx8vf.fsf@bs-mbpr348.d.ethz.ch>
 <20190913204209.GE18107@brevard.conman.org>
 <lzpnk3tiev.fsf@bs-mbpr348.d.ethz.ch>
Message-ID: <20190914095026.GJ18107@brevard.conman.org>

It was thus said that the Great plugd once stated:
> Hi again Sean,

 Hello, plugd.

> Sean Conner writes:
> > we have the 'scheme' portion, then the two '//' which means we're following
> > the first rule in 'hier-part'.  'authority' is the host part (which I didn't
> > include) followed by a 'path-abempty', of which there can be 0 or more of,
> > so that's a perfectly cromulent URL.  It's the responsibility of the
> > *server* to handle the situation, not the client.
> 
> I just read over this again and realised I'd been too hasty in my
> earlier response.  You point out that according to the URI RFC an empty
> path is a valid URL, and while this is good to know, does the following
> necessarily follow?
> 
> >   Semantically speaking, these:
> >
> > 	gemini://example.com
> > 	gemini://example.com/
> >
> > are the same.
> 
> For gopher, gopher://example.com/1 and gopher://example.com/1/ are not
> semantically the same. (Although they are often - but not always -
> treated as such.)  Section 6.2.3 on scheme-based normalization notes
> that http://example.com and http://example.com/ are semantically
> equivalent, and goes on to suggest that URIs of other schemes _should_
> follow this example.  So I suppose we now say that gemini does?

  The URL spec is RFC-3986.  Gopher gets its own URL RFC with RFC-4266.  One
major difference is in the query portion.  To send in a "query" string with
a non-gopher URL, you do:

	http://example.com/?search%20for%20me     (yes, this is valid)

  The same example for Gopher would be:

	gopher://example.com/7search%09look%20for%20me

  It does NOT use the normal query syntax for URLs.  In fact, RFC-4266 even
states:

   A Gopher URL takes the form:

      gopher://<host>:<port>/<gopher-path>

   ...

   Within the <gopher-path>, no characters are reserved.

  So the intent (in my opinion) is that one can decode the <gopher-path>
portion and pass it (minus the first character) verbatim to a gopher server
(of course after decoding any URL-encoded characters, which means that %09
is translated to an ASCII HT (horizontal tab).  Had Gopher been more in line
with URL-3986, then a gopher URL might be more like:

	gopher://example.com/7search?look%20for%20me

but I suspect this wasn't done because of Gopher+, which is covered in
RFC-4266 but I don't know of *any* servers today that support it (although
I'm willing to be corrected on that).  The Gopher+ information, is, of
course, separated from the search portion by another %09 in the URL (see
RFC-4266 section 2.9 for a crazy example of that).

  So, the upshot (as I see it) is that the gopher URL format is divorced
from the RFC-3986 URL and is its own thing.  You can't really say they have
the same semantic rules.  This is also reflected in the caps.txt file you
will sometimes find on gopher servers to address the bit in RFC-1436 that
gopher selectors are opaque and *no* meaning is to be inferred by the
client.

  As far as Gemini goes, I've been parsing Gemini URLs under RFC-3986, just
like http:, https:, ftp: and file:.

  -spc (Did that answer your question?)

From sean@conman.org  Sat Sep 14 11:04:30 2019
From: sean@conman.org (Sean Conner)
Date: Sat, 14 Sep 2019 06:04:30 -0400
Subject: URLs in request lines
In-Reply-To: <20190914095026.GJ18107@brevard.conman.org>
References: <lz8sqsx8vf.fsf@bs-mbpr348.d.ethz.ch>
 <20190913204209.GE18107@brevard.conman.org>
 <lzpnk3tiev.fsf@bs-mbpr348.d.ethz.ch>
 <20190914095026.GJ18107@brevard.conman.org>
Message-ID: <20190914100430.GK18107@brevard.conman.org>

It was thus said that the Great Sean Conner once stated:
>
>   So, the upshot (as I see it) is that the gopher URL format is divorced
> from the RFC-3986 URL and is its own thing.  You can't really say they have
> the same semantic rules.  This is also reflected in the caps.txt file you
> will sometimes find on gopher servers to address the bit in RFC-1436 that
> gopher selectors are opaque and *no* meaning is to be inferred by the
> client.
> 
>   As far as Gemini goes, I've been parsing Gemini URLs under RFC-3986, just
> like http:, https:, ftp: and file:.

  To further clarify things, I have one module to parse gopher URLs [1], and
another one to parse other URLs [2].  And because of how they were written,
I can parse both types of URLs very easily:

	local dump = require "org.conman.table".dump
	local url  = require "org.conman.parsers.url.gopher"
	           + require "org.conman.parsers.url" -- [3]

	dump("link",url:match "gopher://example.com/7search%09look%20for%20me")
	dump("link",url:match "gemini://example.com/search?look%20for%20me")

	link =
	{
	  type = "search",
	  port = 70.000000,
	  scheme = "gopher",
	  host = "example.com",
	  search = "look for me",
	  selector = "search",
	}
	
	link =
	{
	  port = 1965.000000,
	  scheme = "gemini",
	  host = "example.com",
	  path = "/search",
	  query = "look%20for%20me", -- [4]
	}

  A generic parsing of the gopher URL will result in:

	link =
	{
	  scheme = "gopher",
	  host = "example.com",
	  path = "/7search\tlook for me",
	}

  -spc (Gopher really is its own thing ... )

[1]	https://github.com/spc476/LPeg-Parsers/blob/master/url/gopher.lua

[2]	https://github.com/spc476/LPeg-Parsers/blob/master/url.lua

[3]	Yes, I'm adding the results of loading two modules.  This only works
	because of what I'm returning (an LPEG expression [5]), and yes, it
	would look weird to a seasoned Lua programmer.

[4]	I have reasons for not decoding the query string in generic URLs.

[5]	http://www.inf.puc-rio.br/~roberto/lpeg/

From plugd@thelambdalab.xyz  Sat Sep 14 11:44:32 2019
From: plugd@thelambdalab.xyz (plugd)
Date: Sat, 14 Sep 2019 12:44:32 +0200
Subject: URLs in request lines
In-Reply-To: <20190914095026.GJ18107@brevard.conman.org>
References: <lz8sqsx8vf.fsf@bs-mbpr348.d.ethz.ch>
 <20190913204209.GE18107@brevard.conman.org>
 <lzpnk3tiev.fsf@bs-mbpr348.d.ethz.ch>
 <20190914095026.GJ18107@brevard.conman.org>
Message-ID: <lzd0g3w41b.fsf@bs-mbpr348.d.ethz.ch>

Sean Conner writes:
>   So, the upshot (as I see it) is that the gopher URL format is divorced
> from the RFC-3986 URL and is its own thing.  You can't really say they have
> the same semantic rules.  This is also reflected in the caps.txt file you
> will sometimes find on gopher servers to address the bit in RFC-1436 that
> gopher selectors are opaque and *no* meaning is to be inferred by the
> client.

Completely agree that gopher is special here, but my reading of RFC-3986
section 6.2.3 was that itactually allows for some scheme-dependent
behaviour anyway.

>   As far as Gemini goes, I've been parsing Gemini URLs under RFC-3986, just
> like http:, https:, ftp: and file:.
>
>   -spc (Did that answer your question?)

You almost certainly have answered my question, but I'm being really
daft and still not getting it.  (Feel free to give up!) I'm not asking
about what constitutes a valid gemini URL and more about whether it's
already been decided that a server which responds with a 2x status for
gemini://example.com/ must also respond with a 2x (and the same
document) for gemini://example.com - even though they're both valid
URLs.  Or are you saying that this semantic equivalence is already
mandated by RFC-3986?

plugd


From sean@conman.org  Sat Sep 14 23:36:37 2019
From: sean@conman.org (Sean Conner)
Date: Sat, 14 Sep 2019 18:36:37 -0400
Subject: URLs in request lines
In-Reply-To: <lzd0g3w41b.fsf@bs-mbpr348.d.ethz.ch>
References: <lz8sqsx8vf.fsf@bs-mbpr348.d.ethz.ch>
 <20190913204209.GE18107@brevard.conman.org>
 <lzpnk3tiev.fsf@bs-mbpr348.d.ethz.ch>
 <20190914095026.GJ18107@brevard.conman.org>
 <lzd0g3w41b.fsf@bs-mbpr348.d.ethz.ch>
Message-ID: <20190914223637.GL18107@brevard.conman.org>


  The TL;DR of this would be:  the following two URLs SHOULD be the same and
serve up the same page:

        gemini://example.com
        gemini://example.com/ 

  What's below is my thought process leading up to that.

It was thus said that the Great plugd once stated:
> Sean Conner writes:
> >   So, the upshot (as I see it) is that the gopher URL format is divorced
> > from the RFC-3986 URL and is its own thing.  You can't really say they have
> > the same semantic rules.  This is also reflected in the caps.txt file you
> > will sometimes find on gopher servers to address the bit in RFC-1436 that
> > gopher selectors are opaque and *no* meaning is to be inferred by the
> > client.
> 
> Completely agree that gopher is special here, but my reading of RFC-3986
> section 6.2.3 was that itactually allows for some scheme-dependent
> behaviour anyway.

You are right (now that I'm rereading that section).

> >   As far as Gemini goes, I've been parsing Gemini URLs under RFC-3986, just
> > like http:, https:, ftp: and file:.
> >
> >   -spc (Did that answer your question?)
> 
> You almost certainly have answered my question, but I'm being really
> daft and still not getting it.  (Feel free to give up!) 

  Give up?  Never give up!  Never surrender!  By Grabthar's hammer, by the
suns Worvan, you shall be avenged!

  Oh, sorry.  Got carried away there.

  No, this is good.  I'm having to clarify my own thoughts on this.  You
have no idea how much I've written and deleted in writing this reply.

> I'm not asking
> about what constitutes a valid gemini URL and more about whether it's
> already been decided that a server which responds with a 2x status for
> gemini://example.com/ must also respond with a 2x (and the same
> document) for gemini://example.com - even though they're both valid
> URLs.  Or are you saying that this semantic equivalence is already
> mandated by RFC-3986?

  Technically speaking, these two URLs are NOT the same:

	http://example.com/foo
	http://example.com/foo/

and a webserver could technically serve up different content for the two
requests.  But RFC-3986, section 6.2.3 states that the following are the
same for http:

	http://example.com
	http://example.com/

  The question you are asking is---are the these two examples the same for
Gemini?

	gemini://example.com
	gemini://example.com/

  Again, per RFC-3986, they are (unless some document describing Gemini URLs
states otherwise).  I naturally assumed they would be as they are for HTTP.
That's perhaps an unwarrented assumption, but I would have to think the two
*are* the same, because of the nature of URLs.

  The *only* character that can follow the authority section (hostname,
port, etc) of a URL is the slash.  There is no other valid character that
can go there.  So while it is possible for a Gemini server to serve up two
different resources for the example above, that would, in my opinion,
violate the rule of least surprise.  Even with gopher URLs, RFC-4266,
section 2.1 says the following are the same:

	gopher://example.com
	gopher://example.com/
	gopher://example.com/1

  The slash between the authority section and the selector is required not
only by URL parsing rules, but because there are alphaebtic gopher types. 
Also, RFC-1436 (Introduction) states that gopher selectors are opaque and
have no meaning, so the following two are distinct resources:

	gopher://example.com/1
	gopher://example.com/1/

  Addtionally, these *are* already covered by RFC-3986 (first example
above), but I digress.  So while technically what you say is true (two
different resources) I would recommend against it (rule of least surprise).

  With that out of the way, I do handle the lack of a trailing slash with
the request <gemini://gemini.conman.org> in GLV-1.12556 by sending out a
redirect.  I think mine is the only server that actually does something
different than serve up the top level page [1]. I also do that for any
requests that map to a directory that don't end in a slash [2].

  -spc (Did this answer your question?)

[1]	I tried all other known Gemini servers by just requesting, say:

		gemini://mozz.us

	And they all returned their default page.

[2]	RFC-3986, section 6.2.4.  The Apache web server even has code to
	deal when you give a URL to a filesystem directory that doesn't end
	in a slash:

		A "trailing slash" redirect is issued when the server
		receives a request for a URL http://servername/foo/dirname
		where dirname is a directory.  Directories require a
		trailing slash, so mod_dir issues a redirect to
		http://servername/foo/dirname/.

		http://httpd.apache.org/docs/2.4/mod/mod_dir.html

	I even had to deal with this in GLV-1.12556 to properly handle
	client certificates with respect to the rule of least surprise.


From Bradley@NorthTech.US  Sun Sep 15 06:18:55 2019
From: Bradley@NorthTech.US (Bradley D. Thornton)
Date: Sat, 14 Sep 2019 22:18:55 -0700
Subject: URLs in request lines
In-Reply-To: <20190914223637.GL18107@brevard.conman.org>
References: <lz8sqsx8vf.fsf@bs-mbpr348.d.ethz.ch>
 <20190913204209.GE18107@brevard.conman.org>
 <lzpnk3tiev.fsf@bs-mbpr348.d.ethz.ch>
 <20190914095026.GJ18107@brevard.conman.org>
 <lzd0g3w41b.fsf@bs-mbpr348.d.ethz.ch>
 <20190914223637.GL18107@brevard.conman.org>
Message-ID: <64ee97db-aa30-de39-4f80-5d02ebb6ef85@NorthTech.US>



On 9/14/2019 3:36 PM, Sean Conner wrote:
> 
>   The TL;DR of this would be:  the following two URLs SHOULD be the same and
> serve up the same page:
> 
>         gemini://example.com
>         gemini://example.com/ 
> 
>   What's below is my thought process leading up to that.
> 
> 
>   Technically speaking, these two URLs are NOT the same:
> 
> 	http://example.com/foo
> 	http://example.com/foo/
> 
> and a webserver could technically serve up different content for the two
> requests.

And that does happen sometimes in the real world, and confuses people.
To me, the trailing slash forces the implication that you're looking for
an index file in that particular directory, whatever kind is specified
by httpd, rather than a file named foo.

After all, there could exist, both a directory *AND* a file named 'foo'.


> But RFC-3986, section 6.2.3 states that the following are the
> same for http:
> 
> 	http://example.com
> 	http://example.com/
>

And IMO, they should be treated as such, but are sometimes not. I've
received 404's on occsion when omitting the trailing slash, and just got
into the habit of (most often) putting it there when I type in an URL.

But your example above isn't the same as the example above that ;)

I do my very best when referring to directory structure to practice this
too. If nothing else, I get to omit the word, "directory" in Howto's and
tuts or procedural documents I write. After all, without using the word
'directory', or using the trailing slash, one *could* be referring to a
regular file type instead of a directory file type ;)


>   The question you are asking is---are the these two examples the same for
> Gemini?
> 
> 	gemini://example.com
> 	gemini://example.com/
> 
>   Again, per RFC-3986, they are (unless some document describing Gemini URLs
> states otherwise).  I naturally assumed they would be as they are for HTTP.
> That's perhaps an unwarrented assumption, but I would have to think the two
> *are* the same, because of the nature of URLs.

What about:
     gemini://example.com/foo
     gemini://example.com/foo/

In the first example, couldn't that refer to either a request for either
an index.gmi in foo/ or a file in / called foo?

I'm not proposing anything. I'm just asking.

> 
>   The *only* character that can follow the authority section (hostname,
> port, etc) of a URL is the slash.  There is no other valid character that
> can go there.  So while it is possible for a Gemini server to serve up two
> different resources for the example above, that would, in my opinion,
> violate the rule of least surprise.  Even with gopher URLs, RFC-4266,
> section 2.1 says the following are the same:
> 
> 	gopher://example.com
> 	gopher://example.com/
> 	gopher://example.com/1
> 
>   The slash between the authority section and the selector is required not
> only by URL parsing rules, but because there are alphaebtic gopher types. 
> Also, RFC-1436 (Introduction) states that gopher selectors are opaque and
> have no meaning, so the following two are distinct resources:
> 
> 	gopher://example.com/1
> 	gopher://example.com/1/

Hm... I don't know that I know the difference there.Perhaps I should
read up in the appropriate section of the RFC below. If that URI were
for HTTP, it would be saying, "Give me the file named '1'. Actually,
before I over think this, it would mean the same thing in HTTP.

> 
>   Addtionally, these *are* already covered by RFC-3986 (first example
> above), but I digress.  So while technically what you say is true (two
> different resources) I would recommend against it (rule of least surprise).
> 

ANYWAY...

I've been invited over to another farm tonight to do some Drinkin'
Lincoln, and I know they've got good sippin' whiskey there lolz.

I've finished fiddling with the main gophermap on gopher://Vger.Cloud
and one client is giving me errors about:

<snip>
sh: 1: Syntax error: "(" unexpected
</snip>

And I have no idea where the heck that is. It's the only client slinging
that error to me and it was giving me two of those, so I apparently, and
somehow inadvertently, fixed one of those errors. I see no open paren's
without a corrsponding closing paren, and then, only in the raw text of
a sentence.

I also Gave Tim a good plug for Elpher both there and on V'Ger's Gemini
site. I really like that browser :)

I also botched my install of Elpher, so maybe could use a little guidance ;)

While upgrading from 2.2.0 yesterday, I found out that I got a little
impatient and didn't terminate the upgrade with an 'x', after the 'u' to
upgrade, and C-Xc'd out. That left both versions installed, and now,
even though I've ripped it out and reinstalled it several times
(including at one point to del the directory (elpher, IIRC) in emacs.d/
and now I am forever not able to get anything but:

<snip>
LOADING GEMINI... (use 'u' to cancel)
</snip>

At least gemini://vger.cloud gives me a definitive 51 error :)

<snip>

---- ERROR -----

When attempting to retrieve gemini://vger.cloud/:
Gemini server reports PERMANENT FAILURE for this request: "51	Not Found".

----------------

Press 'u' to return to the previous page.

</snip>

It's frustrating, because I'm not sure why, and every other single
client brings both sites up just dandy like. And I'm not trying to
access my server w/Elpher from localhost, if that's relevant.

That should answer your question too from yesterday about the errors
with your site Sean ;)

I promise to be patient from now one when updating Melpa packages, and
would like to avoid ripping out Emacs by it's fdisking throat and
re-installing, so if someone's got any clues to fix it in situ, please,
do let me know. I promise to be good next time lol.

-- 
Bradley D. Thornton
Manager Network Services
http://NorthTech.US
TEL: +1.310.421.8268

From sean@conman.org  Sun Sep 15 07:06:17 2019
From: sean@conman.org (Sean Conner)
Date: Sun, 15 Sep 2019 02:06:17 -0400
Subject: URLs in request lines
In-Reply-To: <64ee97db-aa30-de39-4f80-5d02ebb6ef85@NorthTech.US>
References: <lz8sqsx8vf.fsf@bs-mbpr348.d.ethz.ch>
 <20190913204209.GE18107@brevard.conman.org>
 <lzpnk3tiev.fsf@bs-mbpr348.d.ethz.ch>
 <20190914095026.GJ18107@brevard.conman.org>
 <lzd0g3w41b.fsf@bs-mbpr348.d.ethz.ch>
 <20190914223637.GL18107@brevard.conman.org>
 <64ee97db-aa30-de39-4f80-5d02ebb6ef85@NorthTech.US>
Message-ID: <20190915060617.GM18107@brevard.conman.org>

It was thus said that the Great Bradley D. Thornton once stated:
> On 9/14/2019 3:36 PM, Sean Conner wrote:
> > 
> >   The TL;DR of this would be:  the following two URLs SHOULD be the same and
> > serve up the same page:
> > 
> >         gemini://example.com
> >         gemini://example.com/ 
> > 
> >   What's below is my thought process leading up to that.
> > 
> > 
> >   Technically speaking, these two URLs are NOT the same:
> > 
> > 	http://example.com/foo
> > 	http://example.com/foo/
> > 
> > and a webserver could technically serve up different content for the two
> > requests.
> 
> And that does happen sometimes in the real world, and confuses people.
> To me, the trailing slash forces the implication that you're looking for
> an index file in that particular directory, whatever kind is specified
> by httpd, rather than a file named foo.
> 
> After all, there could exist, both a directory *AND* a file named 'foo'.

  That would be a good trick.  I don't know of any filesystem that will
allow you to have a file *and* a directory with the same name in the same
location.  


  I had to do that with a custom non-filesystem handler.

> > But RFC-3986, section 6.2.3 states that the following are the
> > same for http:
> > 
> > 	http://example.com
> > 	http://example.com/
> >
> 
> And IMO, they should be treated as such, but are sometimes not. I've
> received 404's on occsion when omitting the trailing slash, and just got
> into the habit of (most often) putting it there when I type in an URL.

  That sounds like a webserver that hasn't been set up to automatically
redirect when it sees a resource that is an actual directory but the request
doesn't include a trailing slash.

> >   The question you are asking is---are the these two examples the same for
> > Gemini?
> > 
> > 	gemini://example.com
> > 	gemini://example.com/
> > 
> >   Again, per RFC-3986, they are (unless some document describing Gemini URLs
> > states otherwise).  I naturally assumed they would be as they are for HTTP.
> > That's perhaps an unwarrented assumption, but I would have to think the two
> > *are* the same, because of the nature of URLs.
> 
> What about:
>      gemini://example.com/foo
>      gemini://example.com/foo/

  What about it?

	gemini://gemini.conman.org/foo
	gemini://gemini.conman.org/foo/

> In the first example, couldn't that refer to either a request for either
> an index.gmi in foo/ or a file in / called foo?

  Try it.  [1]

> I'm not proposing anything. I'm just asking.

  And I'm answering 8-P

  But seriously, I don't think this should be done, even if it can be done.

> I've been invited over to another farm tonight to do some Drinkin'
> Lincoln, and I know they've got good sippin' whiskey there lolz.
> 
> I've finished fiddling with the main gophermap on gopher://Vger.Cloud
> and one client is giving me errors about:
> 
> <snip>
> sh: 1: Syntax error: "(" unexpected
> </snip>

  It's the server.  My own gopher client is failing to show the output. 
Doing it manually reveals the issue:

[spc]lucy:~/source/gopher>nc vger.cloud 70

sh: 1: Syntax error: "(" unexpected
iWelcome to Vger!       TITLE   null.host       1
i               null.host       1

  I only mention in case it wasn't clear if the error was in the client or
server.

  -spc 

[1]	I had to write a custom handler to do that.  I don't have a file
	named 'foo' or a directory named 'foo'.

From solderpunk@SDF.ORG  Sun Sep 15 08:05:57 2019
From: solderpunk@SDF.ORG (solderpunk)
Date: Sun, 15 Sep 2019 07:05:57 +0000
Subject: Fwd: elpher now supports gemini
In-Reply-To: <lzv9tvq3p7.fsf@bs-mbpr348.d.ethz.ch>
References: <a46af05e5d70b9719adc76690f3de4cb@www.carcosa.net>
 <lz1rwmro85.fsf@bs-mbpr348.d.ethz.ch>
 <e31903ff-4b55-4dcf-34dd-7a53af4ffb8a@NorthTech.US>
 <lz4l1gi1v9.fsf@bs-mbpr348.d.ethz.ch>
 <20190913210255.GG18107@brevard.conman.org>
 <lzv9tvq3p7.fsf@bs-mbpr348.d.ethz.ch>
Message-ID: <20190915070557.GA16029@SDF.ORG>

Many overdue thanks Jason for sharing this announcement here and to
plugd for adding Gemini support!  I've gone ahead and added elpher to
the list of clients at my Gemini gopher page.

-Solderpunk


From solderpunk@SDF.ORG  Sun Sep 15 09:16:17 2019
From: solderpunk@SDF.ORG (solderpunk)
Date: Sun, 15 Sep 2019 08:16:17 +0000
Subject: IPv6 and gemini
In-Reply-To: <lza7b836sx.fsf@bs-mbpr348.d.ethz.ch>
References: <lzh85g3aub.fsf@bs-mbpr348.d.ethz.ch>
 <20190913084512.GD18107@brevard.conman.org>
 <lza7b836sx.fsf@bs-mbpr348.d.ethz.ch>
Message-ID: <20190915081617.GB16029@SDF.ORG>

> >> Obviously 4 is my favourite because it's less (no) work for me. :)
> >
> >   I like 4 as well.
> 
> Yay!
>

I would like to hope that it won't be *too* much longer before 4 just
kind of happens because networking libraries will have gotten to the
point where you have to actively go out of your way to write IPv4-only
code.

Sorry that the Zaibatsu is doing a bad job of leading by example on
this front!  I was fully prepared to accept the blame for this, since
the gegobi server was thrown togeher over a few evenings and I just
didn't think about IPv6.  I thought I'd quickly patch it to support
serving on both IP versions at once before making this post, but...

...it turns out the quick and easy TCP server utilities in Python's
socketserver module are (still, in 2019 for crying out loud)
hard-coded to only work with IPv4.  So it's not a quick patch, but a
slightly larger project. :(   Maybe I was a bit optimistic in my first
paragraph.

Since starting the Gemini project, this is the second time I've felt
disappointed in Python's standard library, which is a rare thing.  At
gemini://mozz.us/journal/2019-08-21.txt, Michael writes about how the
ssl module can't accept a self-signed client certificate.  Even worse
than that, while it's possible to accept self-signed server
certificates, you can't get direct access to the details of that
certificate (like, say, the validity start and expiry dates).  With
CA-validated certificates you can easily get this data.  If the cert
is self-signed, you can only get an x509 encoded representation of the
cert - and there's nothing in the standard library to decode it!  The
ssl module really does seem to be designed to let people who don't
understand TLS very thoroughly write HTTPS stuff without shooting
themselves in the foot (the docs even talk explicitly about "Web
servers" instead of just "servers"!).  And, of course, I understand
why it's useful for a library with that kind of interface to exist.
But I *do* expect to be able to "go off-road" when I really want to.
This is going to make it a big pain to get a proper TOFU system in
AV-98, grumble, grumble.  When I eventually get around to writing my
own server, I'll definitely do it in something other than Python:
probably Go.

Any way, perhaps the most interesting thing to come out of this
conversation is the matter of using URLs with IP addresses instead of
hostnames as Gemini requests.  I'd guess a lot of existing servers
don't handle this well.  And, as mentioned, in the case of
hostname-based virtual servers, it's not entirely clear what handling
this well even means.  I wonder if it's worth explicitly disallowing
such requests?

-Solderpunk

From solderpunk@SDF.ORG  Sun Sep 15 09:34:46 2019
From: solderpunk@SDF.ORG (solderpunk)
Date: Sun, 15 Sep 2019 08:34:46 +0000
Subject: URLs in request lines
In-Reply-To: <20190914223637.GL18107@brevard.conman.org>
References: <lz8sqsx8vf.fsf@bs-mbpr348.d.ethz.ch>
 <20190913204209.GE18107@brevard.conman.org>
 <lzpnk3tiev.fsf@bs-mbpr348.d.ethz.ch>
 <20190914095026.GJ18107@brevard.conman.org>
 <lzd0g3w41b.fsf@bs-mbpr348.d.ethz.ch>
 <20190914223637.GL18107@brevard.conman.org>
Message-ID: <20190915083446.GC16029@SDF.ORG>

>   The TL;DR of this would be:  the following two URLs SHOULD be the same and
> serve up the same page:
> 
>         gemini://example.com
>         gemini://example.com/ 

I'll admit to having not yet done the RFC reading ad thinking required
to know whether the above is in fact already mandated by RFC-3986, but
the behaviour above is what I *strongly* think should be correct for
Gemini, and if it's not RFC-mandated then we should make it so in our
own spec.

>   Again, per RFC-3986, they are (unless some document describing Gemini URLs
> states otherwise).  I naturally assumed they would be as they are for HTTP.
> That's perhaps an unwarrented assumption, but I would have to think the two
> *are* the same, because of the nature of URLs.

Certainly, I want Gemini URLs to be as "generic" as possible, and I
definitely reject the idea of a Gopher-style approach of having our own
URL standard which deviates from the rest of the world.  Being able to
do away with that was (a small) part of the motivation for putting
content type in the Gemini response header.

Are HTTP URLs perfectly generic or do they have some scheme-dependent
details in there?

So far I have basically treated Gemini URLs as following whatever rules
HTTP URLs do.  This is because the URL (un)parsing tools in the Python
standard library don't work nicely on schemes they don't recognise (like
gemini://), and they won't convert relative URLs to absolute URLs
correctly.  So, I have written some fairly ugly code where "gemini://"
is replaced by "http://" before doing stuff using those tools, and then
this is reversed at the end.  I don't really like doing this, but I
dislike it less than writing my own URL-mangling code.  Because of this
limitation, practically speaking Gemini URLs had better act identically
with *some* standard URL scheme that Python is aware of, and HTTP seems
a much more sensible choice than, say, FTP.

> With that out of the way, I do handle the lack of a trailing slash with
> the request <gemini://gemini.conman.org> in GLV-1.12556 by sending out a
> redirect.  I think mine is the only server that actually does something
> different than serve up the top level page [1]. I also do that for any
> requests that map to a directory that don't end in a slash [2].

Something I've written (Gegobi, probably?) sends a redirect to add a
missing trailing slash for requests that map to directories.  This was
necessary for relative URL absolutisation to function correctly.  I
remember thinking at the time it was kind of annoying to have to do
this, but I guess it's the price we have to pay for all of the nice
stuff that using URLs provides.

-Solderpunk


From sean@conman.org  Sun Sep 15 09:45:42 2019
From: sean@conman.org (Sean Conner)
Date: Sun, 15 Sep 2019 04:45:42 -0400
Subject: IPv6 and gemini
In-Reply-To: <20190915081617.GB16029@SDF.ORG>
References: <lzh85g3aub.fsf@bs-mbpr348.d.ethz.ch>
 <20190913084512.GD18107@brevard.conman.org>
 <lza7b836sx.fsf@bs-mbpr348.d.ethz.ch> <20190915081617.GB16029@SDF.ORG>
Message-ID: <20190915084541.GN18107@brevard.conman.org>

It was thus said that the Great solderpunk once stated:
> I would like to hope that it won't be *too* much longer before 4 just
> kind of happens because networking libraries will have gotten to the
> point where you have to actively go out of your way to write IPv4-only
> code.
> 
> Sorry that the Zaibatsu is doing a bad job of leading by example on
> this front!  I was fully prepared to accept the blame for this, since
> the gegobi server was thrown togeher over a few evenings and I just
> didn't think about IPv6.  I thought I'd quickly patch it to support
> serving on both IP versions at once before making this post, but...
> 
> ...it turns out the quick and easy TCP server utilities in Python's
> socketserver module are (still, in 2019 for crying out loud)
> hard-coded to only work with IPv4.  So it's not a quick patch, but a
> slightly larger project. :(   Maybe I was a bit optimistic in my first
> paragraph.

  Sad.  It's not that hard to support IPv6.  In C, just by calling
getaddrinfo() you can get both IPv4 and IPv6 addresses for a hostname (and
it supports parsing IP addresses of either family), and socket(), bind(),
listen(), connect(), etc. all support IPv6.

> Since starting the Gemini project, this is the second time I've felt
> disappointed in Python's standard library, which is a rare thing.  At
> gemini://mozz.us/journal/2019-08-21.txt, Michael writes about how the
> ssl module can't accept a self-signed client certificate.  Even worse
> than that, while it's possible to accept self-signed server
> certificates, you can't get direct access to the details of that
> certificate (like, say, the validity start and expiry dates).  With
> CA-validated certificates you can easily get this data.  If the cert
> is self-signed, you can only get an x509 encoded representation of the
> cert - and there's nothing in the standard library to decode it!  The
> ssl module really does seem to be designed to let people who don't
> understand TLS very thoroughly write HTTPS stuff without shooting
> themselves in the foot (the docs even talk explicitly about "Web
> servers" instead of just "servers"!).  And, of course, I understand
> why it's useful for a library with that kind of interface to exist.

  I suspect this was done intentionall to disuade people from using
self-signed certificates because dragons.  Or hackers.  Or something.  Maybe
people can't validate certificates properly.  

> Any way, perhaps the most interesting thing to come out of this
> conversation is the matter of using URLs with IP addresses instead of
> hostnames as Gemini requests.  I'd guess a lot of existing servers
> don't handle this well.  

  Remove the TLS restriction, and it's not a problem at all.  The problem is
that during the TLS negotiation, the hostname of the server you are
connecting to is sent [1] as part of the protocol.  There is a way to
extract which server is being referenced and thus, you can figure out which
set of files (or handlers) to serve the request from.

> And, as mentioned, in the case of
> hostname-based virtual servers, it's not entirely clear what handling
> this well even means.  I wonder if it's worth explicitly disallowing
> such requests?

  If you get foo.example.com as the host, service the request against this
set of content (subdirectory, etc); if bar.example.com, out of that set of
content.  That's all it really means.  The problem is getting the
information from TLS.

  -spc

[1]	In my Lua wrapper for TLS, I have a function to connect to an
	endpoint using an address, and it's signature is:

		ios = tcp.connecta(addr,hostname,to,config)

	(the last two parameters are optional).  You *have* to include a
	hostname.  libtls won't work without it.

From sean@conman.org  Sun Sep 15 09:57:09 2019
From: sean@conman.org (Sean Conner)
Date: Sun, 15 Sep 2019 04:57:09 -0400
Subject: URLs in request lines
In-Reply-To: <20190915083446.GC16029@SDF.ORG>
References: <lz8sqsx8vf.fsf@bs-mbpr348.d.ethz.ch>
 <20190913204209.GE18107@brevard.conman.org>
 <lzpnk3tiev.fsf@bs-mbpr348.d.ethz.ch>
 <20190914095026.GJ18107@brevard.conman.org>
 <lzd0g3w41b.fsf@bs-mbpr348.d.ethz.ch>
 <20190914223637.GL18107@brevard.conman.org> <20190915083446.GC16029@SDF.ORG>
Message-ID: <20190915085709.GO18107@brevard.conman.org>

It was thus said that the Great solderpunk once stated:
> >   The TL;DR of this would be:  the following two URLs SHOULD be the same and
> > serve up the same page:
> > 
> >         gemini://example.com
> >         gemini://example.com/ 
> 
> I'll admit to having not yet done the RFC reading ad thinking required
> to know whether the above is in fact already mandated by RFC-3986, but
> the behaviour above is what I *strongly* think should be correct for
> Gemini, and if it's not RFC-mandated then we should make it so in our
> own spec.
> 
> >   Again, per RFC-3986, they are (unless some document describing Gemini URLs
> > states otherwise).  I naturally assumed they would be as they are for HTTP.
> > That's perhaps an unwarrented assumption, but I would have to think the two
> > *are* the same, because of the nature of URLs.
> 
> Certainly, I want Gemini URLs to be as "generic" as possible, and I
> definitely reject the idea of a Gopher-style approach of having our own
> URL standard which deviates from the rest of the world.  Being able to
> do away with that was (a small) part of the motivation for putting
> content type in the Gemini response header.
> 
> Are HTTP URLs perfectly generic or do they have some scheme-dependent
> details in there?

  It's general.  RFC-3986 states:

	In general, a URI that uses the generic syntax for authority with an
	empty path should be normalized to a path of "/".  Likewise, an
	explicit ":port", for which the port is empty or the default for the
	scheme, is equivalent to one where the port and its ":" delimiter
	are elided and thus should be removed by scheme-based normalization. 

  So treating the two Gemini URLs listed above as semantically identical is
fine by the RFC.

> So far I have basically treated Gemini URLs as following whatever rules
> HTTP URLs do.  This is because the URL (un)parsing tools in the Python
> standard library don't work nicely on schemes they don't recognise (like
> gemini://), 

  That's probably because there are a ton of URL schemes [1] that don't
follow the generic URL format so it's best to only merge URL formats that
are recognized.

> > With that out of the way, I do handle the lack of a trailing slash with
> > the request <gemini://gemini.conman.org> in GLV-1.12556 by sending out a
> > redirect.  I think mine is the only server that actually does something
> > different than serve up the top level page [1]. I also do that for any
> > requests that map to a directory that don't end in a slash [2].
> 
> Something I've written (Gegobi, probably?) sends a redirect to add a
> missing trailing slash for requests that map to directories.  This was
> necessary for relative URL absolutisation to function correctly.  I
> remember thinking at the time it was kind of annoying to have to do
> this, but I guess it's the price we have to pay for all of the nice
> stuff that using URLs provides.

  True.  And the Apache webserver also does a redirect in such cases.  So
it's a known problem with a known solution.

  -spc

[1]	https://www.iana.org/assignments/uri-schemes/uri-schemes.xhtml

From plugd@thelambdalab.xyz  Sun Sep 15 10:42:26 2019
From: plugd@thelambdalab.xyz (plugd)
Date: Sun, 15 Sep 2019 11:42:26 +0200
Subject: Fwd: elpher now supports gemini
In-Reply-To: <20190915070557.GA16029@SDF.ORG>
References: <a46af05e5d70b9719adc76690f3de4cb@www.carcosa.net>
 <lz1rwmro85.fsf@bs-mbpr348.d.ethz.ch>
 <e31903ff-4b55-4dcf-34dd-7a53af4ffb8a@NorthTech.US>
 <lz4l1gi1v9.fsf@bs-mbpr348.d.ethz.ch>
 <20190913210255.GG18107@brevard.conman.org>
 <lzv9tvq3p7.fsf@bs-mbpr348.d.ethz.ch> <20190915070557.GA16029@SDF.ORG>
Message-ID: <lzd0g1rj3x.fsf@bs-mbpr348.d.ethz.ch>


solderpunk writes:
> Many overdue thanks Jason for sharing this announcement here and to
> plugd for adding Gemini support!  I've gone ahead and added elpher to
> the list of clients at my Gemini gopher page.

Thanks!  And don't forget Sean's GLV-1.12556 server he announced a few
days ago!

plugd

p.s. just noticed Zaibatsu is in the process of being "gegobi"ed - cool!


From plugd@thelambdalab.xyz  Sun Sep 15 11:11:09 2019
From: plugd@thelambdalab.xyz (plugd)
Date: Sun, 15 Sep 2019 12:11:09 +0200
Subject: URLs in request lines
In-Reply-To: <20190914223637.GL18107@brevard.conman.org>
References: <lz8sqsx8vf.fsf@bs-mbpr348.d.ethz.ch>
 <20190913204209.GE18107@brevard.conman.org>
 <lzpnk3tiev.fsf@bs-mbpr348.d.ethz.ch>
 <20190914095026.GJ18107@brevard.conman.org>
 <lzd0g3w41b.fsf@bs-mbpr348.d.ethz.ch>
 <20190914223637.GL18107@brevard.conman.org>
Message-ID: <lzblvlrhs2.fsf@bs-mbpr348.d.ethz.ch>

Hi Sean,

Sean Conner writes:

>   The TL;DR of this would be:  the following two URLs SHOULD be the same and
> serve up the same page:
>
>         gemini://example.com
>         gemini://example.com/ 

Great, so I will continue to do what I have been doing: automatically
replacing empty filenames with "/".

>> Completely agree that gopher is special here, but my reading of RFC-3986
>> section 6.2.3 was that itactually allows for some scheme-dependent
>> behaviour anyway.
>
> You are right (now that I'm rereading that section).

Great to know that I'm not going completely mad!

>> You almost certainly have answered my question, but I'm being really
>> daft and still not getting it.  (Feel free to give up!) 
>
>   Give up?  Never give up!  Never surrender!  By Grabthar's hammer, by the
> suns Worvan, you shall be avenged!

holy moly 

>   Oh, sorry.  Got carried away there.

:-)

>   No, this is good.  I'm having to clarify my own thoughts on this.  You
> have no idea how much I've written and deleted in writing this reply.

Thanks for your persistence!

>   Technically speaking, these two URLs are NOT the same:
>
> 	http://example.com/foo
> 	http://example.com/foo/
>
> and a webserver could technically serve up different content for the two
> requests.  But RFC-3986, section 6.2.3 states that the following are the
> same for http:
>
> 	http://example.com
> 	http://example.com/
>
>   The question you are asking is---are the these two examples the same for
> Gemini?
>
> 	gemini://example.com
> 	gemini://example.com/

Exactly.

>   Again, per RFC-3986, they are (unless some document describing Gemini URLs
> states otherwise).  I naturally assumed they would be as they are for HTTP.
> That's perhaps an unwarrented assumption, but I would have to think the two
> *are* the same, because of the nature of URLs.
>
>   The *only* character that can follow the authority section (hostname,
> port, etc) of a URL is the slash.  There is no other valid character that
> can go there.  So while it is possible for a Gemini server to serve up two
> different resources for the example above, that would, in my opinion,
> violate the rule of least surprise.  Even with gopher URLs, RFC-4266,
> section 2.1 says the following are the same:
>
> 	gopher://example.com
> 	gopher://example.com/
> 	gopher://example.com/1
>
>   The slash between the authority section and the selector is required not
> only by URL parsing rules, but because there are alphaebtic gopher types. 
> Also, RFC-1436 (Introduction) states that gopher selectors are opaque and
> have no meaning, so the following two are distinct resources:
>
> 	gopher://example.com/1
> 	gopher://example.com/1/
>
>   Addtionally, these *are* already covered by RFC-3986 (first example
> above), but I digress.  So while technically what you say is true (two
> different resources) I would recommend against it (rule of least surprise).

This is all tremendously helpful and clear.  I agree with semantic
equivalence of "" and "/" filenames or filenames being the optimal
behaviour for servers.  Servers are always free to be relaxed about what
they accept, but clients need to take care that they don't make
assumptions that may not always be true.

In elpher I'm very picky about the gopher selector portion of the URL. I
map both gopher://example.com and gopher://example.com/ to
gopher://example.com/1, but *never* presume to alter anything after the
selector type character.  So gopher://example.com/1 is *never* converted
to gopher://example.com/1/ or vice versa.

For gemini I currently map gemini://example.com to gemini://example.com/
on parsing, but (besides dot segment conversions) never alter anything
else.  (Whether servers treat gemini://example.com/file and
gemini://example.com/file/ as equivalent is none of the client's
business.)

>   With that out of the way, I do handle the lack of a trailing slash with
> the request <gemini://gemini.conman.org> in GLV-1.12556 by sending out a
> redirect.  I think mine is the only server that actually does something
> different than serve up the top level page [1]. I also do that for any
> requests that map to a directory that don't end in a slash [2].

Yes, I noticed this when implementing redirects on the client
side. Elpher shouldn't be asking for "" anymore though.

>   -spc (Did this answer your question?)

Very clearly.  Thank you for your patience!

plugd


From solderpunk@SDF.ORG  Sun Sep 15 13:47:51 2019
From: solderpunk@SDF.ORG (solderpunk)
Date: Sun, 15 Sep 2019 12:47:51 +0000
Subject: IPv6 and gemini
In-Reply-To: <20190915084541.GN18107@brevard.conman.org>
References: <lzh85g3aub.fsf@bs-mbpr348.d.ethz.ch>
 <20190913084512.GD18107@brevard.conman.org>
 <lza7b836sx.fsf@bs-mbpr348.d.ethz.ch>
 <20190915081617.GB16029@SDF.ORG>
 <20190915084541.GN18107@brevard.conman.org>
Message-ID: <20190915124751.GA3337@SDF.ORG>

>   Sad.  It's not that hard to support IPv6.  In C, just by calling
> getaddrinfo() you can get both IPv4 and IPv6 addresses for a hostname (and
> it supports parsing IP addresses of either family), and socket(), bind(),
> listen(), connect(), etc. all support IPv6.

There are bindings for all of this in Python, too, in the `socket'
module.  VF-1 and AV-98 both use getaddrinfo to support connecting to
IPv6 servers.  But Agena and Gegobi both use some easy/lazy higher-level
tools in the `socketserver` module, which allow writing simple forking
or threaded TCP servers without having to bother actually writing any of
the networks.  Obviously you sacrifice some degree of control and
performance, but I thought they'd be fine for non-critical applications
like, well, anything Gemini related in these easy days!  Not handling
IPv6 is a bit of a deal-breaker, though, so I'll have to actually do
things properly...
 
>   I suspect this was done intentionall to disuade people from using
> self-signed certificates because dragons.  Or hackers.  Or something.

Dragon hackers!

"Welcome to Gemini: here be dragons.  It's okay, they like TOFU!"

>   Remove the TLS restriction, and it's not a problem at all.  The problem is
> that during the TLS negotiation, the hostname of the server you are
> connecting to is sent [1] as part of the protocol.  There is a way to
> extract which server is being referenced and thus, you can figure out which
> set of files (or handlers) to serve the request from.

Hmm.  Are you talking about SNI (Server Name Indication) here?

-Solderpunk


From sean@conman.org  Sun Sep 15 21:31:44 2019
From: sean@conman.org (Sean Conner)
Date: Sun, 15 Sep 2019 16:31:44 -0400
Subject: IPv6 and gemini
In-Reply-To: <20190915124751.GA3337@SDF.ORG>
References: <lzh85g3aub.fsf@bs-mbpr348.d.ethz.ch>
 <20190913084512.GD18107@brevard.conman.org>
 <lza7b836sx.fsf@bs-mbpr348.d.ethz.ch> <20190915081617.GB16029@SDF.ORG>
 <20190915084541.GN18107@brevard.conman.org> <20190915124751.GA3337@SDF.ORG>
Message-ID: <20190915203144.GP18107@brevard.conman.org>

It was thus said that the Great solderpunk once stated:
> 
> >   Remove the TLS restriction, and it's not a problem at all.  The problem is
> > that during the TLS negotiation, the hostname of the server you are
> > connecting to is sent [1] as part of the protocol.  There is a way to
> > extract which server is being referenced and thus, you can figure out which
> > set of files (or handlers) to serve the request from.
> 
> Hmm.  Are you talking about SNI (Server Name Indication) here?

  Probably.  I haven't looked too much into it yet.

  -spc

From plugd@thelambdalab.xyz  Sun Sep 15 22:21:15 2019
From: plugd@thelambdalab.xyz (plugd)
Date: Sun, 15 Sep 2019 23:21:15 +0200
Subject: URLs in request lines
In-Reply-To: <64ee97db-aa30-de39-4f80-5d02ebb6ef85@NorthTech.US>
References: <lz8sqsx8vf.fsf@bs-mbpr348.d.ethz.ch>
 <20190913204209.GE18107@brevard.conman.org>
 <lzpnk3tiev.fsf@bs-mbpr348.d.ethz.ch>
 <20190914095026.GJ18107@brevard.conman.org>
 <lzd0g3w41b.fsf@bs-mbpr348.d.ethz.ch>
 <20190914223637.GL18107@brevard.conman.org>
 <64ee97db-aa30-de39-4f80-5d02ebb6ef85@NorthTech.US>
Message-ID: <lzd0g1dzn8.fsf@bs-mbpr348.d.ethz.ch>


Hi Bradley, just quickly:

Bradley D. Thornton writes:
> On 9/14/2019 3:36 PM, Sean Conner wrote:
> I've been invited over to another farm tonight to do some Drinkin'
> Lincoln, and I know they've got good sippin' whiskey there lolz.

> I also Gave Tim a good plug for Elpher both there and on V'Ger's Gemini
> site. I really like that browser :)

Thanks!

> I also botched my install of Elpher, so maybe could use a little guidance ;)

In this order:
1. Try removing the package using M-x package-delete <RET> elpher <RET>
2. Get rid of any remaining elpher-prefixed directories under
~/.emacs.d/elpa/
4. Remove any trace of elpher from your ~/.emacsrc or ~/.emacs.d/init.el scripts.
3. Restart emacs
4. Install again using M-x package-install <RET> elpher <RET>

Any remaining problems are mine, not yours. :-)

> When attempting to retrieve gemini://vger.cloud/:
> Gemini server reports PERMANENT FAILURE for this request: "51	Not Found".

Elpher was in a bit of flux yesterday (there were a slew of patch
releases, at least one of which was too hasty), so it's entirely
possible that you were unlucky and installed a broken release.  In which
case, sorry!  Things should be more stable now.  (I usually try a bit
harder not to break master, but I was actually in the process of rushing
out a fix when I broke something else.  I really need some unit tests...)

plugd


From b__m__e@mailfence.com  Thu Sep 19 03:33:31 2019
From: b__m__e@mailfence.com (Brian Evans)
Date: Thu, 19 Sep 2019 04:33:31 +0200 (CEST)
Subject: Clarification of current spec
Message-ID: <1564243588.89967.1568860411969@ichabod.co-bxl>

Hi all,
I have finally gotten around to implementing a client. I had been rebuilding Bombadillo (my gopher client)
and so I have added preliminary gemini support to it. That consists of single digit response code awareness.
Support for status 2 and 3 and errors shown in a sensible way for 4 - 6. I have not implemented 1 yet.

While building all of this out I have been using existing servers for testing. It seems that there is a good
amount of variation, particularly concerning tabs and spaces. 

I am wanting clarity on whether this is correct:
<two digit status number><space><meta>

or this is correct:
<two digit status number><tab><meta>

The same question applies to gemini docs. My understanding was that this is correct:

<magic string><url><space><...text>

However, I am seeing tab instead of space in the wild.

Is this just a simple matter of different servers conforming to different stages of the development spec?
Should my client support both? It is certainly doable, but a little annoying.

Lastly, is the spec as written at:  gopher://zaibatsu.circumlunar.space:70/0/~solderpunk/gemini/spec-spec.txt
being kept up to date as things get decided? Or should that document be considered out of date at this point
pending a new writeup?

Thanks everyone!

--?
Sent with https://mailfence.com
Secure and private email

From sean@conman.org  Thu Sep 19 06:45:39 2019
From: sean@conman.org (Sean Conner)
Date: Thu, 19 Sep 2019 01:45:39 -0400
Subject: Clarification of current spec
In-Reply-To: <1564243588.89967.1568860411969@ichabod.co-bxl>
References: <1564243588.89967.1568860411969@ichabod.co-bxl>
Message-ID: <20190919054538.GA26574@brevard.conman.org>

It was thus said that the Great Brian Evans once stated:
> Hi all,
> 
> I have finally gotten around to implementing a client. I had been
> rebuilding Bombadillo (my gopher client) and so I have added preliminary
> gemini support to it. That consists of single digit response code
> awareness. Support for status 2 and 3 and errors shown in a sensible way
> for 4 - 6. I have not implemented 1 yet.
> 
> While building all of this out I have been using existing servers for
> testing. It seems that there is a good amount of variation, particularly
> concerning tabs and spaces.
> 
> I am wanting clarity on whether this is correct:
> <two digit status number><space><meta>
> 
> or this is correct:
> <two digit status number><tab><meta>

  Hmmm.  I tested the Gemini servers I am aware of [1], and all but one use

	<two digit status><tab><meta>

  The one that doesn't is the server at gemini://zaibatsu.circumlunar.space/,
run by solderpunk, creator of the Gemini protocol, so it's hard to say who
is correct---him, or the rest of the implementations.  The spec is ... not
detailed enough (for my liking) to resolve this.  Your best bet for now is
to support both space and tab.

> The same question applies to gemini docs. My understanding was that this
> is correct:
> 
> <magic string><url><space><...text>
> 
> However, I am seeing tab instead of space in the wild.

  The spec (at the address you listed below) says this:

	1.3.5.2 Link syntax

	Link lines have the following format:

	=>[<whitespace>]<URL>[<whitespace><USER-FRIENDLY LINK NAME>]<CR><LF>

	where:

	* <whitespace> is any *non-zero number* of consecutive spaces or tabs
	* Square brackets indicate that the enclosed content is optional.	
	* <URL> is a URL, which may be absolute or relative.  If the URL
	  does not include a scheme, a scheme of gemini:// is implied.

	(emphasis added)

  So whitespace here can include both spaces and tabs.

> Is this just a simple matter of different servers conforming to different
> stages of the development spec? Should my client support both? It is
> certainly doable, but a little annoying.

> Lastly, is the spec as written at:
> gopher://zaibatsu.circumlunar.space:70/0/~solderpunk/gemini/spec-spec.txt
> being kept up to date as things get decided? Or should that document be
> considered out of date at this point pending a new writeup?

  It is marked as a work in progress (WIP) so I assume it's kept up to date.
Having written the first Gemini server, I've noticed changes as the protocol
was being hashed out.

  -spc

[1]	Listed at gemini://gemini.conman.org/

From Bradley@NorthTech.US  Thu Sep 19 06:54:58 2019
From: Bradley@NorthTech.US (Bradley D. Thornton)
Date: Wed, 18 Sep 2019 22:54:58 -0700
Subject: Clarification of current spec
In-Reply-To: <1564243588.89967.1568860411969@ichabod.co-bxl>
References: <1564243588.89967.1568860411969@ichabod.co-bxl>
Message-ID: <9d6e642d-9a5b-eded-04aa-9bd9f4af607e@NorthTech.US>



On 9/18/2019 7:33 PM, Brian Evans wrote:

> 
> While building all of this out I have been using existing servers for testing. It seems that there is a good
> amount of variation, particularly concerning tabs and spaces. 
> 
> I am wanting clarity on whether this is correct:
> <two digit status number><space><meta>
> 
> or this is correct:
> <two digit status number><tab><meta>
> 
> The same question applies to gemini docs. My understanding was that this is correct:
> 
> <magic string><url><space><...text>
> 
> However, I am seeing tab instead of space in the wild.
> 
> Is this just a simple matter of different servers conforming to different stages of the development spec?
> Should my client support both? It is certainly doable, but a little annoying.


You may be seeing a lot of variation on my servers as I switch between
<space> and <tab> for my own redability. According to the document you
reference below, the standard calls for white space being either tabs or
spaces. i.e.,:

<snip>

1.3.5.2 Link syntax

Link lines have the following format:

=>[<whitespace>]<URL>[<whitespace><USER-FRIENDLY LINK NAME>]<CR><LF>

where:

* <whitespace> is any non-zero number of consecutive spaces or
  tabs


</snip>

> 
> Lastly, is the spec as written at:  gopher://zaibatsu.circumlunar.space:70/0/~solderpunk/gemini/spec-spec.txt

I hope that helps :)

-- 
Bradley D. Thornton
Manager Network Services
http://NorthTech.US
TEL: +1.310.421.8268

From plugd@thelambdalab.xyz  Thu Sep 19 10:14:30 2019
From: plugd@thelambdalab.xyz (plugd)
Date: Thu, 19 Sep 2019 11:14:30 +0200
Subject: Clarification of current spec
In-Reply-To: <1564243588.89967.1568860411969@ichabod.co-bxl>
References: <1564243588.89967.1568860411969@ichabod.co-bxl>
Message-ID: <lzv9toir61.fsf@bs-mbpr348.d.ethz.ch>

Hi Brian,

Brian Evans writes:
> I have finally gotten around to implementing a client.

Awesome!

> While building all of this out I have been using existing servers for testing. It seems that there is a good
> amount of variation, particularly concerning tabs and spaces. 
>
> I am wanting clarity on whether this is correct:
> <two digit status number><space><meta>

Yes, as Sean says the spec is silent on this:

--snip--
Gemini response headers look like this:

<STATUS> <META><CR><LF>
--snip--

>From reading some old phlog posts it seems it used to be
<STATUS><TAB><META><CR><LF>, and it's not clear whether the " " in the
current version is meant to be literal or just some collection of
whitespace.

For this reason in Elpher I've just programmed defensively and accept
any combination of spaces and tabs.  This also follows my personal
parsing philosophy of being relaxed about what I accept but strict about
what I send.

plugd


From solderpunk@SDF.ORG  Fri Sep 20 16:22:47 2019
From: solderpunk@SDF.ORG (solderpunk)
Date: Fri, 20 Sep 2019 15:22:47 +0000
Subject: Clarification of current spec
In-Reply-To: <20190919054538.GA26574@brevard.conman.org>
References: <1564243588.89967.1568860411969@ichabod.co-bxl>
 <20190919054538.GA26574@brevard.conman.org>
Message-ID: <20190920152247.GA17801@SDF.ORG>

On Thu, Sep 19, 2019 at 01:45:39AM -0400, Sean Conner wrote:
 
>   The one that doesn't is the server at gemini://zaibatsu.circumlunar.space/,
> run by solderpunk, creator of the Gemini protocol

Creator and increasingly negligent parent, it would sadly seem!

> The spec is ... not
> detailed enough (for my liking) to resolve this.

I am happy to refine the spec to make this explicit (the "spec-spec"
document is still the definitive and up-to-date specification.  It
hasn't changed in a while, true, but that's because the basic parts are
pretty well hammered out now, and thank goodness for that!).

Since the link syntax already explicitly supports both spaces and tabs,
IMHO it would be confusing and an invitation to implementation errors to
explicitly define the response header as only supporting one or the
other.  So, my vote would to be to clarify the spec by allowing both.

I am happy to listen to counter arguments.  In most languages I work
with regularly, splitting on space-or-tab is no more difficult than
splitting on one or the other, so I don't think of it as annoying to
permit both alternatives, but if there are other drawbacks, do speak up!

Excited to hear that Gemini-support is coming to Bombadillo! :)

-Solderpunk


From solderpunk@SDF.ORG  Sun Sep 22 09:13:34 2019
From: solderpunk@SDF.ORG (solderpunk)
Date: Sun, 22 Sep 2019 08:13:34 +0000
Subject: IPv6 and gemini
In-Reply-To: <20190915203144.GP18107@brevard.conman.org>
References: <lzh85g3aub.fsf@bs-mbpr348.d.ethz.ch>
 <20190913084512.GD18107@brevard.conman.org>
 <lza7b836sx.fsf@bs-mbpr348.d.ethz.ch>
 <20190915081617.GB16029@SDF.ORG>
 <20190915084541.GN18107@brevard.conman.org>
 <20190915124751.GA3337@SDF.ORG>
 <20190915203144.GP18107@brevard.conman.org>
Message-ID: <20190922081334.GA9114@SDF.ORG>

On Sun, Sep 15, 2019 at 04:31:44PM -0400, Sean Conner wrote:
>   Probably.  I haven't looked too much into it yet.

Nor I, but I think that's an optional extension on TLS which we can't
rely on.

Dangerously close to veering off topic here, so expect a new thread
soon, but I've started trying to do a proper TOFU-style certificate
handling scheme in AV-98.  An immediate question is whether to remember
previously seen certificates against hostnames or IP addresses.  The
most obvious place where this could really matter is for servers (with a
single IP) serving up multiple Gemini sites under different hostnames.
If the client *doesn't* send a hostname very early on in the handshake
then it seems to me there is no way for the server to use distinct certs
per hostname.

I need to do some reading, no doubt this is entirely well-trod ground in
HTTPS-land.

-Solderpunk

From solderpunk@SDF.ORG  Mon Sep 23 19:19:00 2019
From: solderpunk@SDF.ORG (solderpunk)
Date: Mon, 23 Sep 2019 18:19:00 +0000
Subject: TLS, TOFU and the Gemini security model
Message-ID: <20190923181900.GA5995@SDF.ORG>

Currently, the "speculative specification" has the following to say
about how Gemini clients should validate TLS certificates when
connecting to servers:

> Clients can validate TLS connections however they like (including not
> at all) but the strongly RECOMMENDED approach is to implement a
> lightweight "TOFU" certificate-pinning system which treats self-signed
> certificates as first- class citizens.

Well, there's a *little* more detail than that, but not much.

To the best of my knowledge, all extant clients take the "not at all"
route.  I'm looking to change this for the case of AV-98 and so wanted
to start thinking a little more clearly about what the different
possibilities are for making TLS as secure as possible without relying
on certificate authorities.

Before even starting to talk about this, it makes sense to at least
vaguely specify a threat model.  I don't think it's realistic to aim at
Gemini being resilient against targetted attacks from state-level
actors, and given the likely total lack of commercial content on Gemini
in the forseeable future I think cybercriminals are not yet a realistic
concern.  To my mind the most important things to consider are:

 * ISPs logging all Gemini traffic
 * ISPs altering Gemini traffic (e.g. to insert adverts)
 * ISPs terminating connections when blacklisted keywords are seen, to
   facilitate government-mandated censorship

All of these things do happen right now or have happened previously in
the context of the web, so they're not ridiculous to consider.  None of
these things are targetted, in the sense that they are most probably
done to *all* traffic on a given set of ports using automated systems,
without any special case-by-case consideration.  This means that
effective countermeasures don't necessarily need to be things that
couldn't be defeated by a smart person with a little effort, they just
need to be not so trivially defeated that the attack can be easily and
reliably automated.

Right now, all use of TLS for Gemini *can* be easily and reliably
automated because there's nothing to prevent MITM attacks.

At the very least, it seems sensible for a client to insist that a
certificate's "Not Before" and "Not After" validity dates agree with the
current date, and that the hostname the client is trying to connect to
is consistent with either the certificate's Common Name or Subject
Alternative Names.  This only prevents extremely stupid MITM attacks
which try to use a generic bogus certificate to attack all connections,
but it's relatively straightforward to do and raises the bar slightly,
so why not recommend it?

Onto more serious attempts at preventing MITM: I've always thought that
a TOFU style approach would work well for this, but before digging into
this more I'll quickly metion something else I read about today which
could be a great tool for Gemini - I don't discuss it before TOFU here
because I think it's better than TOFU, I do it because I think it can be
described quickly and easily and doesn't raise as many implementation
questions.

DNS-Based Authentication of Named Entities (DANE, see
https://en.wikipedia.org/wiki/DNS-based_Authentication_of_Named_Entities)
basically involves using DNS records to let domain owners declare
certain things about which certificates should be considered valid for
their hostnames, and one thing a DANE record can declare is that
"exactly this verbatim certificate should be used and none other".  This
means that a successful MITM attack also requires a successful attack on
the user's DNS system - which of course is not impossible, but it raises
the bar substantially.  I think DANE could be part of a good
security-in-depth design.

Anyway, onto the TOFU.

The basic TOFU model involves blindly trusting a certificate the first
time you encounter it, but *remembering* that certificate (or rather,
just its fingerprint, basically a hash digest) and warning the user if a
different certficiate is encountered in the future.  In principle this
approach means that a MITM attack can only be pulled off the first time
a user connects to a particular host.  Which, now that I think about it,
actually offers much better defence against targetted attacks than the
automated dragnet stuff that is supposed to be part of Gemini's threat
model - a TOFU client which only ever accesses Geminispace from the same
home internet connection through the same ISP is vulnerable to bulk MITM
attacks.  Hrmh.

The TOFU model sounds simple enough but questions appear once you start
actually trying to code it.  The first one I had was whether or not
certificates should be "remembered" against IP addresses or hostnames.
This question is pertinent because Gemini's use of URLs instead of
selectors as requests enables name-based virtual hosting, so it's
possible for one IP address to map to multiple hostnames.

It turns out that most TLS implementations (including even the Python
standard library's ssl module, which I've started to take a dim view of)
support a TLS extension called Server Name Indication (SNI) where the
client sends the hostname of the server it think it's connecting to as
part of the TLS handshake.  This allows virtual hosting servers to serve
up distinct certificates for distinct hostnames.  This is a good thing
because it allows shared hosting where each user can take responsibility
for their own certificates.  I am thinking of amending the Gemini spec
to say that clients SHOULD use SNI.

The end result of this is that TOFU clients should store certificate
fingerprints against hostnames, not IP addresses.  So, there's that
question solved and I'll code this up for AV-98 soon.

The next question is what to do about certificate expiration.  The first
time a client connects to a host after that host's previously seen
certificate has expired, the client EXPECTS to see something new.  If it
simply blindly trusts the first new thing which comes along, this
basically means that a client is periodically vulnerable to MITMs at
certain times - times which are publically announced far in advance!  A
very simple way to partially mitigate this problem might be to recommend
that Gemini certificates be relatively long lived - although this is a
trade-off because it means the damage from a compromised certificate
lasts longer.  A much better solution is some sort of scheme where
servers sign their new certificates using the key associated with their
old certificate, authenticating the continuity - this is really
beautiful, but it would require server admins to use a specialised
certificate genreating tool, which feels unlikely to take off.

There are various more complicated schemes people have proposed to make
TLS work without CAs, like the idea of "public notary" servers.  I'm
very interested in exploring these possibilities for Gemini.  Probably
any such system would be a recommendation only for especially
security-conscious clients, with vanilla TOFU being the more common
baseline.

Thoughts very welcome!

Cheers,
Solderpunk


From plugd@thelambdalab.xyz  Tue Sep 24 08:48:19 2019
From: plugd@thelambdalab.xyz (plugd)
Date: Tue, 24 Sep 2019 09:48:19 +0200
Subject: TLS, TOFU and the Gemini security model
In-Reply-To: <20190923181900.GA5995@SDF.ORG>
References: <20190923181900.GA5995@SDF.ORG>
Message-ID: <lzwody2kzg.fsf@bs-mbpr348.d.ethz.ch>

solderpunk writes:
> To the best of my knowledge, all extant clients take the "not at all"
> route.

Just a quick correction: because elpher uses emacs' own TLS support, it
*does* actually validate TLS connections, and warns users when the
server is using a self-signed certificate.  I.e. it's a bit pickier than
the speculative specification suggests. I'm looking to "downgrade" this
to a TOFU system somepoint soon, seeing as self-signed certificates are
expected to be the norm.  But in any case, MITM attacks should already
be detectable, as far as I understand.

plugd


From lazar.michael22@gmail.com  Tue Sep 24 15:19:45 2019
From: lazar.michael22@gmail.com (Michael Lazar)
Date: Tue, 24 Sep 2019 10:19:45 -0400
Subject: TLS, TOFU and the Gemini security model
In-Reply-To: <20190923181900.GA5995@SDF.ORG>
References: <20190923181900.GA5995@SDF.ORG>
Message-ID: <CAFTy05YRS-moDCyjZGg-_CKbdFbsXc0iM+vHUYJqztXcuaGitA@mail.gmail.com>

I want to push back on the idea of TOFU certificates a little bit. Mainly, I
feel like I'm missing some important context that led to this decision of
rolling your own security model.

> Simplicity:
>
> * It should be possible for somebody who had no part in designing the
>   protocol to accurately hold the entire protocol spec in their head
>   after reading a well-written description of it once or twice.
> * A basic but usable (not ultra-spartan) client should fit comfortably
>   within 50 or so lines of code in a modern high-level language.
>   Certainly not more than 100.
> * A client comfortable for daily use which implements every single
>   protocol feature should be a feasible weekend programming project
>   for a single developer.

Why not just use PKI/TLS and be done with it? It seems like this would be the
most obvious and easiest to implement solution for both clients and servers.
Setting up Let's Encrypt is about as difficult as setting up a self-signed
certificate (correctly). I would wager that most servers running gemini will
already be running HTTPS anyway, so it won't even require any extra effort.
Your operating system already has the trusted root CAs installed. OpenSSL
already knows how to hook everything together. It's one line in python to use
PKI/TLS as a gemini client:

> context = ssl.create_default_context()

You could argue that PKI is overkill for gemini, and to an extent I agree with
this on a philosophical level. It just happens to be that the way operating
systems and SSL libraries have evolved, you effectively get PKI for "free" from
the perspective a software developer. The same way that I don't need/want to
know how the TCP handshake works at the kernel level, I would rather let the
operating system handle my trust model for me.

- Michael

From solderpunk@SDF.ORG  Tue Sep 24 18:33:50 2019
From: solderpunk@SDF.ORG (solderpunk)
Date: Tue, 24 Sep 2019 17:33:50 +0000
Subject: TLS, TOFU and the Gemini security model
In-Reply-To: <lzwody2kzg.fsf@bs-mbpr348.d.ethz.ch>
References: <20190923181900.GA5995@SDF.ORG>
 <lzwody2kzg.fsf@bs-mbpr348.d.ethz.ch>
Message-ID: <20190924173350.GA1882@SDF.ORG>

> Just a quick correction: because elpher uses emacs' own TLS support, it
> *does* actually validate TLS connections, and warns users when the
> server is using a self-signed certificate.  I.e. it's a bit pickier than
> the speculative specification suggests. I'm looking to "downgrade" this
> to a TOFU system somepoint soon, seeing as self-signed certificates are
> expected to be the norm.  But in any case, MITM attacks should already
> be detectable, as far as I understand.

Whoops, thanks for the correction!

Of *course* emacs has built in TLS support. :p

Cheers,
Solderpunk

From b__m__e@mailfence.com  Tue Sep 24 18:35:36 2019
From: b__m__e@mailfence.com (Brian Evans)
Date: Tue, 24 Sep 2019 19:35:36 +0200 (CEST)
Subject: TLS, TOFU and the Gemini security model
Message-ID: <582795810.222411.1569346536554@ichabod.co-bxl>

Thanks for the detailed thoughts solderpunk. I do not know almost anything about TLS.
The TLS portion of this was the hardest for me to get going in my client, even while
implementing the "not at all" approach. There is a lot to know and understand on the
subject and it can be overwhelming to look into. Which, as Michael points out, does
go somewhat against the mandate of ease of setup/build. Python may have a robust
library for this, but not every language does (golang has a solid library for it, or so it
seems... but it is hard to understand if you do not already know what you are doing.
Most of the easy routes are designed explicitly for https and will not work with other
protocols).

Michael writes:
> Setting up Let's Encrypt is about as difficult as setting up a self-signed
> certificate (correctly)

I agree that Let's Encrypt is easy to set up and I have done so for multiple websites.
However, I think from a philosophical standpoint I, personally, would like gemini to
be as free of centralized authorities as is possible. 

As such, the TOFU approach sounds.... doable mostly. It makes sense to me how to
get a hash of a cert and then store that in a map with a hostname as the key. My client
already stores and parses a config file with options and bookmarks, so adding cert
hashes seems like no problem. The timeout portion worries me a little bit. I agree that
long timeouts makes sense, but that trade off is something to think about.

solderpunk writes:
> [ ... ] and that the hostname the client is trying to connect to
> is consistent with either the certificate's Common Name or Subject
> Alternative Names

I had been planning on implementing this from the beginning and only threw it aside
in order to be able to just get connections up and running at all. I think I'll spend some
of today trying to get it set up. :)


--?
Sent with https://mailfence.com
Secure and private email

From solderpunk@SDF.ORG  Tue Sep 24 18:48:12 2019
From: solderpunk@SDF.ORG (solderpunk)
Date: Tue, 24 Sep 2019 17:48:12 +0000
Subject: TLS, TOFU and the Gemini security model
In-Reply-To: <CAFTy05YRS-moDCyjZGg-_CKbdFbsXc0iM+vHUYJqztXcuaGitA@mail.gmail.com>
References: <20190923181900.GA5995@SDF.ORG>
 <CAFTy05YRS-moDCyjZGg-_CKbdFbsXc0iM+vHUYJqztXcuaGitA@mail.gmail.com>
Message-ID: <20190924174812.GB1882@SDF.ORG>

On Tue, Sep 24, 2019 at 10:19:45AM -0400, Michael Lazar wrote:
> I want to push back on the idea of TOFU certificates a little bit. Mainly, I
> feel like I'm missing some important context that led to this decision of
> rolling your own security model.

Actually, I'm feeling fairly susceptible to this push back.  Back in the
veeeery early days of Gemini, probably before I'd even resolved to
actual take it on as a real project, somebody asked if using TLS meant
we were gointg to adopt the CA system, with all of its problems.  I said
I'd be quite open to exploring some less centralised alternatives like
TOFU and they were very enthusiastic about that idea.  I think TOFU has
just kind of come along for the ride since then without being critically
assessed.  To some extent, unconventional and creative use of TLS has
become a bit of a signature move for Gemini, with the client certificate
ideas.

You are right that, because the CA approach to certificate validation is
so ingrained in the web world, it's actually likely to be much, much
easier to correctly implement than TOFU.  And while there are valid
criticisms of the CA system, at the very least Gemini could claim to be
no worse than the web.

How do other people feel about this?

What proportion of extant Gemini servers are already using Let's Encrypt
certs?

Cheers,
Solderpunk


From solderpunk@SDF.ORG  Tue Sep 24 18:54:01 2019
From: solderpunk@SDF.ORG (solderpunk)
Date: Tue, 24 Sep 2019 17:54:01 +0000
Subject: TLS, TOFU and the Gemini security model
In-Reply-To: <582795810.222411.1569346536554@ichabod.co-bxl>
References: <582795810.222411.1569346536554@ichabod.co-bxl>
Message-ID: <20190924175401.GC1882@SDF.ORG>

> I agree that Let's Encrypt is easy to set up and I have done so for multiple websites.
> However, I think from a philosophical standpoint I, personally, would like gemini to
> be as free of centralized authorities as is possible. 

Yeah, me too, it's probably why I've continued to fly the TOFU flag for
so long.

In addition to decentralisation, I do think TOFU is actually
*conceptually* much simpler than CA-based validation.  It just isn't
simpler in terms of implementation because there's already a lot of
well-tested and pre-packaged code out there to do the CA heavy lifting.

Cheers,
Solderpunk


From tomasino@lavabit.com  Tue Sep 24 19:56:28 2019
From: tomasino@lavabit.com (James Tomasino)
Date: Tue, 24 Sep 2019 18:56:28 +0000
Subject: TLS, TOFU and the Gemini security model
In-Reply-To: <20190924174812.GB1882@SDF.ORG>
References: <20190923181900.GA5995@SDF.ORG>
 <CAFTy05YRS-moDCyjZGg-_CKbdFbsXc0iM+vHUYJqztXcuaGitA@mail.gmail.com>
 <20190924174812.GB1882@SDF.ORG>
Message-ID: <8FA58199-8BAA-453E-A1E9-8D0AE2D7F1A1@lavabit.com>

I'm a let's encrypt user on Tilde Black. Being that I have no idea what TOFU is, I'm pretty excited about being able to piggy back on the keys I already have.

Does this complicate the possibility of running Gemini over tor (as an onion service, not through an exit node)? SSL certs for onion services are not really a widespread thing, but I'm below novice level in this conversation so I defer to you all.


From julienblanchard@fastmail.fm  Tue Sep 24 20:29:12 2019
From: julienblanchard@fastmail.fm (Julien Blanchard)
Date: Tue, 24 Sep 2019 21:29:12 +0200
Subject: TLS, TOFU and the Gemini security model
In-Reply-To: <20190924174812.GB1882@SDF.ORG>
References: <20190924174812.GB1882@SDF.ORG>
Message-ID: <56EF26F9-39E2-4095-BD94-096D1BAF5817@fastmail.fm>



> How do other people feel about this?
> 
> What proportion of extant Gemini servers are already using Let's Encrypt
> certs?
> 
> Cheers,
> Solderpunk

All in for TOFU and not re-creating what?s already used for the web, the SSH way looks good to me.
So far I only use a self-signed certificate but I also have let?s encrypt certificates for the web/mail stuff.
I don?t mind not re-using them for Gemini.

? 
julienxx

From jmcbray@carcosa.net  Tue Sep 24 20:52:21 2019
From: jmcbray@carcosa.net (Jason McBrayer)
Date: Tue, 24 Sep 2019 15:52:21 -0400
Subject: TLS, TOFU and the Gemini security model
In-Reply-To: <20190924174812.GB1882@SDF.ORG> (solderpunk@sdf.org's message of
 "Tue, 24 Sep 2019 17:48:12 +0000")
References: <20190923181900.GA5995@SDF.ORG>
 <CAFTy05YRS-moDCyjZGg-_CKbdFbsXc0iM+vHUYJqztXcuaGitA@mail.gmail.com>
 <20190924174812.GB1882@SDF.ORG>
Message-ID: <87a7atqxoq.fsf@cassilda.carcosa.net>

solderpunk <solderpunk at SDF.ORG> writes:

> What proportion of extant Gemini servers are already using Let's
> Encrypt certs?

Carcosa isn't, but at this point it trivially could be; the www server
on the same host is.

-- 
Jason McBrayer      | ?Strange is the night where black stars rise,
jmcbray at carcosa.net | and strange moons circle through the skies,
                    | but stranger still is lost Carcosa.?
                    | ? Robert W. Chambers,The King in Yellow

From Bradley@NorthTech.US  Wed Sep 25 00:58:06 2019
From: Bradley@NorthTech.US (Bradley D. Thornton)
Date: Tue, 24 Sep 2019 16:58:06 -0700
Subject: TLS, TOFU and the Gemini security model
In-Reply-To: <20190924174812.GB1882@SDF.ORG>
References: <20190923181900.GA5995@SDF.ORG>
 <CAFTy05YRS-moDCyjZGg-_CKbdFbsXc0iM+vHUYJqztXcuaGitA@mail.gmail.com>
 <20190924174812.GB1882@SDF.ORG>
Message-ID: <eec9c931-0bc0-0a2f-078c-ced996e25af4@NorthTech.US>



On 9/24/2019 10:48 AM, solderpunk wrote:
> On Tue, Sep 24, 2019 at 10:19:45AM -0400, Michael Lazar wrote:
>> I want to push back on the idea of TOFU certificates a little bit. Mainly, I
> 
> You are right that, because the CA approach to certificate validation is
> so ingrained in the web world, it's actually likely to be much, much
> easier to correctly implement than TOFU.  And while there are valid
> criticisms of the CA system, at the very least Gemini could claim to be
> no worse than the web.
> 
> How do other people feel about this?

I'm basically along for the ride here, but would suggest that perhaps
more than one model might be specified as an implementation at the
option of the developers? Clients would be able to negotiate based on
what the servers they encounter supports?

I do lean towards the CA system. It's known and devs are familiar with
it, where the concept of adoption is concerned.

And having Elpher need to downgrade its security model... I dunno.

> 
> What proportion of extant Gemini servers are already using Let's Encrypt
> certs?
> 

V'Ger does.


-- 
Bradley D. Thornton
Manager Network Services
http://NorthTech.US
TEL: +1.310.421.8268

From Bradley@NorthTech.US  Wed Sep 25 01:56:35 2019
From: Bradley@NorthTech.US (Bradley D. Thornton)
Date: Tue, 24 Sep 2019 17:56:35 -0700
Subject: TLS, TOFU and the Gemini security model
In-Reply-To: <eec9c931-0bc0-0a2f-078c-ced996e25af4@NorthTech.US>
References: <20190923181900.GA5995@SDF.ORG>
 <CAFTy05YRS-moDCyjZGg-_CKbdFbsXc0iM+vHUYJqztXcuaGitA@mail.gmail.com>
 <20190924174812.GB1882@SDF.ORG>
 <eec9c931-0bc0-0a2f-078c-ced996e25af4@NorthTech.US>
Message-ID: <e2a6ca17-658e-a248-1472-54d02880eea8@NorthTech.US>



On 9/24/2019 4:58 PM, Bradley D. Thornton wrote:
> 
> 
> On 9/24/2019 10:48 AM, solderpunk wrote:
>>
>> What proportion of extant Gemini servers are already using Let's Encrypt
>> certs?
>>
> 
> V'Ger does.
> 
> 

I should add, that although the future of CAcert is uncertain they are a
well funded non-profit, and notwithstanding whether we go the TLS route
or some other scheme; when/if there's server support for CA signed
client-certs, V'Ger will already recognize CAcert signed client-certs,
which are always free for anyone to obtain.

-- 
Bradley D. Thornton
Manager Network Services
http://NorthTech.US
TEL: +1.310.421.8268

From b__m__e@mailfence.com  Mon Sep 30 22:37:26 2019
From: b__m__e@mailfence.com (Brian Evans)
Date: Mon, 30 Sep 2019 23:37:26 +0200 (CEST)
Subject: TLS, TOFU and the Gemini security model
Message-ID: <1314197473.30244.1569879446073@ichabod.co-bxl>

Bombadillo (on the `tofu` branch, soon to be merged into `develop`) has implemented a trust on first use system. I am storing hashed certs for comparison and validating hostnames and valid dates/times for all certificates. Servers offering multiple certificates is allowed, but Bombadillo will only store the first valid one it finds. 

It is working really well so far. Of the active gemini servers the only one I get a bad certificate from is carcosa.net (which, with how I have built things, prevents the site from being visited at all).

My takeaway regarding TOFU:
- A tofu system was pretty trivial to set up
- It seems to work pretty well
- It took a bit to figure out how I wanted to handle certificates expiring
- It leaves the client to determine how strict they want to be (will they allow a user to still retrieve data even with a bad cert?)

I was pretty in favor of this model before and continue to be. Servers can still use Let's Encrypt and present a certificate to the client and the client will validate it in its own way rather than through a certificate authority.

In terms of adding overhead to gemini as a weekend project: I had the benefit of already having written a parser for a config will that also stores bookmarks. So that now stores hashes as well and just has a data model for them in my main client struct. For those without that, using a database (SQLite is likely a perfect option for this use case) could be a good call, or saving to a JSON file and parsing it on client load... in either case it doesnt seem like too big a challenge. 

Anyway, just thought I'd report in after having gotten that working. 

Now to figure out sending local certificates to servers... I think I will have pretty good feature coverage after that.

Lastly, for any interested parties, Bombadillo now has a website and gopherspace (it will have a gemini mirror as well, just as soon as I get jetforce to work for me... I had some issues, but will be working through them):
http://bombadillo.colorfield.space
gopher://bombadillo.colorfield.space


From julien@typed-hole.org  Tue Oct  1 09:22:22 2019
From: julien@typed-hole.org (Julien Blanchard)
Date: Tue, 1 Oct 2019 10:22:22 +0200
Subject: TLS, TOFU and the Gemini security model
In-Reply-To: <1314197473.30244.1569879446073@ichabod.co-bxl>
References: <1314197473.30244.1569879446073@ichabod.co-bxl>
Message-ID: <66f350be-d7cd-4db6-a7de-13b00eb6f930@typed-hole.org>

> My takeaway regarding TOFU:
> - A tofu system was pretty trivial to set up
> - It seems to work pretty well
> - It took a bit to figure out how I wanted to handle certificates expiring
> - It leaves the client to determine how strict they want to be (will they allow a user to still retrieve data even with a bad cert?)
>
Thanks a lot for the feedback! Your devlog entry will help me a lot 
adding TOFU to Asuka.

> Lastly, for any interested parties, Bombadillo now has a website and gopherspace (it will have a gemini mirror as well, just as soon as I get jetforce to work for me... I had some issues, but will be working through them):
> http://bombadillo.colorfield.space
> gopher://bombadillo.colorfield.space

Bombadillo 2 is really cool, great work!


From jmcbray@carcosa.net  Tue Oct  1 12:49:51 2019
From: jmcbray@carcosa.net (Jason McBrayer)
Date: Tue, 01 Oct 2019 07:49:51 -0400
Subject: TLS, TOFU and the Gemini security model
In-Reply-To: <1314197473.30244.1569879446073@ichabod.co-bxl> (Brian Evans's
 message of "Mon, 30 Sep 2019 23:37:26 +0200 (CEST)")
References: <1314197473.30244.1569879446073@ichabod.co-bxl>
Message-ID: <87y2y43ctc.fsf@cassilda.carcosa.net>

Brian Evans <b__m__e at mailfence.com> writes:

> It is working really well so far. Of the active gemini servers the
> only one I get a bad certificate from is carcosa.net (which, with how
> I have built things, prevents the site from being visited at all).

Hmm. I'll fix the certificate today, by copying over my Let's Encrypt
certificates from the web server. What's wrong with the existing ones,
other than being self-signed?

-- 
Jason McBrayer      | ?Strange is the night where black stars rise,
jmcbray at carcosa.net | and strange moons circle through the skies,
                    | but stranger still is lost Carcosa.?
                    | ? Robert W. Chambers,The King in Yellow

From julien@typed-hole.org  Tue Oct  1 21:55:45 2019
From: julien@typed-hole.org (Julien Blanchard)
Date: Tue, 1 Oct 2019 22:55:45 +0200
Subject: [HELP] A weird issue when downloading files
Message-ID: <DE1254FE-94C3-4A0A-8764-2963A4D789A5@typed-hole.org>

Hello Geminauts,

I have a weird issue that came up when coding stuff on Asuka (my client) and maybe you can help. I?m adding support for opening whatever mime type a Gemini server is serving me.

The logic I implemented so far is:
- serve text/* in the client as usual
- serve the other mime types by downloading content to a temporary file and opening it with xdg-open, open...

In order to download the served content I first check the header as string, get its size as bytes, re-fetch the whole ?page? as bytes, reverse the bytes array, truncate it with the header length and finally reverse it again before writing it to a file.

My issue is I have to add an offset of 5 bytes to the truncation for the files to be readable and I have no idea why. I tested this offset on several servers that are serving images, tarballs...  and it looks consistent.

Does it ring a bell by any chance? Or maybe I?m doing all of this completely wrong.

From sean@conman.org  Tue Oct  1 23:04:56 2019
From: sean@conman.org (Sean Conner)
Date: Tue, 1 Oct 2019 18:04:56 -0400
Subject: [HELP] A weird issue when downloading files
In-Reply-To: <DE1254FE-94C3-4A0A-8764-2963A4D789A5@typed-hole.org>
References: <DE1254FE-94C3-4A0A-8764-2963A4D789A5@typed-hole.org>
Message-ID: <20191001220456.GA23636@brevard.conman.org>

It was thus said that the Great Julien Blanchard once stated:
> Hello Geminauts,
> 
> I have a weird issue that came up when coding stuff on Asuka (my client)
> and maybe you can help. I?m adding support for opening whatever mime type
> a Gemini server is serving me.
> 
> The logic I implemented so far is:
> - serve text/* in the client as usual
> - serve the other mime types by downloading content to a temporary file
>   and opening it with xdg-open, open...
> 
> In order to download the served content I first check the header as
> string, get its size as bytes, re-fetch the whole ?page? as bytes, reverse
> the bytes array, truncate it with the header length and finally reverse it
> again before writing it to a file.

  I'm not understanding what you are doing here.

  Here's how I would do this---read bytes until you have seen the CRLF [1].
That's the response from the server.  I then would parse that line of data
to get the response and MIME type.  Then all I need to do is continue
reading data from the server and write that data toa file.  Then launch the
external program.

> My issue is I have to add an offset of 5 bytes to the truncation for the
> files to be readable and I have no idea why. I tested this offset on
> several servers that are serving images, tarballs...  and it looks
> consistent.
> 
> Does it ring a bell by any chance? Or maybe I?m doing all of this
> completely wrong.

  Not really.  And whatever you are doing it seems overly complicated ... oh
wait ... you aren't using Python 3 by any chance, are you?

  -spc (just a stab in the dark ... )

[1]	ASCII character 13 and ASCII character 10

From julien@typed-hole.org  Wed Oct  2 09:12:25 2019
From: julien@typed-hole.org (Julien Blanchard)
Date: Wed, 2 Oct 2019 10:12:25 +0200
Subject: [HELP] A weird issue when downloading files
In-Reply-To: <20191001220456.GA23636@brevard.conman.org>
References: <DE1254FE-94C3-4A0A-8764-2963A4D789A5@typed-hole.org>
 <20191001220456.GA23636@brevard.conman.org>
Message-ID: <69fe6c46-db68-a2f9-8ed8-17252a82c329@typed-hole.org>


On 10/2/19 12:04 AM, Sean Conner wrote:
>    I'm not understanding what you are doing here.
I wanted to remove the header part in the most convoluted way possible :D
>    Here's how I would do this---read bytes until you have seen the CRLF [1].
> That's the response from the server.  I then would parse that line of data
> to get the response and MIME type.  Then all I need to do is continue
> reading data from the server and write that data toa file.  Then launch the
> external program.

OMG you're so right! I was trying to put a square peg in a round hole 
since I already
had the content splitted has two strings (header/body) when I should 
have re-thought
my parsing strategy the way you're describing directly at the bytes level.

>    Not really.  And whatever you are doing it seems overly complicated ... oh
> wait ... you aren't using Python 3 by any chance, are you?
>
>    -spc (just a stab in the dark ... )
>
> [1]	ASCII character 13 and ASCII character 10
I'm using Rust but I'm curious what the issue could be with python 3?

Anyway thanks a lot Sean! It helped a lot!


From solderpunk@SDF.ORG  Sun Oct  6 13:22:26 2019
From: solderpunk@SDF.ORG (solderpunk)
Date: Sun, 6 Oct 2019 12:22:26 +0000
Subject: Clarification of current spec
In-Reply-To: <20190920152247.GA17801@SDF.ORG>
References: <1564243588.89967.1568860411969@ichabod.co-bxl>
 <20190919054538.GA26574@brevard.conman.org>
 <20190920152247.GA17801@SDF.ORG>
Message-ID: <20191006122226.GA573@SDF.ORG>

> Since the link syntax already explicitly supports both spaces and tabs,
> IMHO it would be confusing and an invitation to implementation errors to
> explicitly define the response header as only supporting one or the
> other.  So, my vote would to be to clarify the spec by allowing both.

Since nobody objected, I've now updated the spec to clarify that the
whitespace in the response header behaves the same as the whitespace in
the link syntax.

Cheers,
Solderpunk

From jmcbray@carcosa.net  Thu Oct 10 23:44:48 2019
From: jmcbray@carcosa.net (Jason McBrayer)
Date: Thu, 10 Oct 2019 18:44:48 -0400
Subject: gusmobile, a Python library for Gemini requests
Message-ID: <871rvkxlsv.fsf@cassilda.carcosa.net>

Hi, all. Sorry for the lack of activity on my part. I've been a little
burned out on side projects for a while. But I took some time tonight to
get one into a shareable state.

Gusmobile is a Python library for making Gemini requests. It is mostly
extracted from AV-98, and simplified. At this point, probably
oversimplified; I need to add back in some of the complexities that
AV-98 handles. I'm planning on using it as the core of a graphical
Gemini browser for Gnome. It is not yet available from the Cheese Shop,
though I plan on submitting it fairly soon.

The source is at https://git.carcosa.net/jmcbray/gusmobile/.

-- 
Jason McBrayer      | ?Strange is the night where black stars rise,
jmcbray at carcosa.net | and strange moons circle through the skies,
                    | but stranger still is lost Carcosa.?
                    | ? Robert W. Chambers,The King in Yellow

From magnus@kalasarn.se  Fri Oct 11 00:52:18 2019
From: magnus@kalasarn.se (Magnus Wild)
Date: Fri, 11 Oct 2019 01:52:18 +0200
Subject: gusmobile, a Python library for Gemini requests
In-Reply-To: <871rvkxlsv.fsf@cassilda.carcosa.net>
References: <871rvkxlsv.fsf@cassilda.carcosa.net>
Message-ID: <20191010235216.rusu3clfgtgqs6jl@yasuna.kalasarn.se>

On Thu, Oct 10, 2019 at 06:44:48PM -0400, Jason McBrayer wrote:
> Gusmobile is a Python library for making Gemini requests. It is mostly
> extracted from AV-98, and simplified. At this point, probably
> oversimplified; I need to add back in some of the complexities that
> AV-98 handles. I'm planning on using it as the core of a graphical
> Gemini browser for Gnome. It is not yet available from the Cheese Shop,
> though I plan on submitting it fairly soon.
> 
> The source is at https://git.carcosa.net/jmcbray/gusmobile/.

Thanks for sharing! I'd like to play around with this a little
when I have the time. The "Graphical Gemini browser for gnome"
sounds interesting too... :)

/Magnus

From solderpunk@SDF.ORG  Sat Oct 12 21:38:12 2019
From: solderpunk@SDF.ORG (solderpunk)
Date: Sat, 12 Oct 2019 20:38:12 +0000
Subject: gusmobile, a Python library for Gemini requests
In-Reply-To: <871rvkxlsv.fsf@cassilda.carcosa.net>
References: <871rvkxlsv.fsf@cassilda.carcosa.net>
Message-ID: <20191012203812.GA2732@SDF.ORG>

This is great!  Thanks a lot for writing this.  I've added it to the
list of sotware at gemini://zaibatsu.circumlunar.space/software/.  It
will be nice to see what kind of things people might build on top of
this library.

Looking forward to hearing more about the progress on your graphical
client!

On Thu, Oct 10, 2019 at 06:44:48PM -0400, Jason McBrayer wrote:
> Hi, all. Sorry for the lack of activity on my part. I've been a little
> burned out on side projects for a while. But I took some time tonight to
> get one into a shareable state.
> 
> Gusmobile is a Python library for making Gemini requests. It is mostly
> extracted from AV-98, and simplified. At this point, probably
> oversimplified; I need to add back in some of the complexities that
> AV-98 handles. I'm planning on using it as the core of a graphical
> Gemini browser for Gnome. It is not yet available from the Cheese Shop,
> though I plan on submitting it fairly soon.
> 
> The source is at https://git.carcosa.net/jmcbray/gusmobile/.
> 
> -- 
> Jason McBrayer      | ?Strange is the night where black stars rise,
> jmcbray at carcosa.net | and strange moons circle through the skies,
>                     | but stranger still is lost Carcosa.?
>                     | ? Robert W. Chambers,The King in Yellow
> 

From solderpunk@SDF.ORG  Sun Oct 13 16:22:42 2019
From: solderpunk@SDF.ORG (solderpunk)
Date: Sun, 13 Oct 2019 15:22:42 +0000
Subject: Gemini best practices list
Message-ID: <20191013152242.GA12674@SDF.ORG>

Hi all,

At long last I've gotten around to implementing somebody else's good
idea and there is now a nascent official list of best practices for
implementing Gemini at
gemini://zaibatsu.circumlunar.space/docs/best-practices.txt.

Right now there's just some very basic stuff there but I look forward to
this evolving over time, in parallel with the actual protocol
specification.

Cheers,
Solderpunk

From solderpunk@SDF.ORG  Sun Oct 13 16:47:50 2019
From: solderpunk@SDF.ORG (solderpunk)
Date: Sun, 13 Oct 2019 15:47:50 +0000
Subject: Redirect loops and mazes
Message-ID: <20191013154750.GB12674@SDF.ORG>

One downside of Gemini's support for redirection is that poorly
written/configured servers can in principle get clients stuck in
infinite loops of redirects, or just lead clients on long chains of many
consecutive redirects.  High quality Gemini clients should be able to
recognise these conditions and escape, rather than just endlessly
following redirects and appearing to "lock up" to the user.

It occurs to me that, Sean, this kind of thing could be a very useful
addition to your already very useful Gemini client "torture test".  Do
you have any interest in coding this up?  I'm adding code to deal with
this in AV-98 now, and I hope that others will follow suit.  It would be
nice for people to be able to easily confirm that their escape logic is
working correctly.

-Solderpunk

From sean@conman.org  Sun Oct 13 23:23:30 2019
From: sean@conman.org (Sean Conner)
Date: Sun, 13 Oct 2019 18:23:30 -0400
Subject: Redirect loops and mazes
In-Reply-To: <20191013154750.GB12674@SDF.ORG>
References: <20191013154750.GB12674@SDF.ORG>
Message-ID: <20191013222330.GA13382@brevard.conman.org>

It was thus said that the Great solderpunk once stated:
> One downside of Gemini's support for redirection is that poorly
> written/configured servers can in principle get clients stuck in
> infinite loops of redirects, or just lead clients on long chains of many
> consecutive redirects.  High quality Gemini clients should be able to
> recognise these conditions and escape, rather than just endlessly
> following redirects and appearing to "lock up" to the user.
> 
> It occurs to me that, Sean, this kind of thing could be a very useful
> addition to your already very useful Gemini client "torture test".  Do
> you have any interest in coding this up?  

  Already done.  It took more time to write up the test page than it was to
write the code, which is just three lines:

function handler(_,_,loc)
  return 31,uurl.toa(uurl.merge(loc,{ path = tostring(uuid()) })),""
end

  And speaking of tests, have you finished the Gemini server torture test?

  -spc



From sean@conman.org  Sun Oct 13 23:57:05 2019
From: sean@conman.org (Sean Conner)
Date: Sun, 13 Oct 2019 18:57:05 -0400
Subject: Redirect loops and mazes
In-Reply-To: <20191013222330.GA13382@brevard.conman.org>
References: <20191013154750.GB12674@SDF.ORG>
 <20191013222330.GA13382@brevard.conman.org>
Message-ID: <20191013225705.GB13382@brevard.conman.org>

It was thus said that the Great Sean Conner once stated:
> It was thus said that the Great solderpunk once stated:
> > One downside of Gemini's support for redirection is that poorly
> > written/configured servers can in principle get clients stuck in
> > infinite loops of redirects, or just lead clients on long chains of many
> > consecutive redirects.  High quality Gemini clients should be able to
> > recognise these conditions and escape, rather than just endlessly
> > following redirects and appearing to "lock up" to the user.
> > 
> > It occurs to me that, Sean, this kind of thing could be a very useful
> > addition to your already very useful Gemini client "torture test".  Do
> > you have any interest in coding this up?  
> 
>   Already done.  It took more time to write up the test page than it was to
> write the code, which is just three lines:
> 
> function handler(_,_,loc)
>   return 31,uurl.toa(uurl.merge(loc,{ path = tostring(uuid()) })),""
> end
> 
>   And speaking of tests, have you finished the Gemini server torture test?

  Actually, let me amend that.  I made three tests (and the handler doubled
in size)---one to send a series of continuous temporary redirects, one to
send a series of permanent redirects, and one that will continously send a
random type of redirect.

  Anyway, have fun with the tests.

  -spc


From b__m__e@mailfence.com  Mon Oct 14 06:09:58 2019
From: b__m__e@mailfence.com (Brian Evans)
Date: Mon, 14 Oct 2019 07:09:58 +0200 (CEST)
Subject: Redirect loops and mazes
Message-ID: <233863856.61464.1571029798145@ichabod.co-bxl>

Solderpunk wrote:
> High quality Gemini clients should be able to
> recognise these conditions and escape, rather than just endlessly
> following redirects and appearing to "lock up" to the user.

I absolutely agree. Bombadillo, as a matter of transparency, notifies the user that a redirect 
has been requested and asks if they would like to follow it or not. This leaves it always in 
the user's hands whether or not to proceed.

I also think this would be a good addition to the torture test, though I am unsure as a way
to validate that a client behvaed correctly.

From b__m__e@mailfence.com  Mon Oct 14 06:21:27 2019
From: b__m__e@mailfence.com (Brian Evans)
Date: Mon, 14 Oct 2019 07:21:27 +0200 (CEST)
Subject: Connection Woes
Message-ID: <908432456.61813.1571030486961@ichabod.co-bxl>

Hi all. Things had been going pretty well for me and my client as far as gemini is concerned.
However, as of tonight I am getting prematurely dropped connections from a lot of servers.
Nothing in my code has changes (nothing that would have an effect on the connection).

My tls.Dial function returns an EOF error. This apparently occurs when the remote server
terminates the connection before the handshake is complete. If any of you running 
servers know why this might be happening I would greatly appreciate any input. I am
still able to reach most servers with AV-98... so I do not really understand the issue :-/

Semi-related, here is what I have as the current landscape:

gemini.conman.org - Up and no issues
zaibatsu.circumlunar.space - Up and no issues
typed-hole.org - Up and no issues
earthlight.xyz - Had a bad certificate, now I get this EOF issue
carcosa.net - Had bad certificate, now I get connection reset by peer
heavysquare.com - was Up/fine, now I get connection reset by peer
mozz.us - was up/fine, now I get EOF
tilde.black - was up (I love some of the content there in particular), now EOF
tilde.pink - was fine/up, now EOF
vger.cloud - was up/fine, now EOF
yam655.com - was up/fine, now EOF

As you can see, I am only able to visit a small subset of servers all of a sudden. The fact
that I am still able to visit any seems to indicate that the code has not broken (particularly
since it seems to be the remote host dropping connections in each case). Does anyone
see any pattern that makes sense? Maybe all of the EOFs are running the same server
software or something?

Any help or advice would be really appreciated. This is quite frustrating.

Thanks!

From b__m__e@mailfence.com  Mon Oct 14 06:35:32 2019
From: b__m__e@mailfence.com (Brian Evans)
Date: Mon, 14 Oct 2019 07:35:32 +0200 (CEST)
Subject: Connection Woes
Message-ID: <1358330813.62234.1571031332521@ichabod.co-bxl>

TLDR; Disregard my last email. Thank you for your time.

Ok. Weirdest thing, two hours later (only a bit later from the last e-mail),
everything is back to how it was. Very very strange. Again, no code change,
just suddenly working...

Actual lay of the land as I see it from my client:
 
gemini.conman.org - up and no issues
zaibatsu.circumlunar.space - up and no issues
typed-hole.org - up and no issues
earthlight.xyz - up/no issues
carcosa.net - host name does not match, bad certificate
heavysquare.com - up/no issues
mozz.us - up/no issues
tilde.black - up/no issues
tilde.pink - up/no issues
vger.cloud - up/no issues
yam655.com - up/no issues
dgold - permanently dead?
red consensus - permanently dead?



Again, sorry for the weird report in the last email. Thanks to anyone
who saw it and started looking into it. If there was any common ground
to those servers though (such as server software) it would be interesting
to know if there was a bug that may have caused a temporary issue or
something...

From solderpunk@SDF.ORG  Mon Oct 14 09:28:11 2019
From: solderpunk@SDF.ORG (solderpunk)
Date: Mon, 14 Oct 2019 08:28:11 +0000
Subject: Connection Woes
In-Reply-To: <1358330813.62234.1571031332521@ichabod.co-bxl>
References: <1358330813.62234.1571031332521@ichabod.co-bxl>
Message-ID: <20191014082811.GA13732@SDF.ORG>

> dgold - permanently dead?
> red consensus - permanently dead?

I'm touch with dgold via Mastodon and tfurrows via many channels.  I'll
politely poke them this evening to see what the situation is with these
servers.

-Solderpunk

From sean@conman.org  Mon Oct 14 10:23:48 2019
From: sean@conman.org (Sean Conner)
Date: Mon, 14 Oct 2019 05:23:48 -0400
Subject: Redirect loops and mazes
In-Reply-To: <233863856.61464.1571029798145@ichabod.co-bxl>
References: <233863856.61464.1571029798145@ichabod.co-bxl>
Message-ID: <20191014092348.GE13382@brevard.conman.org>

It was thus said that the Great Brian Evans once stated:
> Solderpunk wrote:
> > High quality Gemini clients should be able to
> > recognise these conditions and escape, rather than just endlessly
> > following redirects and appearing to "lock up" to the user.
> 
> I absolutely agree. Bombadillo, as a matter of transparency, notifies the user that a redirect 
> has been requested and asks if they would like to follow it or not. This leaves it always in 
> the user's hands whether or not to proceed.
> 
> I also think this would be a good addition to the torture test, though I am unsure as a way
> to validate that a client behvaed correctly.

  Point the client to any of the following:

	gemini://gemini.conman.org/test/redirhell/
	gemini://gemini.conman.org/test/redirhell2/
	gemini://gemini.conman.org/test/redirhell3/
	gemini://gemini.conman.org/test/redirhell4
	gemini://gemini.conman.org/test/redirhell5

  (NOTE:  the links will continuously redirect)

  I suspect that most would expect the client to stop making requests after
N redirects.  What's N?  That hasn't been decided yet.

  -spc


  

From sean@conman.org  Mon Oct 14 10:26:16 2019
From: sean@conman.org (Sean Conner)
Date: Mon, 14 Oct 2019 05:26:16 -0400
Subject: Connection Woes
In-Reply-To: <1358330813.62234.1571031332521@ichabod.co-bxl>
References: <1358330813.62234.1571031332521@ichabod.co-bxl>
Message-ID: <20191014092615.GF13382@brevard.conman.org>

It was thus said that the Great Brian Evans once stated:
> 
> Again, sorry for the weird report in the last email. Thanks to anyone
> who saw it and started looking into it. If there was any common ground
> to those servers though (such as server software) it would be interesting
> to know if there was a bug that may have caused a temporary issue or
> something...

  I'll start ...

	gemini.conman.org	GLV-1.12556 [1]

  -spc

[1]	Written in Lua
	https://github.com/spc476/GLV-1.12556

From plugd@thelambdalab.xyz  Mon Oct 14 13:01:40 2019
From: plugd@thelambdalab.xyz (plugd)
Date: Mon, 14 Oct 2019 14:01:40 +0200
Subject: Redirect loops and mazes
In-Reply-To: <20191014092348.GE13382@brevard.conman.org>
References: <233863856.61464.1571029798145@ichabod.co-bxl>
 <20191014092348.GE13382@brevard.conman.org>
Message-ID: <lzk197v8m3.fsf@bs-mbpr348.d.ethz.ch>


Sean Conner writes:
>   Point the client to any of the following:
>
> 	gemini://gemini.conman.org/test/redirhell/
> 	gemini://gemini.conman.org/test/redirhell2/
> 	gemini://gemini.conman.org/test/redirhell3/
> 	gemini://gemini.conman.org/test/redirhell4
> 	gemini://gemini.conman.org/test/redirhell5
>
>   (NOTE:  the links will continuously redirect)

Thanks Sean, this is great.

>   I suspect that most would expect the client to stop making requests after
> N redirects.  What's N?  That hasn't been decided yet.

In addition to a redirect threshold, it's of course also easy for
clients to keep track of the addresses seen during a redirect sequence,
in which case they can just abort on a redirect to a seen address.

plugd


From tiwesdaeg@tilde.pink  Mon Oct 14 15:17:13 2019
From: tiwesdaeg@tilde.pink (tiwesdaeg@tilde.pink)
Date: Mon, 14 Oct 2019 14:17:13 +0000
Subject: Connection Woes
In-Reply-To: <20191014092615.GF13382@brevard.conman.org>
References: <1358330813.62234.1571031332521@ichabod.co-bxl>
 <20191014092615.GF13382@brevard.conman.org>
Message-ID: <20191014141713.5t3xvodzmb5pbf4e@tilde.pink>

On Mon, Oct 14, 2019 at 05:26:16AM -0400, Sean Conner wrote:
> It was thus said that the Great Brian Evans once stated:
> > 
> > Again, sorry for the weird report in the last email. Thanks to anyone
> > who saw it and started looking into it. If there was any common ground
> > to those servers though (such as server software) it would be interesting
> > to know if there was a bug that may have caused a temporary issue or
> > something...
> 
>   I'll start ...
> 
> 	gemini.conman.org	GLV-1.12556 [1]
> 
>   -spc
> 
> [1]	Written in Lua
> 	https://github.com/spc476/GLV-1.12556

	tilde.pink		Jetforce v0.1.0


From plugd@thelambdalab.xyz  Mon Oct 14 16:45:54 2019
From: plugd@thelambdalab.xyz (plugd)
Date: Mon, 14 Oct 2019 17:45:54 +0200
Subject: Redirect loops and mazes
In-Reply-To: <20191013225705.GB13382@brevard.conman.org>
References: <20191013154750.GB12674@SDF.ORG>
 <20191013222330.GA13382@brevard.conman.org>
 <20191013225705.GB13382@brevard.conman.org>
Message-ID: <lzimoruy8d.fsf@bs-mbpr348.d.ethz.ch>

Hi Sean,

Sean Conner writes:
>   Anyway, have fun with the tests.

Thanks for these, they're very useful.

I notice that you've added a sixth test at
gemini://gemini.conman.org/test/torture/0027 which redirects to a
non-gemini (gopher) URL.  Unless my reading comprehension is failing me,
the explanatory text suggests that correct handling of this redirect
should be for the client to open the gopher URL.

Is this behaviour really desirable?

I vote for no.  The text/gemini files already support links to
non-gemini URLs.  Allowing server-directed redirects to non-gemini URLs
would simply mean that I could no longer be sure that a gemini:// URL
would access a gemini resource.  Meaning that I could no longer be sure
that the transaction is encrypted.  And that's just with gopher - the
server could make all sorts of surprising things happen on my computer
if the client happens to support other protocols.

plugd


From solderpunk@SDF.ORG  Mon Oct 14 16:55:59 2019
From: solderpunk@SDF.ORG (solderpunk)
Date: Mon, 14 Oct 2019 15:55:59 +0000
Subject: Redirect loops and mazes
In-Reply-To: <lzk197v8m3.fsf@bs-mbpr348.d.ethz.ch>
References: <233863856.61464.1571029798145@ichabod.co-bxl>
 <20191014092348.GE13382@brevard.conman.org>
 <lzk197v8m3.fsf@bs-mbpr348.d.ethz.ch>
Message-ID: <20191014155559.GA12565@SDF.ORG>

> Thanks Sean, this is great.

It is, indeed, thanks very much.  Happily, my AV-98 code worked as
expected without any changes.
 
> >   I suspect that most would expect the client to stop making requests after
> > N redirects.  What's N?  That hasn't been decided yet.

I decided to set N to 5 for now, and was happily surprised to see at
your test page that this very value was also (once) recommended for the
same purpose in HTTP via an RFC.  If nobody wants to argue strongly for
a higher/lower value, I will recommend 5 in the new "best practices"
document - this is exactly the kind of thing that I imagined that
document being good for.
 
> In addition to a redirect threshold, it's of course also easy for
> clients to keep track of the addresses seen during a redirect sequence,
> in which case they can just abort on a redirect to a seen address.

AV-98 does precisely this, too.

-Solderpunk


From solderpunk@SDF.ORG  Mon Oct 14 16:56:52 2019
From: solderpunk@SDF.ORG (solderpunk)
Date: Mon, 14 Oct 2019 15:56:52 +0000
Subject: Connection Woes
In-Reply-To: <20191014141713.5t3xvodzmb5pbf4e@tilde.pink>
References: <1358330813.62234.1571031332521@ichabod.co-bxl>
 <20191014092615.GF13382@brevard.conman.org>
 <20191014141713.5t3xvodzmb5pbf4e@tilde.pink>
Message-ID: <20191014155652.GB12565@SDF.ORG>

> 
> 	tilde.pink		Jetforce v0.1.0
> 
zaibatsu.circumlunar.space	GeGoBi

But not for long!  Stay tuned...


From solderpunk@SDF.ORG  Mon Oct 14 17:20:47 2019
From: solderpunk@SDF.ORG (solderpunk)
Date: Mon, 14 Oct 2019 16:20:47 +0000
Subject: Redirect loops and mazes
In-Reply-To: <20191013222330.GA13382@brevard.conman.org>
References: <20191013154750.GB12674@SDF.ORG>
 <20191013222330.GA13382@brevard.conman.org>
Message-ID: <20191014162047.GD12565@SDF.ORG>

> 
>   And speaking of tests, have you finished the Gemini server torture test?
> 
Not only have I not finished them, it took me an embarrassingly long
time to remember which tests you were talking about.  Yikes!  I'll
try to get these published sometime soon - along, perhaps, with my
long-stagnant 100 line Lua client, which I'm expecting you'll be able to
improve substantially...

-Solderpunk

From solderpunk@SDF.ORG  Mon Oct 14 17:28:44 2019
From: solderpunk@SDF.ORG (solderpunk)
Date: Mon, 14 Oct 2019 16:28:44 +0000
Subject: Redirect loops and mazes
In-Reply-To: <lzimoruy8d.fsf@bs-mbpr348.d.ethz.ch>
References: <20191013154750.GB12674@SDF.ORG>
 <20191013222330.GA13382@brevard.conman.org>
 <20191013225705.GB13382@brevard.conman.org>
 <lzimoruy8d.fsf@bs-mbpr348.d.ethz.ch>
Message-ID: <20191014162844.GE12565@SDF.ORG>

> Is this behaviour really desirable?
> 
> I vote for no.  The text/gemini files already support links to
> non-gemini URLs.  Allowing server-directed redirects to non-gemini URLs
> would simply mean that I could no longer be sure that a gemini:// URL
> would access a gemini resource.  Meaning that I could no longer be sure
> that the transaction is encrypted.  And that's just with gopher - the
> server could make all sorts of surprising things happen on my computer
> if the client happens to support other protocols.

Hmm, good question!

I share the intuition that cross-protocol redirects violate the
principle of least surpise, and also make URLs non-transparent.  I mean,
redirects do that to some extent anyway, which is why some clients (like
Bombadillo) request explicit confirmation before following any (I may
add this as a user-specifiable option to AV-98), but cross-protocol
redirects are arguably as bad as it gets.

I think I'd be happy to explicitly forbid these in the spec, unless
somebody can think of a compelling legitimate use case?

-Solderpunk

From sean@conman.org  Mon Oct 14 21:18:35 2019
From: sean@conman.org (Sean Conner)
Date: Mon, 14 Oct 2019 16:18:35 -0400
Subject: Redirect loops and mazes
In-Reply-To: <20191014162047.GD12565@SDF.ORG>
References: <20191013154750.GB12674@SDF.ORG>
 <20191013222330.GA13382@brevard.conman.org> <20191014162047.GD12565@SDF.ORG>
Message-ID: <20191014201835.GG13382@brevard.conman.org>

It was thus said that the Great solderpunk once stated:
> > 
> >   And speaking of tests, have you finished the Gemini server torture test?
> > 
> Not only have I not finished them, it took me an embarrassingly long
> time to remember which tests you were talking about.  Yikes!  I'll
> try to get these published sometime soon - along, perhaps, with my
> long-stagnant 100 line Lua client, which I'm expecting you'll be able to
> improve substantially...

  Well, my own very simplistic Lua client is 171 lines of code so ...

  -spc


From Bradley@NorthTech.US  Mon Oct 14 23:33:24 2019
From: Bradley@NorthTech.US (Bradley D. Thornton)
Date: Mon, 14 Oct 2019 15:33:24 -0700
Subject: Connection Woes
In-Reply-To: <20191014141713.5t3xvodzmb5pbf4e@tilde.pink>
References: <1358330813.62234.1571031332521@ichabod.co-bxl>
 <20191014092615.GF13382@brevard.conman.org>
 <20191014141713.5t3xvodzmb5pbf4e@tilde.pink>
Message-ID: <cd5ca49e-d766-7818-9559-3b1faff63ed0@NorthTech.US>



On 10/14/2019 7:17 AM, tiwesdaeg at tilde.pink wrote:
> On Mon, Oct 14, 2019 at 05:26:16AM -0400, Sean Conner wrote:
>>
>>   I'll start ...
>>
>> 	gemini.conman.org	GLV-1.12556 [1]
>>
>>   -spc
>>
>> [1]	Written in Lua
>> 	https://github.com/spc476/GLV-1.12556
> 
> 	tilde.pink		Jetforce v0.1.0
>

	Vger.Cloud		Jetforce v0.0.7


-- 
Bradley D. Thornton
Manager Network Services
http://NorthTech.US
TEL: +1.310.421.8268

From Bradley@NorthTech.US  Tue Oct 15 00:03:21 2019
From: Bradley@NorthTech.US (Bradley D. Thornton)
Date: Mon, 14 Oct 2019 16:03:21 -0700
Subject: Redirect loops and mazes
In-Reply-To: <lzimoruy8d.fsf@bs-mbpr348.d.ethz.ch>
References: <20191013154750.GB12674@SDF.ORG>
 <20191013222330.GA13382@brevard.conman.org>
 <20191013225705.GB13382@brevard.conman.org>
 <lzimoruy8d.fsf@bs-mbpr348.d.ethz.ch>
Message-ID: <e2a6fb3f-913e-cb1d-c0dd-1cb52d13be53@NorthTech.US>

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA256



On 10/14/2019 8:45 AM, plugd wrote:

> 
> Sean Conner writes:
>> Anyway, have fun with the tests.
> 
> Thanks for these, they're very useful.
> 
> I notice that you've added a sixth test at 
> gemini://gemini.conman.org/test/torture/0027 which redirects to a 
> non-gemini (gopher) URL.  Unless my reading comprehension is
> failing me, the explanatory text suggests that correct handling of
> this redirect should be for the client to open the gopher URL.
> 
> Is this behaviour really desirable?
> 
> I vote for no.  The text/gemini files already support links to 
> non-gemini URLs.  Allowing server-directed redirects to non-gemini
> URLs would simply mean that I could no longer be sure that a
> gemini:// URL would access a gemini resource.  Meaning that I could
> no longer be sure that the transaction is encrypted.  And that's
> just with gopher - the server could make all sorts of surprising
> things happen on my computer if the client happens to support other
> protocols.
> 

I can't see any value in server redirects to other protocols,
especially since many clients will not support other protocols, and of
those, the one's that will actually be part of the effect that
launches another client (i.e, Gopher client, Web browser, etc.) will
likely be few and far between.

The test itself is great but, given the potential to wreak havoc
client side, don't think it's advisable too permit. Even in the case
of Elpher, I'm not comfortable as a user visiting a Gemini site and
encountering a server redirect to a Gopher resource even though the
client does support that.

I'm advocating 'shall not' or 'must not' in the curent Gemini specs.

- -- 
Bradley D. Thornton
Manager Network Services
http://NorthTech.US
TEL: +1.310.421.8268
-----BEGIN PGP SIGNATURE-----
Comment: Find this cert at hkps://keys.openpgp.org
Comment: Using GnuPG with Thunderbird - https://www.enigmail.net/

iQEzBAEBCAAdFiEENWT7St9Eg6sLyiLAuIw5wQytyEkFAl2k/rEACgkQuIw5wQyt
yEl/qQf/f1QqohMMr8IcLtgdb+bVKqt6z/pJjNq5mTJtttogPlpzKkOT5al1CpFI
PoxedbQqdqc9zwu5vakuf+q7CWt+67ERJEIRsY38WGdZtVOgXWyOMyCGkdsNJR8O
9x/Fw5tpgJULPiEWpbL0AfaE0Y8+I7VYOSlesZz7Ex6a6wcVGFh/dCTCwlbj9bI3
CWQ+D4naCoPCiBm3cVZoVuXJ94VMZnw4+5Ij3kD7ATYmhylfrNrWf3x41oSoXEEs
bEs4Wgv7l5xX0gRa22yRcsaXLiOwbCJBDxHYkEwJNAWV/lJLc9Pi0Ky4A/q6qJfi
+S4DcYVWQDno9hQE7ml1T9j229ubzQ==
=fSFE
-----END PGP SIGNATURE-----

From sean@conman.org  Tue Oct 15 00:24:59 2019
From: sean@conman.org (Sean Conner)
Date: Mon, 14 Oct 2019 19:24:59 -0400
Subject: Redirect loops and mazes
In-Reply-To: <20191014162844.GE12565@SDF.ORG>
References: <20191013154750.GB12674@SDF.ORG>
 <20191013222330.GA13382@brevard.conman.org>
 <20191013225705.GB13382@brevard.conman.org>
 <lzimoruy8d.fsf@bs-mbpr348.d.ethz.ch> <20191014162844.GE12565@SDF.ORG>
Message-ID: <20191014232459.GH13382@brevard.conman.org>

It was thus said that the Great solderpunk once stated:
> > Is this behaviour really desirable?
> > 
> > I vote for no.  The text/gemini files already support links to
> > non-gemini URLs.  Allowing server-directed redirects to non-gemini URLs
> > would simply mean that I could no longer be sure that a gemini:// URL
> > would access a gemini resource.  Meaning that I could no longer be sure
> > that the transaction is encrypted.  And that's just with gopher - the
> > server could make all sorts of surprising things happen on my computer
> > if the client happens to support other protocols.
> 
> Hmm, good question!
> 
> I share the intuition that cross-protocol redirects violate the
> principle of least surpise, and also make URLs non-transparent.  I mean,
> redirects do that to some extent anyway, which is why some clients (like
> Bombadillo) request explicit confirmation before following any (I may
> add this as a user-specifiable option to AV-98), but cross-protocol
> redirects are arguably as bad as it gets.
> 
> I think I'd be happy to explicitly forbid these in the spec, unless
> somebody can think of a compelling legitimate use case?

  Possible actions:

	client denies the redirect
	client denies redirects to non TLS-protocols
		otherwise, redirects
	client asks to redirect or not
	client asks to redirect to non-TLS protocol,
		othersise redirects,
	client warns user about redirect
	client warns user about redirect to non-TLS protocol
	client does redirect

  I think that covers all possible actions.  If it were left up to me, I
would probably say "ask for redirect to non-TLS, otherwise, warn (or
mention) about redirect".

  -spc



From solderpunk@SDF.ORG  Tue Oct 15 09:49:19 2019
From: solderpunk@SDF.ORG (solderpunk)
Date: Tue, 15 Oct 2019 08:49:19 +0000
Subject: Connection Woes
In-Reply-To: <20191014082811.GA13732@SDF.ORG>
References: <1358330813.62234.1571031332521@ichabod.co-bxl>
 <20191014082811.GA13732@SDF.ORG>
Message-ID: <20191015084919.GA28322@SDF.ORG>

> I'm touch with dgold via Mastodon and tfurrows via many channels.  I'll
> politely poke them this evening to see what the situation is with these
> servers.

The Gemini server at the Red Consensus is back!  The software was not
automatically restarting after system reboots, and tfurrows hadn't
noticed the outage.  He's going to try to fix this, but in general
disappearances should be attributed to it being "unreliable" rather than
deliberately "gone".

I've not heard back yet from dgold.

-Solderpunk

From solderpunk@SDF.ORG  Wed Oct 16 17:35:08 2019
From: solderpunk@SDF.ORG (solderpunk)
Date: Wed, 16 Oct 2019 16:35:08 +0000
Subject: Redirect loops and mazes
In-Reply-To: <20191014232459.GH13382@brevard.conman.org>
References: <20191013154750.GB12674@SDF.ORG>
 <20191013222330.GA13382@brevard.conman.org>
 <20191013225705.GB13382@brevard.conman.org>
 <lzimoruy8d.fsf@bs-mbpr348.d.ethz.ch>
 <20191014162844.GE12565@SDF.ORG>
 <20191014232459.GH13382@brevard.conman.org>
Message-ID: <20191016163508.GA24885@SDF.ORG>

On Mon, Oct 14, 2019 at 07:24:59PM -0400, Sean Conner wrote:
>   Possible actions:
> 
> 	client denies the redirect
> 	client denies redirects to non TLS-protocols
> 		otherwise, redirects
> 	client asks to redirect or not
> 	client asks to redirect to non-TLS protocol,
> 		othersise redirects,
> 	client warns user about redirect
> 	client warns user about redirect to non-TLS protocol
> 	client does redirect
> 

Those seem to be all the sensible options.

My initial instinct was to say something along the lines of: explicitly
prohibiting the scariest possible kind of redirect in the spec permits
client writers to take the easier route (both in terms of implementation
effort and smoothness of user experience) of automatically following
redirects with the understanding that the risk posed is minimal.

But that's not quite true, actually.  Just because the spec says
cross-protocol redirects are forbidden doesn't mean malicious servers
couldn't serve them up anyway.  So well-written clients need to be on
the lookout for this anyway, no matter what the spec says.  I guess at
the very least this point should be mentioned in the Best Practices doc
so it's not overlooked by client iplementors.

This is not to say it isn't still worthwhile forbidding them in the
spec.  I think I'm still inclined to do this if nobody comes forward
with a compelling use case.

-Solderpunk


From solderpunk@SDF.ORG  Wed Oct 16 17:51:07 2019
From: solderpunk@SDF.ORG (solderpunk)
Date: Wed, 16 Oct 2019 16:51:07 +0000
Subject: text/gemini to RSS
Message-ID: <20191016165107.GB24885@SDF.ORG>

While I haven't forgotten about the still unresolved issue of text
wrapping, I have to see that *aside* from this, Gemini is starting to
seem pretty stable.  Most parts of the spec are well-established now and
we have multiple server and client iplementations.

For the project to really move forward from here I feel that what's
needed is more content on Gemini, especially content which is *only* on
Gemini.  I am planning to launch an sftp-managed free Gemini host in the
near future, basically a Gemini companion to the Ziabatsu, wich I hope
will provide an easy means for this, for folk who are interested but not
able or willing to commit to running their own server.  Stay tuned on
that front!

But content alone is not enough, what's needed is an easy way for people
to find and monitor this content, in a more convenient way than manually
checking each page every day.  IMHO the Bongusta phlog aggregator had a
*tremendous* positive effect on the phlogosphere.  An equivalent of
Bongusta for Geminispace would be grand.

Of course, there's no moku-pona equivalent for Gemini yet.  And while
somebody could write one, a much more robust possibility would be for
Gemini - in the spirit of pulling the very best ideas from the web into
something more closely resembling Gopherspace - to adopt a culture of
using RSS.

If somebody is looking for a relatively simple software project related
to Gemini, it could be very handy to have a script which reads a Gemini
map from a local file, and writes out an RSS document where each link in
the Gemini map becomes an RSS entry.  Then people writing "Gemini logs"
could run this as a cron job, pointing it at the main menu of their log.

If such a thing were to materialise, I'd be very happy for my upcoming
Gemini hosting provider to also host a Geminispace aggregator.

-Solderpunk


From sean@conman.org  Wed Oct 16 18:23:11 2019
From: sean@conman.org (Sean Conner)
Date: Wed, 16 Oct 2019 13:23:11 -0400
Subject: Redirect loops and mazes
In-Reply-To: <20191016163508.GA24885@SDF.ORG>
References: <20191013154750.GB12674@SDF.ORG>
 <20191013222330.GA13382@brevard.conman.org>
 <20191013225705.GB13382@brevard.conman.org>
 <lzimoruy8d.fsf@bs-mbpr348.d.ethz.ch> <20191014162844.GE12565@SDF.ORG>
 <20191014232459.GH13382@brevard.conman.org> <20191016163508.GA24885@SDF.ORG>
Message-ID: <20191016172311.GA5618@brevard.conman.org>

It was thus said that the Great solderpunk once stated:
> 
> But that's not quite true, actually.  Just because the spec says
> cross-protocol redirects are forbidden doesn't mean malicious servers
> couldn't serve them up anyway.  So well-written clients need to be on
> the lookout for this anyway, no matter what the spec says.  I guess at
> the very least this point should be mentioned in the Best Practices doc
> so it's not overlooked by client iplementors.
> 
> This is not to say it isn't still worthwhile forbidding them in the
> spec.  I think I'm still inclined to do this if nobody comes forward
> with a compelling use case.

  What about content being moved from Gemini to TOR? [1]  Or an archive file
that grew too big to be safely served from Gemini so a switch to HTTPS is in
order? (and you don't want to break an existing link)

  I can see disuading people from doing that, but an ourright ban seems
excessive (to me).

  -spc

[1]	I'm not sure how stuff is addressed with TOR.

From sean@conman.org  Wed Oct 16 18:40:33 2019
From: sean@conman.org (Sean Conner)
Date: Wed, 16 Oct 2019 13:40:33 -0400
Subject: text/gemini to RSS
In-Reply-To: <20191016165107.GB24885@SDF.ORG>
References: <20191016165107.GB24885@SDF.ORG>
Message-ID: <20191016174033.GB5618@brevard.conman.org>

It was thus said that the Great solderpunk once stated:
> 
> Of course, there's no moku-pona equivalent for Gemini yet.  And while
> somebody could write one, a much more robust possibility would be for
> Gemini - in the spirit of pulling the very best ideas from the web into
> something more closely resembling Gopherspace - to adopt a culture of
> using RSS.

  Which version of RSS?  There are multiple, not-at-all compatible, versions
of RSS [1].

  -spc

[1]	Seriously.

From julien@typed-hole.org  Wed Oct 16 18:58:25 2019
From: julien@typed-hole.org (Julien Blanchard)
Date: Wed, 16 Oct 2019 19:58:25 +0200
Subject: text/gemini to RSS
In-Reply-To: <20191016165107.GB24885@SDF.ORG>
References: <20191016165107.GB24885@SDF.ORG>
Message-ID: <81BB7C2D-6D56-49AC-B3D9-8E447DE96BEA@typed-hole.org>

That?s a great proposal, I briefly started some kind of moku-pona clone with a hash of the content but RSS is clearly superior. I?ll try to make such a tool.

> Le 16 oct. 2019 ? 18:51, solderpunk <solderpunk at sdf.org> a ?crit :
> 
> ?While I haven't forgotten about the still unresolved issue of text
> wrapping, I have to see that *aside* from this, Gemini is starting to
> seem pretty stable.  Most parts of the spec are well-established now and
> we have multiple server and client iplementations.
> 
> For the project to really move forward from here I feel that what's
> needed is more content on Gemini, especially content which is *only* on
> Gemini.  I am planning to launch an sftp-managed free Gemini host in the
> near future, basically a Gemini companion to the Ziabatsu, wich I hope
> will provide an easy means for this, for folk who are interested but not
> able or willing to commit to running their own server.  Stay tuned on
> that front!
> 
> But content alone is not enough, what's needed is an easy way for people
> to find and monitor this content, in a more convenient way than manually
> checking each page every day.  IMHO the Bongusta phlog aggregator had a
> *tremendous* positive effect on the phlogosphere.  An equivalent of
> Bongusta for Geminispace would be grand.
> 
> Of course, there's no moku-pona equivalent for Gemini yet.  And while
> somebody could write one, a much more robust possibility would be for
> Gemini - in the spirit of pulling the very best ideas from the web into
> something more closely resembling Gopherspace - to adopt a culture of
> using RSS.
> 
> If somebody is looking for a relatively simple software project related
> to Gemini, it could be very handy to have a script which reads a Gemini
> map from a local file, and writes out an RSS document where each link in
> the Gemini map becomes an RSS entry.  Then people writing "Gemini logs"
> could run this as a cron job, pointing it at the main menu of their log.
> 
> If such a thing were to materialise, I'd be very happy for my upcoming
> Gemini hosting provider to also host a Geminispace aggregator.
> 
> -Solderpunk


From gemini@yotam.net  Wed Oct 16 19:27:09 2019
From: gemini@yotam.net (Yotam Nachum)
Date: Wed, 16 Oct 2019 21:27:09 +0300
Subject: text/gemini to RSS
In-Reply-To: <20191016174033.GB5618@brevard.conman.org>
References: <20191016165107.GB24885@SDF.ORG>
 <20191016174033.GB5618@brevard.conman.org>
Message-ID: <232c7e0c-8b85-47fc-9898-f713def48ad4@www.fastmail.com>

>  Which version of RSS? There are multiple, not-at-all compatible, versions
> of RSS [1].

There are really only two relevant options (that I know of, please
correct me if I missed anything), RSS 2.0 and Atom 1.0.

>From the little I know about web syndication, RSS seems to be more
popular but Atom is better standardized. Because Gemini is a new
protocol without any legacy to keep I think Atom would be the better
choice.

From sean@conman.org  Wed Oct 16 19:44:52 2019
From: sean@conman.org (Sean Conner)
Date: Wed, 16 Oct 2019 14:44:52 -0400
Subject: text/gemini to RSS
In-Reply-To: <232c7e0c-8b85-47fc-9898-f713def48ad4@www.fastmail.com>
References: <20191016165107.GB24885@SDF.ORG>
 <20191016174033.GB5618@brevard.conman.org>
 <232c7e0c-8b85-47fc-9898-f713def48ad4@www.fastmail.com>
Message-ID: <20191016184452.GC5618@brevard.conman.org>

It was thus said that the Great Yotam Nachum once stated:
> >  Which version of RSS? There are multiple, not-at-all compatible, versions
> > of RSS [1].
> 
> There are really only two relevant options (that I know of, please
> correct me if I missed anything), RSS 2.0 and Atom 1.0.

  Heh.  My blog is still serving up RSS 0.91 (just checked).

> >From the little I know about web syndication, RSS seems to be more
> popular but Atom is better standardized. Because Gemini is a new
> protocol without any legacy to keep I think Atom would be the better
> choice.

  I concur (I also have an Atom feed for my blog).

  -spc

From plugd@thelambdalab.xyz  Thu Oct 17 08:06:10 2019
From: plugd@thelambdalab.xyz (plugd)
Date: Thu, 17 Oct 2019 09:06:10 +0200
Subject: Redirect loops and mazes
In-Reply-To: <20191016172311.GA5618@brevard.conman.org>
References: <20191013154750.GB12674@SDF.ORG>
 <20191013222330.GA13382@brevard.conman.org>
 <20191013225705.GB13382@brevard.conman.org>
 <lzimoruy8d.fsf@bs-mbpr348.d.ethz.ch> <20191014162844.GE12565@SDF.ORG>
 <20191014232459.GH13382@brevard.conman.org> <20191016163508.GA24885@SDF.ORG>
 <20191016172311.GA5618@brevard.conman.org>
Message-ID: <lzpnivdf6l.fsf@bs-mbpr348.d.ethz.ch>

Hi Sean,

Sean Conner writes:
>   What about content being moved from Gemini to TOR? [1]  Or an archive file
> that grew too big to be safely served from Gemini so a switch to HTTPS is in
> order? (and you don't want to break an existing link)

In these edge cases, wouldn't it be preferable to simply serve up a
text/gemini page with explicit information re the new link?

plugd


From Bradley@NorthTech.US  Thu Oct 17 11:51:36 2019
From: Bradley@NorthTech.US (Bradley D. Thornton)
Date: Thu, 17 Oct 2019 03:51:36 -0700
Subject: Redirect loops and mazes
In-Reply-To: <lzpnivdf6l.fsf@bs-mbpr348.d.ethz.ch>
References: <20191013154750.GB12674@SDF.ORG>
 <20191013222330.GA13382@brevard.conman.org>
 <20191013225705.GB13382@brevard.conman.org>
 <lzimoruy8d.fsf@bs-mbpr348.d.ethz.ch> <20191014162844.GE12565@SDF.ORG>
 <20191014232459.GH13382@brevard.conman.org> <20191016163508.GA24885@SDF.ORG>
 <20191016172311.GA5618@brevard.conman.org>
 <lzpnivdf6l.fsf@bs-mbpr348.d.ethz.ch>
Message-ID: <2c291827-a9ae-2081-bea5-91633d47e4db@NorthTech.US>



On 10/17/2019 12:06 AM, plugd wrote:
> Hi Sean,
> 
> Sean Conner writes:
>>   What about content being moved from Gemini to TOR? [1]  Or an archive file
>> that grew too big to be safely served from Gemini so a switch to HTTPS is in
>> order? (and you don't want to break an existing link)
> 
> In these edge cases, wouldn't it be preferable to simply serve up a
> text/gemini page with explicit information re the new link?
> 

I think so.

If the resource is a .gmi file that's been moved to say, a .html or
.gophermap on another protocol then there's almost certainly a link
pointing to the page that has been moved, and that link can be changed
to provide the correct new URL.

In the case of a link where a server redirect to the other protocol and
resource would be performed, again, simply changing the link itself in
the index.gmi would affect this change without having to hijack the
users client, expecting it to be aware of different protocols itself.

In the case where a resource has been moved and may have had outside
referrers, a .gmi file with a link to the new URL will retain control
over the action by the client.

So for those, I still don't see a compelling use case for out of band
server-side redirects.

But what if the resource is say, an iso file, and that image has been
moved somewhere else? I'm thinking an in-band server redirect to a .gmi
file explaining the new location along with a link would be better than
an out of band redirect to some other protocol.

-- 
Bradley D. Thornton
Manager Network Services
http://NorthTech.US
TEL: +1.310.421.8268

From jmcbray@carcosa.net  Thu Oct 17 13:02:46 2019
From: jmcbray@carcosa.net (Jason McBrayer)
Date: Thu, 17 Oct 2019 08:02:46 -0400
Subject: text/gemini to RSS
In-Reply-To: <81BB7C2D-6D56-49AC-B3D9-8E447DE96BEA@typed-hole.org> (Julien
 Blanchard's message of "Wed, 16 Oct 2019 19:58:25 +0200")
References: <20191016165107.GB24885@SDF.ORG>
 <81BB7C2D-6D56-49AC-B3D9-8E447DE96BEA@typed-hole.org>
Message-ID: <87eezbzijd.fsf@cassilda.carcosa.net>

Julien Blanchard <julien at typed-hole.org> writes:

> That?s a great proposal, I briefly started some kind of moku-pona
> clone with a hash of the content but RSS is clearly superior. I?ll try
> to make such a tool.

Awesome. One of my motivations in pulling out the networking from AV-98
into gusmobile, instead of just building it into Voskhod, was to enable
me to write a simple moku-pona equivalent, as well as a crawler for a
search engine. But I'm bound to be very slow about doing any such thing,
so anyone else's efforts are greatly appreciated.

-- 
Jason McBrayer      | ?Strange is the night where black stars rise,
jmcbray at carcosa.net | and strange moons circle through the skies,
                    | but stranger still is lost Carcosa.?
                    | ? Robert W. Chambers,The King in Yellow

From julien@typed-hole.org  Thu Oct 17 18:04:53 2019
From: julien@typed-hole.org (Julien Blanchard)
Date: Thu, 17 Oct 2019 19:04:53 +0200
Subject: text/gemini to RSS
In-Reply-To: <81BB7C2D-6D56-49AC-B3D9-8E447DE96BEA@typed-hole.org>
References: <20191016165107.GB24885@SDF.ORG>
 <81BB7C2D-6D56-49AC-B3D9-8E447DE96BEA@typed-hole.org>
Message-ID: <370054f0-ec3a-f5c7-dd3d-784d296e6078@typed-hole.org>

>   I?ll try to make such a tool.
>
So I started a simple ruby script, here is the current output it generates from typed-hole.org index (not the best test page but that's all I have at hand):

<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"
   xmlns:dc="http://purl.org/dc/elements/1.1/">
   <author>
     <name>julienXX</name>
   </author>
   <id>gemini://typed-hole.org/feed.atom</id>
   <title>typed-hole.org</title>
   <updated>2019-10-17T16:20:26.211971+00:00</updated>
   <entry>
     <id>gemini://typed-hole.org/software/index.gemini</id>
     <link href="gemini://typed-hole.org/software/index.gemini"/>
     <title>Check it out</title>
     <updated>2019-09-14T10:50:52.447668+00:00</updated>
     <dc:date>2019-09-14T10:50:52.447668+00:00</dc:date>
   </entry>
   <entry>
     <id>gemini://typed-hole.org/cyoa/underground</id>
     <link href="gemini://typed-hole.org/cyoa/underground"/>
     <title>Play &quot;Underground Kingdom&quot;</title>
     <updated>2019-08-27T09:47:27.588779+00:00</updated>
     <dc:date>2019-08-27T09:47:27.588779+00:00</dc:date>
   </entry>
   <entry>
     <id>gemini://typed-hole.org/cyoa2/pyramid.gemini</id>
     <link href="gemini://typed-hole.org/cyoa2/pyramid.gemini"/>
     <title>Play &quot;Secret of the Pyramids&quot;</title>
     <updated>2019-08-29T11:06:43.56307+00:00</updated>
     <dc:date>2019-08-29T11:06:43.56307+00:00</dc:date>
   </entry>
   <entry>
     <id>gemini://typed-hole.org/project_gemini.jpg</id>
     <link href="gemini://typed-hole.org/project_gemini.jpg"/>
     <title>The Gemini mission - what it will be like...</title>
     <updated>2019-10-03T16:20:08.170043+00:00</updated>
     <dc:date>2019-10-03T16:20:08.170043+00:00</dc:date>
   </entry>
   <entry>
     <id>gemini://typed-hole.org/lobsters/lobsters.gemini</id>
     <link href="gemini://typed-hole.org/lobsters/lobsters.gemini"/>
     <title>Browse the un-official lobste.rs Gemini mirror</title>
     <updated>2019-10-17T16:20:26.211971+00:00</updated>
     <dc:date>2019-10-17T16:20:26.211971+00:00</dc:date>
   </entry>
   <entry>
     <id>gemini://typed-hole.org/guestbook</id>
     <link href="gemini://typed-hole.org/guestbook"/>
     <title>Guestbook ??</title>
     <updated>2019-10-06T16:49:02.879648+00:00</updated>
     <dc:date>2019-10-06T16:49:02.879648+00:00</dc:date>
   </entry>
   <dc:date>2019-10-17T16:20:26.211971+00:00</dc:date>
</feed>

It's currently only adding links that point to a local file, use the link description and file timestamp to fill the title and updated field. Next step will be to add the content or a preview of it.

The feed is available on my server at gemini://typed-hole.org/feed.atom and the script is located here https://tildegit.org/julienxx/atomini if you want to test it.

--
julienxx


From solderpunk@SDF.ORG  Tue Oct 22 18:14:40 2019
From: solderpunk@SDF.ORG (solderpunk)
Date: Tue, 22 Oct 2019 17:14:40 +0000
Subject: text/gemini to RSS
In-Reply-To: <20191016184452.GC5618@brevard.conman.org>
References: <20191016165107.GB24885@SDF.ORG>
 <20191016174033.GB5618@brevard.conman.org>
 <232c7e0c-8b85-47fc-9898-f713def48ad4@www.fastmail.com>
 <20191016184452.GC5618@brevard.conman.org>
Message-ID: <20191022171440.GB17014@SDF.ORG>

Whoops, yes, in throwing out this idea quickly I overlooked a few
details and, embarrassingly, forgot about Atom.  But, yes, I'm all for
preferencing Atom, and for people who want to do RSS as well then 2.0
seems like the most obvious choice.

-Solderpunk

On Wed, Oct 16, 2019 at 02:44:52PM -0400, Sean Conner wrote:
> It was thus said that the Great Yotam Nachum once stated:
> > >  Which version of RSS? There are multiple, not-at-all compatible, versions
> > > of RSS [1].
> > 
> > There are really only two relevant options (that I know of, please
> > correct me if I missed anything), RSS 2.0 and Atom 1.0.
> 
>   Heh.  My blog is still serving up RSS 0.91 (just checked).
> 
> > >From the little I know about web syndication, RSS seems to be more
> > popular but Atom is better standardized. Because Gemini is a new
> > protocol without any legacy to keep I think Atom would be the better
> > choice.
> 
>   I concur (I also have an Atom feed for my blog).
> 
>   -spc

From solderpunk@SDF.ORG  Tue Oct 22 18:46:13 2019
From: solderpunk@SDF.ORG (solderpunk)
Date: Tue, 22 Oct 2019 17:46:13 +0000
Subject: text/gemini to RSS
In-Reply-To: <370054f0-ec3a-f5c7-dd3d-784d296e6078@typed-hole.org>
References: <20191016165107.GB24885@SDF.ORG>
 <81BB7C2D-6D56-49AC-B3D9-8E447DE96BEA@typed-hole.org>
 <370054f0-ec3a-f5c7-dd3d-784d296e6078@typed-hole.org>
Message-ID: <20191022174613.GC17014@SDF.ORG>

On Thu, Oct 17, 2019 at 07:04:53PM +0200, Julien Blanchard wrote:

> So I started a simple ruby script, here is the current output it generates from typed-hole.org index (not the best test page but that's all I have at hand):
> 
> ....
> 
> It's currently only adding links that point to a local file, use the link description and file timestamp to fill the title and updated field. Next step will be to add the content or a preview of it.
> 
> The feed is available on my server at gemini://typed-hole.org/feed.atom and the script is located here https://tildegit.org/julienxx/atomini if you want to test it.

Nice work, thanks for this!  I've added a link to the tildegit.org repo
to the Software listing at the (very under construction!) new
gemini.circumlunar.space server
(gemini://gemini.circumlunar.space/software/).

-Solderpunk

From julien@typed-hole.org  Tue Oct 22 20:29:13 2019
From: julien@typed-hole.org (Julien Blanchard)
Date: Tue, 22 Oct 2019 21:29:13 +0200
Subject: text/gemini to RSS
In-Reply-To: <20191022174613.GC17014@SDF.ORG>
References: <20191022174613.GC17014@SDF.ORG>
Message-ID: <1EE12FB1-2C65-49AC-B23D-602198D6C983@typed-hole.org>

> Nice work, thanks for this!  I've added a link to the tildegit.org repo
> to the Software listing at the (very under construction!) new
> gemini.circumlunar.space server
> (gemini://gemini.circumlunar.space/software/).

The server does not respond for now it seems but I can?t wait to see this new space!

From plugd@thelambdalab.xyz  Wed Oct 23 08:38:26 2019
From: plugd@thelambdalab.xyz (plugd)
Date: Wed, 23 Oct 2019 09:38:26 +0200
Subject: text/gemini to RSS
In-Reply-To: <1EE12FB1-2C65-49AC-B23D-602198D6C983@typed-hole.org>
References: <20191022174613.GC17014@SDF.ORG>
 <1EE12FB1-2C65-49AC-B23D-602198D6C983@typed-hole.org>
Message-ID: <lztv7zsyh9.fsf@bs-mbpr348.d.ethz.ch>

Hi Julien,

Julien Blanchard writes:
>> (gemini://gemini.circumlunar.space/software/).
> The server does not respond for now it seems but I can?t wait to see this new space!

I'm able to access the new page but am getting very long loading times
(~10s in AV-98, a bit longer in Elpher) due to the previously-discussed
IPv6 issue - perhaps this is your problem too?

plugd


From julien@typed-hole.org  Wed Oct 23 08:48:31 2019
From: julien@typed-hole.org (Julien Blanchard)
Date: Wed, 23 Oct 2019 09:48:31 +0200
Subject: text/gemini to RSS
In-Reply-To: <lztv7zsyh9.fsf@bs-mbpr348.d.ethz.ch>
References: <lztv7zsyh9.fsf@bs-mbpr348.d.ethz.ch>
Message-ID: <11C3F96F-0845-442E-ABD7-879DDC3C5F56@typed-hole.org>


> I'm able to access the new page but am getting very long loading times
> (~10s in AV-98, a bit longer in Elpher) due to the previously-discussed
> IPv6 issue - perhaps this is your problem too?

Oh you?re right, sorry I was being impatient :)

From solderpunk@SDF.ORG  Wed Oct 23 19:50:53 2019
From: solderpunk@SDF.ORG (solderpunk)
Date: Wed, 23 Oct 2019 18:50:53 +0000
Subject: text/gemini to RSS
In-Reply-To: <11C3F96F-0845-442E-ABD7-879DDC3C5F56@typed-hole.org>
References: <lztv7zsyh9.fsf@bs-mbpr348.d.ethz.ch>
 <11C3F96F-0845-442E-ABD7-879DDC3C5F56@typed-hole.org>
Message-ID: <20191023185053.GA29671@SDF.ORG>

Yep, sorry, no IPv6 yet (it's in my ~/TODO on the server!), but HTTPS,
Gopher and Gemini should now all be working on IPv4.  There is even a
basic "Gemini kiosk" (similar to Bitreich's gopher kiosk) running,
although this needs more clients and, more importantly, some more
securing!  Continue to stay tuned...

-Solderpunk

On Wed, Oct 23, 2019 at 09:48:31AM +0200, Julien Blanchard wrote:
> 
> > I'm able to access the new page but am getting very long loading times
> > (~10s in AV-98, a bit longer in Elpher) due to the previously-discussed
> > IPv6 issue - perhaps this is your problem too?
> 
> Oh you?re right, sorry I was being impatient :)
> 

From solderpunk@SDF.ORG  Sat Oct 26 15:37:14 2019
From: solderpunk@SDF.ORG (solderpunk)
Date: Sat, 26 Oct 2019 14:37:14 +0000
Subject: Announcing gemini.circumlunar.space!
Message-ID: <20191026143714.GA8618@SDF.ORG>

Greetings Gemininauts!

I am happy to announce an end to the era of the Zaibatsu being
misappropriated as an ad-hoc home base for the Gemini project.  From
now on the official home of Gemini is at a dedicated server,
gemini.circumlunar.space.  It hosts the official Gemini documentation
(FAQ, specification, best practices, lists of software and servers)
via Gemini (currently, using jetforce, but this is only until I get
the ball rolling, at long last, on my own server project) but also
HTTPS (using shizaru) and Gopher (using Gophernicus).  All 3 services
should be listening on IPv4 and IPv6.  Now when somebody asks you what
Gemini is you can point them to at least the basics accessible via
whatever protocol they prefer!

In time, gemini.circumlunar.space will also offer free Gemini hosting,
so that people who are interested in Gemini but lack the technical
skills, free time or disposable income to setup their own server can
start producing Gemini content.  Also in time it will host an
Atom-powered aggregator to make it easier for people to keep tabs on
the growing community.

Finally, inspired by bitreich's Gopher kiosk, you can `ssh
kiosk at gemini.circumlunar.space` from any machine with an SSH client
and get an AV-98 session to explore Geminispace without installing a
client on your own machine.  Clients other than AV-98 will slowly
appear, e.g. Bombadillo will be available once the 2.0 release is
made.  I tried to add Asuka already but had trouble building it
because apparently Debian Buster's Rust toolchain, which is only five
months old, is already too old to actually build anything, because
Rust people hate backwards compatibility, or something. :p

Port 1965 will remain open at the Zaibatsu, offering a Gemini mirror
of the gopherholes of only those users who have opted in to Gemini
mirroring.  Redirects are in place from the old URLs for official
documents to the new server.

All of this was put together relatively quickly, so it's likely there
are some rough edges.  Let me know if anything does not work as
expected.

Cheers,
Solderpunk


From jmcbray@carcosa.net  Tue Oct 29 12:29:22 2019
From: jmcbray@carcosa.net (Jason McBrayer)
Date: Tue, 29 Oct 2019 08:29:22 -0400
Subject: Announcing gemini.circumlunar.space!
In-Reply-To: <20191026143714.GA8618@SDF.ORG> (solderpunk@sdf.org's message of
 "Sat, 26 Oct 2019 14:37:14 +0000")
References: <20191026143714.GA8618@SDF.ORG>
Message-ID: <875zk7ybtp.fsf@cassilda.carcosa.net>

solderpunk <solderpunk at SDF.ORG> writes:

> I am happy to announce an end to the era of the Zaibatsu being
> misappropriated as an ad-hoc home base for the Gemini project.  From
> now on the official home of Gemini is at a dedicated server,
> gemini.circumlunar.space.

This is fantastic work! I shared the list archive link on the fediverse;
hope that's okay.

-- 
Jason McBrayer      | ?Strange is the night where black stars rise,
jmcbray at carcosa.net | and strange moons circle through the skies,
                    | but stranger still is lost Carcosa.?
                    | ? Robert W. Chambers,The King in Yellow

From cel@celehner.com  Thu Oct 31 20:44:59 2019
From: cel@celehner.com (cel@celehner.com)
Date: Thu, 31 Oct 2019 10:44:59 -1000
Subject: dillo-gemini
Message-ID: <20191031104459.b79b8beeb0469cada69e68d5@celehner.com>

Greetings Geminauts,

May I announce a new Gemini client: dillo-gemini. It is a plugin for the Dillo browser which enables loading gemini:// URLs. The source is on git-ssb and also available on the WWW here:
https://git.scuttlebot.io/%25V0D7DtSnZyyAp1NbgOJF2ZAFMeUy9eXwyClCEKYUYAI%3D.sha256
Also I am attaching the source code of the initial release.

Implementation notes:
- It uses dillo (dpi) plugin's "filter" mode, which spawns a process to handle each request.
- It is implemented as a shell script which feels like a lazy way of doing it but works. (It is bash but I think could be sh if it weren't for the 'read -d')
- It uses ncat to do the fetching (but could be changed to use openssl s_client instead).
- It does not yet support Input (status code 1*).
- Redirection is not possible for a dillo plugin, so it renders redirects as a page linking to the target URL.
- It does not manipulate the request path but lets Dillo handle setting the target URLs. "client torture test" items 0009 and 0010 are not passed, because dillo does not remove the "./" parts of the URL - although it would be possible for the plugin to do this internally (without redirecting).

Regards,
Charles Lehner (~cel)
-------------- next part --------------
A non-text attachment was scrubbed...
Name: gemini.filter.dpi
Type: text/x-shellscript
Size: 3270 bytes
Desc: not available
URL: <https://lists.orbitalfox.eu/archives/gemini/attachments/20191031/a1f5bbbb/attachment.bin>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: dillo-gemini-README.md
Type: text/markdown
Size: 965 bytes
Desc: not available
URL: <https://lists.orbitalfox.eu/archives/gemini/attachments/20191031/a1f5bbbb/attachment.md>
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 833 bytes
Desc: not available
URL: <https://lists.orbitalfox.eu/archives/gemini/attachments/20191031/a1f5bbbb/attachment.sig>

From solderpunk@SDF.ORG  Fri Nov  1 08:57:19 2019
From: solderpunk@SDF.ORG (solderpunk)
Date: Fri, 1 Nov 2019 08:57:19 +0000
Subject: dillo-gemini
In-Reply-To: <20191031104459.b79b8beeb0469cada69e68d5@celehner.com>
References: <20191031104459.b79b8beeb0469cada69e68d5@celehner.com>
Message-ID: <20191101085719.GB20319@SDF.ORG>

On Thu, Oct 31, 2019 at 10:44:59AM -1000, cel at celehner.com wrote:
> Greetings Geminauts,
> 
> May I announce a new Gemini client: dillo-gemini. It is a plugin for the Dillo browser which enables loading gemini:// URLs. The source is on git-ssb and also available on the WWW here:
> https://git.scuttlebot.io/%25V0D7DtSnZyyAp1NbgOJF2ZAFMeUy9eXwyClCEKYUYAI%3D.sha256
> Also I am attaching the source code of the initial release.

This is tremendously exciting news!  I am a big fan of Dillo and have
actually had the idea in the back of my head for a while to write a
simple Gemini-to-HTTP proxy designed to be run only locally precisely so
I could use Dillo as a Gemini client.  I'm very happy to have a proper
plugin instead.  I'm also very happy to see that Gemini clients can be
assembled from tools like ncat with a shell script.  The ability to do
things like this is an oft-touted benefit of the simplicity of Gopher,
and it's nice to see we haven't added so much complexity that this is no
longer feasible.

Can't wait to try this out soon!

Cheers,
Solderpunk

From cel@celehner.com  Wed Nov  6 23:58:15 2019
From: cel@celehner.com (cel@celehner.com)
Date: Wed, 6 Nov 2019 13:58:15 -1000
Subject: dillo-gemini
In-Reply-To: <20191101085719.GB20319@SDF.ORG>
References: <20191031104459.b79b8beeb0469cada69e68d5@celehner.com>
 <20191101085719.GB20319@SDF.ORG>
Message-ID: <20191106135815.18fca999923a47e64b3b117d@celehner.com>

Thanks for the encouragement, Solderpunk.

I have also published a version of the plugin written in C as an exercise:
https://git.scuttlebot.io/%25V0D7DtSnZyyAp1NbgOJF2ZAFMeUy9eXwyClCEKYUYAI%3D.sha256/commit/efc3bfe72545c20ffa8baea7f9f3946f9669916c

-- 
~cel
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 833 bytes
Desc: not available
URL: <https://lists.orbitalfox.eu/archives/gemini/attachments/20191106/72932913/attachment.sig>

From gemini@yotam.net  Sat Nov  9 11:52:15 2019
From: gemini@yotam.net (Yotam Nachum)
Date: Sat, 09 Nov 2019 13:52:15 +0200
Subject: A library and server written in Go
Message-ID: <1550c5e0-5584-45c3-aab5-ac1e62eb8b04@www.fastmail.com>

I have started to work on a Gemini server[0] in Go that hopefully will
be used to host my own server soon. The server also have a companion
library[1] to help create other programs with Gemini.

I hope it will be useful to others and would love to hear feedback about
the server and library. The server is still a bit bare (only serving
files from a specified directory), but I plan on adding a way to auto
generate feeds and search endpoints.

[0]: https://git.sr.ht/~yotam/go-gemini-server
[1]: https://git.sr.ht/~yotam/go-gemini

From jmcbray@carcosa.net  Fri Nov 15 13:52:35 2019
From: jmcbray@carcosa.net (Jason McBrayer)
Date: Fri, 15 Nov 2019 13:52:35 +0000
Subject: A library and server written in Go
In-Reply-To: <1550c5e0-5584-45c3-aab5-ac1e62eb8b04@www.fastmail.com>
References: <1550c5e0-5584-45c3-aab5-ac1e62eb8b04@www.fastmail.com>
Message-ID: <e58fef40e3313167ad2c764b2b5d6728@carcosa.net>

November 9, 2019 11:52 AM, "Yotam Nachum" <gemini at yotam.net> wrote:

> I have started to work on a Gemini server[0] in Go that hopefully will
> be used to host my own server soon. The server also have a companion
> library[1] to help create other programs with Gemini.
> 
> I hope it will be useful to others and would love to hear feedback about
> the server and library. The server is still a bit bare (only serving
> files from a specified directory), but I plan on adding a way to auto
> generate feeds and search endpoints.
> 
> [0]: https://git.sr.ht/~yotam/go-gemini-server
> [1]: https://git.sr.ht/~yotam/go-gemini

This is very cool. I've never written any Go myself, but I have compiled and used several tools written in it. It seems to be a good choice for servers.

-- 
Jason McBrayer
jmcbray at carcosa.net

?Strange is the night where black stars rise,
and strange moons circle through the skies,
but stranger still is lost Carcosa.?
? Robert W. Chambers,The King in Yellow

From solderpunk@SDF.ORG  Thu Nov 21 19:22:12 2019
From: solderpunk@SDF.ORG (solderpunk)
Date: Thu, 21 Nov 2019 19:22:12 +0000
Subject: A library and server written in Go
In-Reply-To: <1550c5e0-5584-45c3-aab5-ac1e62eb8b04@www.fastmail.com>
References: <1550c5e0-5584-45c3-aab5-ac1e62eb8b04@www.fastmail.com>
Message-ID: <20191121192212.GA13794@SDF.ORG>

Sorry for my slow response to this, I have been travelling.

Thanks a lot for sharing these projects!  I've added them to the
official list of Gemini software[1].  As a relatively recent student of
Go I'm interested to read the code - especially for the server as,
coincidentally enough, I recently started work on a server of my own[2],
also written in Go.  More on that project soon!

Cheers,
Solderpunk

[1] gemini://gemini.circumlunar.space/software/
[2] https://tildegit.org/solderpunk/molly-brown


On Sat, Nov 09, 2019 at 01:52:15PM +0200, Yotam Nachum wrote:
> I have started to work on a Gemini server[0] in Go that hopefully will
> be used to host my own server soon. The server also have a companion
> library[1] to help create other programs with Gemini.
> 
> I hope it will be useful to others and would love to hear feedback about
> the server and library. The server is still a bit bare (only serving
> files from a specified directory), but I plan on adding a way to auto
> generate feeds and search endpoints.
> 
> [0]: https://git.sr.ht/~yotam/go-gemini-server
> [1]: https://git.sr.ht/~yotam/go-gemini

From drequena@andram.net  Tue Nov 26 00:13:31 2019
From: drequena@andram.net (David Requena)
Date: Tue, 26 Nov 2019 01:13:31 +0100
Subject: On text reflow. It's not about bullets!
Message-ID: <000001d5a3ee$56e0ba90$04a22fb0$@andram.net>

Hi all,

   Just joined the list to add my 2 cents to the reflowing discussion. With
all
due respect, I think that long thread didn't touch on a couple fundamental
aspects I believe worth considering.

1. Text reflow IS A MUST.
       We live in a world of wildly varying screen sizes these days. The
trend
    is clearly headed towards polarization: huge 22'+ desktop screens in one
    corner, small less than 7' smartphone screens in the other. Nothing in
the
    middle. There's no way you're going to get decent presentation of non
    reflown text on both kinds of displays. No matter how many kludgy rules
you
    instate on default width, max before forced wrap, etc.

2. Author's having selected lines not reflown IS A MUST.
       This has nothing to do with formatted lists, tables, fancy styling or
    ASCII art. Fact is that Gemini is a publishing platform and by not
allowing
    this, you'd be precluding certain kinds of content from being
distributed
    over it. Those include text snippets whose semantics intrinsically
depend
    on formatting (spacing and horizontal alignment), such as:

     - The simplest of mathematical formulas involving fractions
     - Source code snippets in some computer languages. Hey pythonists, I
see
       several of you hanging around here!
   
   You literally cannot convey that kind of thing in the presence of text
   reflowing.

   If we can agree on 1 and 2, then we could as well man up, select a proper
   line marker and be done with it.
   Is the spec golden goal to end with exactly on special line marker?
   Or is it ending with exactly what is needed, no more, no less?

   How about (in non standarese):

   Each line in a text/gemini document can, at the option of the client, be
reflown and/or be presented in any font the client deems appropriate except
for lines beginning with => or ==. These line markers mean:

  =>    (arrow) line is a link in the format bla bla bla...
  ==    (equal, of all things!) line is preformatted text which MUST NOT be
           transformed by reflow nor proportional font rendering.

   That's it! Let's talk about text styling in some other occasion.

   Finally, I firmly believe trying to accomplish this with a space is a bad
idea: That conspicuous space *IS* markup. Some magical text sequence,
sitting
at the right place, triggering special presentation of text following it.
Pitifully ashamed of itself markup, markup to the core nonetheless.

   Trying to hide the need of an actual line marker behind some half-baked
one-space convention seems particularly unsuitable to me. Besides... What'd
be
the point? Having our poor author repeatedly misinterpreting which line is
each kind in his own document?

   It doesn't even work all the time. Using a space opens a whole new can of
worms. For one: Have you noticed I've been opening every paragraph with 3
spaces? This is quite common, at least it is in my country.

   In my view the issue arises from trying to abuse the meaning of the space
character. A space is, well, some white space. It separates things, it is
invisible, and you can only perceive it because of an absence between said
things. Overloading such an entity to mean something totally unrelated,
depending on the happenstance of being inserted at the beginning of a line
or, God forbid!, at the end, is simply calling for trouble in the long run.

If you happen to have endured my prose all the way down here, many thanks
for
your attention. You're a remarkably forgiving reader.

Best regards,
Andram


From solderpunk@SDF.ORG  Tue Nov 26 19:06:30 2019
From: solderpunk@SDF.ORG (solderpunk)
Date: Tue, 26 Nov 2019 19:06:30 +0000
Subject: On text reflow. It's not about bullets!
In-Reply-To: <000001d5a3ee$56e0ba90$04a22fb0$@andram.net>
References: <000001d5a3ee$56e0ba90$04a22fb0$@andram.net>
Message-ID: <20191126190630.GA8887@SDF.ORG>

On Tue, Nov 26, 2019 at 01:13:31AM +0100, David Requena wrote:

>    Is the spec golden goal to end with exactly on special line marker?
>    Or is it ending with exactly what is needed, no more, no less?

There is nothing particularly special, as far as I'm concerned, about
having exactly one bit of special syntax, as opposed to two or three.
But I am concerned, and consistently have been all throughout Gemini's
development, about making sure we don't provide a toehold for
extensibility to creep in.

HTML has this problem, very clearly - there is no natural limit at all
on the variety of tags which could be defined.  And the consequences of
this have been seen:

* A popular browser invents a tag of its own, like <blink> or <marquee>
* That tag becomes popular and widely used
* A new browser comes along which follows the spec, and suddenly the
  many pages using <blink> or whatever "don't work properly".
* The new browser is pressured into implementing the non-standard tag
* Eventually, something invented by a single influential client becomes
  de-facto standard

HTTP has the same problem, in that request and response headers can grow
without limit, and hence things like Cookie eventually come along.

I am firmly of the belief that open-endedness and extensibility are
nothing but poison for a project which wants to remain small and simple
and to strongly enforce certain ideals.

Thus, my big concern about using == as a start-of-line marker to
indicate verbatim text (and let me be very clear that I recognise and
appreciate the beauty of using this common notation for equality to mean
"present exactly this"!) is that it might soe the seed of the idea that
the text/gemini syntax is one where features are defined by two
character markers where the first character is =.  If => is special and
== is special then if we ever decide to add explicit representation of
bullets everybody will have to agree it is obvious and consistent that
this be done with =* and by this point the war is lost.  =$ and =# and
=? are all fair game.  Someday somebody will propose that

=I gemini://foo.org/bar/img.png

should mean "display the image at this URL inline"!

This is precisely the reason that when the question came up as to how we
should best implement something like Gopher's item type 7 in a system
without item types, I rejected the notion (even though it seems to make
perfect sense) that we use =? instead of => for search points (I *think*
this was julienxx's idea?).

This might seem dramatic, and I admit that Gemini is slightly more
naturally immune to this than HTML is - Gemini clients are by design
very simple, which means many people will write them, which means there
is less likely to evolve a situation where a small number of highly
influential clients have undue sway over extending the standard (this
effect is, in my opinion, the most valuable insight in the "Avoiding the
gravity-well of webbiness in gopher" essay at
gopher://fuckup.solutions/1/enkiv2/avoiding-the-gravity-hole-of-webbiness-in-gopher
- see the final paragraph).  But I do genuinely worry about this.  This
principle of not inviting future extension has informed a number of
decisions about the Gemini protocol.

Part of the reason I initially quite liked the idea of using a leading
space to indicate verbatim text was that it doesn't provide any kind of
hint whatesoever as to a general and extensible markup syntax.

That said, returning to it after quite a long break, I'm not as partial
to it as I once was.  In the early days of Gemini there was a lot of
discussion of whether or not it was a good idea that the original link
syntax used a tab character in it.  In the end, I found pretty heavily
convincing the argument that using whitespace in the link syntax was a
bad idea, because:

* it was impossible to tell just by looking at a file whether or not it
  was correctly formatted (using tabs) or incorrectly formatted using
  an equivalent number of spaces
* copying and pasting a valid link line in a terminal environment would
  break it, because the tab would be converted to spaces
* some people, especially Pythonistas, have configured their editors so
  that the tab key inserts spaces instead of a tab.

So, the tab-based link syntax was banished and => was born.

I see now that it's kind of inconsistent to have ruled against
syntactic whitespace in one situation but allowed it in another.  Not
all of the points above apply in this second situation, but given that,
as you mentioned, one of the common cases for verbatim text is going to
be inserting chunks of source code, and given that tabs are a frequent
occurence in source code, it does seem to be inviting confusing and
ambiguous situations in at least some cases.  So perhaps best to steer
well clear.

That's an awful lot of "not that, but not this either", which doesn't
leave us with an actual solution, and I'm aware of how frustrating that
is.  I do certainly agree with both of your premises, that some solution
to widely varying screen sizes and some way to embed unreflowd text, are
very highly desirable.
 
> If you happen to have endured my prose all the way down here, many thanks
> for
> your attention. You're a remarkably forgiving reader.

Don't worry, I have been working hard for months to scare anybody
without a very high tolerance for verbosity far away from anything to do
with Gemini. :)

Cheers,
Solderpunk


From drequena@andram.net  Thu Nov 28 14:12:38 2019
From: drequena@andram.net (David Requena)
Date: Thu, 28 Nov 2019 15:12:38 +0100
Subject: On text reflow. It's not about bullets!
Message-ID: <002501d5a5f5$e488aa70$ad99ff50$@andram.net>

Hi Solderpunk,

  Thanks for taking the time for exposing things in full.
  
  I did due diligence before posting here. I read all materials at
gopher://zaibatsu.circumlunar.space:70/1/~solderpunk/gemini as well as
enkiv2's and John Olmo's pieces.  Also nearly all of this list's
archived emails.

  That is to say, I believe I have a good grasp on the philosophy
behind Gemini and the principles that have guided it's evolution.  Let
me spell it clearly: To those principles I violently agree!
  
  I'll be cherry-picking topics below were actual disagreement exists.

On Tue, Nov 26, 2019 at 19:06:30 +0000, solderpunk wrote:

> But I am concerned, and consistently have been all throughout
> Gemini's development, about making sure we don't provide a toehold
> for extensibility to creep in.

  Sorry to say, that ship already sailed the moment => was
specified. The most you can do is to make some hard requirements in
the specification.

  In all honesty, it sailed even before that, when mime types were
adopted. What's to prevent some Gemini server to serve text/html with
external js indeed? What's to prevent certain clients from rendering
such content as a web browser does?

I'm not trying to open a new discussion here. We all know this is just
an matter of balance.


> I am firmly of the belief that open-endedness and extensibility are
> nothing but poison for a project which wants to remain small and
> simple and to strongly enforce certain ideals.

  Agreed, but... A standard that falls short of its intended purpose
in life is just calling for the very same kind of de-facto
standardization you so well describe for http.


> Thus, my big concern about using == as a start-of-line marker to
> indicate verbatim text (and let me be very clear that I recognise
> and appreciate the beauty of using this common notation for equality
> to mean "present exactly this"!)

  == possesses a certain beauty and elegance about it, doesn't it? :-)
At any rate which actual marker is adopted is of no consequence. Let's
call it the 'verbatim marker' from here on.


> [...] is that it might soe the seed of the idea that the text/gemini
> syntax is one where features are defined by two character markers
> where the first character is =.  If => is special and == is special
> then if we ever decide to add explicit representation of bullets
> everybody will have to agree it is obvious and consistent that this
> be done with =* and by this point the war is lost.  =$ and =# and =?
> are all fair game.  Someday somebody will propose that [...]

  I get it, really. Let me try to convey why I state this does not apply
to the verbatim marker: it is an unavoidable requirement.

  In fact there's two unavoidable requirements at stake here.

  1 - There must exist an option for the client for reflowing text. I
      won't elaborate much here. There's simply no way verbatim
      formatted text will look good simultaneously on big desktop
      screens and small smartphone displays. Doing that according to
      an RFC backed set of precise rules is nothing but 'the right
      thing' (TM).   

  2 - In the presence of 1, some way to specify verbatim formatted
      text lines MUST exist for the Gemini author.
      
  Number 1 will always be an option for the client, be it in the spec
or not. So better handle it in an unambiguous way to avoid a myriad
of, client chosen, different ways.

  The capitalized MUST in 2 reflects the fact that it's a fundamental,
intrinsic, requirement for any text content distribution
platform.  There're sure many more use cases. I mentioned Python source
and mathematical formulas.

  It might be an inconvenience having C source code garbled, but it
will compile anyway, and can be automatically reformatted.  That is
not the case with Python code, with its syntactically relevant use of
white space.

  Take a Python snippet, reflow it, and you just lost its semantics.
It won't run.  It cannot be automatically reformatted. Depending on
code complexity, even manual reformatting might be impossible.  Simply
put, information has been irremediably lost at this point.
  
  Now take a simple polynomial expression.  Exact same situation
arises when the reader cannot discern which numerator goes with which
denominator.

  In short, I object this is just a desirable feature of the
text/gemini format, as you state elsewhere in your reply.

  Admittedly this could be subsumed in a more general markup facility
if the markup du jour was to be adopted, with all its nice to have
text styling and structuring features. Fact remains verbatim
formatted text must be available regardless.

  If not specified, someone will implement this sooner than latter, in
a not controlled way. It might get generally liked, hence adopted.
Back at square one then.

  Or someone will start experimenting on how to abuse with => markers
in order to somehow achieve this kind of thing.  Coincidentally, the
spec is not yet finalized and this has already begun with some
result. Check
https://lists.orbitalfox.eu/archives/gemini/2019/000019.html in this
very same list.

  What's to be expected once the spec is set on stone?


> This is precisely the reason that when the question came up as to
> how we should best implement something like Gopher's item type 7 in
> a system without item types, I rejected the notion (even though it
> seems to make perfect sense) that we use =? instead of => for search
> points (I *think* this was julienxx's idea?).

  That, I believe, would have been just a case of bad tool for the job
that was very appropriately handled IMHO.


> [...] and I admit that Gemini is slightly more naturally immune to
> this than HTML is - Gemini clients are by design very simple, which
> means many people will write them, which means there is less likely
> to evolve a situation where a small number of highly influential
> clients [...]

  Also worth of consideration: general user population will likely be
composed of disgruntled former web users in one hand and former gopher
users on the other. I don't expect any of these groups to be
interested in such an outcome. Both had the web option available
before gemini; both opted out.


> This principle of not inviting future extension has informed a
> number of decisions about the Gemini protocol.

  As stated above, I fully agree with this approach. Anyway, sometimes
you must handle the smaller evil in order to avoid the big one.


> [on the use of syntactic white space]

  I don't think I need to expand on how an atrociously bad choice
white space would be. This very same email would be rendered in a
mixture of formatted and reflowed paragraphs :-)


> frustrating that is.  I do certainly agree with both of your
> premises, that some solution to widely varying screen sizes and some
> way to embed unreflowd text, are very highly desirable.

  I beg to disagree on the "desirable" bit, you know :-P

  I personally would settle with any solution not involving stealth
white space markers. Client driven text reflow cannot be ruled out, so
verbatim formatted text must be in the spec in some form or another.

>> If you happen to have endured my prose all the way down here, many
>> thanks for your attention. You're a remarkably forgiving reader.
> Don't worry, I have been working hard for months to scare anybody
> without a very high tolerance for verbosity far away from anything
> to do with Gemini. :)

Well, I'd say both of us seem to lean a bit on the loquacious side...

Best regards,
Andram


From b__m__e@mailfence.com  Thu Nov 28 19:45:47 2019
From: b__m__e@mailfence.com (Brian Evans)
Date: Thu, 28 Nov 2019 20:45:47 +0100 (CET)
Subject: On text reflow. It's not about bullets!
Message-ID: <1674025584.602178.1574970347451@ichabod.co-bxl>

Having read the discourse between andram and solderpunk I have some thoughts:

Reflowed text brings with it other problems for client implementors 

1. No one wants to read text that is flowed to the full width of a full screen reader on a large screen.. So there is a question of reasonable max widths and variance in how those get handled.  
2. There is also the question of paragraphs. When text is reflowed all but one single space character in a row are generally ignored and newlines and other whitespace are traditionally completely ignored.  As such, defining paragraphs becomes trickier.  There is a LOT more complexity to handling reflowed text than simply saying let the text reflow. Now, wrapping text is easy (and is what I am currently doing in my client), but leaves that ugly jagged look when wrapping occurs (because wrapping leaves and respects newlines). I suppose one solution to this is to re-purpose the non-reflowed line indicator and just follow it with no content to create a blank line. This could get weird to write and read though (for readibility I am using the newly proposed `==`):
```
Here are some lines of
text that could get 
reflowed
by the client into
one long line that then gets
wrapped.
==
So the above should
put in a blank line between each block
and create two paragraphs.
==
==
Done with a third block that has a double line break above it
```

I guess it isnt too cumbersome, but it does feel a little weird. It would be completely unclear with the leading space concept for creating a non-flowed line. As such I think that if the above model for flowing text gets adopted (which, I understand, it may not) I absolutely think a more visible marker for unflowed text is necessary. 

As an aside, did we land on what is to happen if the unflowed text is longer than the current client window? Are we wrapping or truncating? Ideally a horizontal scroll would be available but I do not know any clients that have implemented it and would prefer to not do so for mine.

With either of the above two items the ability to make a small (100 line client) starts to get smaller as there is more parsing overhead than just looking for `=>` and handling those lines.

I would LIKE reflowed text. I do not see it as the necessary thing that andram sees it as. I have been reading gopher content for some time and have not really missed flowed text that much. That said, I NEVER use a phone (and in fact do not have a phone capable of displaying this sort of content) to read gopher content and can see how wrapped text just gets unreadable after a certain point.

I do sort of agree that the ship has sailed regarding markup. `=>` is a concept that could easily be expanded on by those building clients, with or without the blessings of those steering gemini development. Something to think about in that regard is PHP. Yes, PHP. It is an ugly mishmash mess of a language where people have just slapped on this or that and nothing seems to go with the other particularly well. It works, sure... but it is a mess. It might be worth the conversation to see if pointedly steering into the skid  is something to be brought up again? Deliberately adding the things that will be most desired. Doing so could build a big enough swell of features that there would be less desire to do ad-hoc additions on a per client basis. It would have the added benefit of being carefully chosen by those thinking out all of the repercussions, rather than those wanting quick fixes to perceived problems. No matter which way this goes I do think it should be a mandatory part of the spec that a gemini document cannot make further requests (ie. images, stylesheets, scripts in http-land) without a user following a link.

This was all kind of off the top of my head while in a hotel with family for a holiday, so sorry if it isn't as coherent as it seemed to me while writing it.

From solderpunk@SDF.ORG  Fri Nov 29 15:31:37 2019
From: solderpunk@SDF.ORG (solderpunk)
Date: Fri, 29 Nov 2019 15:31:37 +0000
Subject: On text reflow. It's not about bullets!
In-Reply-To: <1674025584.602178.1574970347451@ichabod.co-bxl>
References: <1674025584.602178.1574970347451@ichabod.co-bxl>
Message-ID: <20191129153137.GA18567@SDF.ORG>

A relatively quick response to this, while I have a little spare time
and one clearly formed idea in my head:

If it is considered desirable that Gemini documents be able to contain
source code which can be successfully copied and pasted directly into
another file and then compiled/interpreted without error (which sure
seems like a nice thing to have, and one which would likely be
appreciated by a hypothetical "typical Gemini user")...

and given that the spec currently says (and I am about 95% sure I will
not be convinced to change this) that simple clients which don't want
to fuss with text formatting can display the non-link lines of
text/gemini content as if it were text/plain (i.e. raw text with no
wrapping, reflowing, etc) and still be considered valid, spec-abiding
Gemini clients...

then the folling seems to me an unescapable conclusion which must be
taken into account in any discussion of text/gemini markup:

We cannot convey "this line is verbatim text which should not be
reformatted at all" with a start-of-line marker like ==, because that
marker will get picked up by the copy and paste, and almost certainly
break the semantics of the code.  Instead, there need to be lines which
toggle on and off a verbatim mode, which a user of a simple client that
does no formatting can simply not select before copying.  Something
like:

```
// Parse request as URL
URL, err := url.Parse(string(request))
if err != nil {
    conn.Write([]byte("59 Error parsing URL!r\n"))
    log.Status = 59
    return
}
log.RequestURL = URL.String()
```

That particular example being borrowed from ratfactor's Text Junior
format, but certainly other things would solve the problem.  But there's
no getting around the conclusion that verbatim text needs to be included
unedited, so needs to be denoted by lines before/after the text iteself,
not markers at the beginning.

It's not logically necessary that the on/off lines be identical, but
it's simplest if they are.

Cheers,
Solderpunk


From b__m__e@mailfence.com  Fri Nov 29 17:39:59 2019
From: b__m__e@mailfence.com (Brian Evans)
Date: Fri, 29 Nov 2019 18:39:59 +0100 (CET)
Subject: On text reflow. It's not about bullets!
Message-ID: <2052598855.647704.1575049199115@ichabod.co-bxl>

solderpunk wrote of their suggestion to have a beginning and end marker for raw
text strings in gemini content. If I am understanding correctly, the suggestion
would serve a similar purpose to the web tag `pre`:
<pre>
Here is
some text. Whose newlines
and spacing are exact/raw.
</pre>

I actually think we should go the opposite way. I think we should provide a
start and end marker for reflowed text, treating raw text as the default. Since
raw text output is what simple clients will likely build, it makes sense to treat
that as a first class citizen/default. GIven that a large percentage of potential
userbase will also be using gopher, they are used to text behaving in this way.
Adding the extra ability to have text reflowed gives them what they know,
but with added features. Seems like a win.

As a result we could end up with something like the following:

This is a _____line with extra spaces
________denoted here with udnerscores since this
__will___be rendered____as html for this list.
.FLOW

And
here
is
a line
that
would get all flowed together

ignoring the newlines
I have annoyingly entered.

.ENDFLOW
The flow___state___has been toggled back
__off, and these 
spaces and newlines are
now rendered as written.

________________________________________

Something like the above could work (I am not at all proposing that marker text/name
it is just being used to represent an idea). Given that .FLOW and .ENDFLOW are on their
own line it is easy to parse them out and not have them print.

Anyway, those are my two cents at present. Subject to change.


--?
Sent with https://mailfence.com
Secure and private email

From jmcbray@carcosa.net  Mon Dec  2 15:20:39 2019
From: jmcbray@carcosa.net (Jason McBrayer)
Date: Mon, 02 Dec 2019 10:20:39 -0500
Subject: On text reflow. It's not about bullets!
In-Reply-To: <20191129153137.GA18567@SDF.ORG> (solderpunk@sdf.org's message of
 "Fri, 29 Nov 2019 15:31:37 +0000")
References: <1674025584.602178.1574970347451@ichabod.co-bxl>
 <20191129153137.GA18567@SDF.ORG>
Message-ID: <87h82ikb3s.fsf@cassilda.carcosa.net>

solderpunk <solderpunk at SDF.ORG> writes:

> We cannot convey "this line is verbatim text which should not be
> reformatted at all" with a start-of-line marker like ==, because that
> marker will get picked up by the copy and paste, and almost certainly
> break the semantics of the code. Instead, there need to be lines which
> toggle on and off a verbatim mode, which a user of a simple client
> that does no formatting can simply not select before copying.

I agree with this. This is a case where considering the simplest
possible client implementation implies a more complex (in some sense)
markup specification.

-- 
Jason McBrayer      | ?Strange is the night where black stars rise,
jmcbray at carcosa.net | and strange moons circle through the skies,
                    | but stranger still is lost Carcosa.?
                    | ? Robert W. Chambers,The King in Yellow

From lel@envs.net  Mon Dec  2 17:11:58 2019
From: lel@envs.net (lel@envs.net)
Date: Mon, 02 Dec 2019 12:11:58 -0500
Subject: On text reflow. It's not about bullets!
In-Reply-To: <2052598855.647704.1575049199115@ichabod.co-bxl>
Message-ID: <7b4c8a3c-477e-457d-a60b-536a1c2c4d20@email.android.com>

An HTML attachment was scrubbed...
URL: <https://lists.orbitalfox.eu/archives/gemini/attachments/20191202/23ab1369/attachment.htm>

From b__m__e@mailfence.com  Tue Dec  3 03:26:41 2019
From: b__m__e@mailfence.com (Brian Evans)
Date: Tue, 3 Dec 2019 04:26:41 +0100 (CET)
Subject: On text reflow. It's not about bullets!
Message-ID: <1146177023.806607.1575343601497@ichabod.co-bxl>

I somewhat agree with lel at envs.net depending on how you think of raw mode. If
indeed the thought is that raw is truly 100% raw and cannot even make links, then
I agree. However, the current state of every gemini client I have used is that of a
hybrid raw mode in which there is no text reflow (I have not seen a client implement
reflowed text, only wrapped text) and text is rendered as written, with the one single
exception of lines beginning with `=>`. This is lightweight and is working now. It is
coded and people are using it. It is what we have: a raw mode (potentially wrapped), 
with the ability to add links.

So, given the above, the desire is to _also_ have reflowed content. As such I think
adding in tags to start and end reflow makes sense, rather than pretend that what
we have and are doing is reflowed text and that we are adding raw text mode... which
just isn't the case for any extant client that I have encountered.

The ability to add line breaks within reflowed text has also not been discussed and
seems to me to complicate markup. Unless we are adopting the double line break 
thing that some markup languages use... but I have found that to be annoying to
work with (it leaves unclear what happens with triple newline for example and also
leaves room for weirdness in files that use \r\n line endings).

From cat@ff3366.com  Sat Dec  7 10:35:49 2019
From: cat@ff3366.com (Cat)
Date: Sat, 7 Dec 2019 21:35:49 +1100
Subject: New server
Message-ID: <CAN7PwngZPjwwsvbOy7yFRfH5Y-uOqoTeHTLWJ8t4mSkSmiaCFQ@mail.gmail.com>

gemini://konpeito.media


<3
cat

From baschdel@disroot.org  Sat Dec  7 12:02:29 2019
From: baschdel@disroot.org (baschdel@disroot.org)
Date: Sat, 07 Dec 2019 13:02:29 +0100
Subject: New server
In-Reply-To: <CAN7PwngZPjwwsvbOy7yFRfH5Y-uOqoTeHTLWJ8t4mSkSmiaCFQ@mail.gmail.com>
References: <CAN7PwngZPjwwsvbOy7yFRfH5Y-uOqoTeHTLWJ8t4mSkSmiaCFQ@mail.gmail.com>
Message-ID: <1575720150.1074.4@disroot.org>

I really like that there are people making gemini servers, but if you 
use escape codes it looks like spaghetti on some clients where text is 
just text and nothing more.

Shameless Advertisement:
I'm using my self written browser, wich is currently not in development 
(but also not really finished), beacause of other projects I'm working 
on.
You can find it here: https://gitlab.com/baschdel/dragonstone

Have a nice weekend!
- Baschdel

Here is the original screenshot:
https://upload.disroot.org/r/WALaTZLK#TkY/wYac0jE8NYDE9H5MtiwpLkgoUfr5iXTQWJgcAJ0=

On Sa, 7 Dez, 2019 at 21:35, Cat <cat at ff3366.com> wrote:
> gemini://konpeito.media
> 
> 
> <3
> cat



From tomasino@lavabit.com  Sat Dec  7 13:32:26 2019
From: tomasino@lavabit.com (James Tomasino)
Date: Sat, 7 Dec 2019 13:32:26 +0000
Subject: New server
In-Reply-To: <CAN7PwngZPjwwsvbOy7yFRfH5Y-uOqoTeHTLWJ8t4mSkSmiaCFQ@mail.gmail.com>
References: <CAN7PwngZPjwwsvbOy7yFRfH5Y-uOqoTeHTLWJ8t4mSkSmiaCFQ@mail.gmail.com>
Message-ID: <d317311d-bb0c-5c6a-91f1-c75badcf51d7@lavabit.com>

This is brilliant, cat. I love everything about it. I'm listening to 
Side A now and really into it.

Having content available on the protocol that isn't ABOUT the protocol 
is key to its success. I really appreciate your work on that front and 
everyone else that journals or otherwise shares information.

As for the escape codes & color... I'm all for it. I love to see 
boundaries pushed for creativity. Will it mess up in some clients? Sure. 
But it's still awesome fun.


From julien@typed-hole.org  Sat Dec  7 18:48:13 2019
From: julien@typed-hole.org (julienxx)
Date: Sat, 7 Dec 2019 18:48:13 +0000 (UTC)
Subject: New server
In-Reply-To: <d317311d-bb0c-5c6a-91f1-c75badcf51d7@lavabit.com>
References: <CAN7PwngZPjwwsvbOy7yFRfH5Y-uOqoTeHTLWJ8t4mSkSmiaCFQ@mail.gmail.com>
 <d317311d-bb0c-5c6a-91f1-c75badcf51d7@lavabit.com>
Message-ID: <1D72D8387069DE0E.02B291B9-CA4F-4634-B943-D7BF9DC312FF@mail.outlook.com>


  
  
  
    
    	Awesome place you made cat! I?m all for supporting colors too. Now I have some cool work to do to support escape codes in Asuka.
    	
    	

    	
    
  




On Sat, Dec 7, 2019 at 5:32 AM -0800, "James Tomasino" <tomasino at lavabit.com> wrote:










This is brilliant, cat. I love everything about it. I'm listening to 
Side A now and really into it.

Having content available on the protocol that isn't ABOUT the protocol 
is key to its success. I really appreciate your work on that front and 
everyone else that journals or otherwise shares information.

As for the escape codes & color... I'm all for it. I love to see 
boundaries pushed for creativity. Will it mess up in some clients? Sure. 
But it's still awesome fun.





-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.orbitalfox.eu/archives/gemini/attachments/20191207/df8ac0ad/attachment.htm>

From roy@royniang.com  Sat Dec  7 20:46:04 2019
From: roy@royniang.com (roy niang)
Date: Sat, 07 Dec 2019 21:46:04 +0100
Subject: New server
In-Reply-To: <d317311d-bb0c-5c6a-91f1-c75badcf51d7@lavabit.com>
Message-ID: <BYZHB7G55NNO.1NBGH8SW43ELC@kiroku>

I love it, I?m pretty hyped for the next release!

From roy@royniang.com  Sat Dec  7 20:46:04 2019
From: roy@royniang.com (roy niang)
Date: Sat, 07 Dec 2019 21:46:04 +0100
Subject: New server
In-Reply-To: <d317311d-bb0c-5c6a-91f1-c75badcf51d7@lavabit.com>
Message-ID: <BYZHB7G55NNO.1NBGH8SW43ELC@kiroku>

I love it, I?m pretty hyped for the next release!

From lists@rct.in-berlin.de  Sat Dec  7 21:21:27 2019
From: lists@rct.in-berlin.de (c47)
Date: Sat, 7 Dec 2019 22:21:27 +0100
Subject: New server
In-Reply-To: <CAN7PwngZPjwwsvbOy7yFRfH5Y-uOqoTeHTLWJ8t4mSkSmiaCFQ@mail.gmail.com>
References: <CAN7PwngZPjwwsvbOy7yFRfH5Y-uOqoTeHTLWJ8t4mSkSmiaCFQ@mail.gmail.com>
Message-ID: <20191207212127.GA30787@in-berlin.de>

This is very beautiful - wow <3
I hope I'll have the time to dive into the topic the next days.
I'm really fascinated :-)


From sean@conman.org  Sat Dec  7 22:41:26 2019
From: sean@conman.org (Sean Conner)
Date: Sat, 7 Dec 2019 17:41:26 -0500
Subject: New server
In-Reply-To: <CAN7PwngZPjwwsvbOy7yFRfH5Y-uOqoTeHTLWJ8t4mSkSmiaCFQ@mail.gmail.com>
References: <CAN7PwngZPjwwsvbOy7yFRfH5Y-uOqoTeHTLWJ8t4mSkSmiaCFQ@mail.gmail.com>
Message-ID: <20191207224126.GC13912@brevard.conman.org>

It was thus said that the Great Cat once stated:
> gemini://konpeito.media

  Very cool!  I didn't even realize you were using terminal escape codes
because I strip those out before displaying text (I do that because 1, I
don't want the screen to get messed up or put into an unknown state and 2,
it could be a security issue [1]).

  -spc

[1]	ANSI.SYS, from MS-DOS, added support for terminal escape sequences,
	but they also allowed one to redefine the keys on the keyboard. 
	Handy, until some random cracker sends you a specially crafted file
	to remap the keyboard ...

From cel@celehner.com  Sun Dec  8 05:34:54 2019
From: cel@celehner.com (cel@celehner.com)
Date: Sat, 7 Dec 2019 19:34:54 -1000
Subject: New server
In-Reply-To: <CAN7PwngZPjwwsvbOy7yFRfH5Y-uOqoTeHTLWJ8t4mSkSmiaCFQ@mail.gmail.com>
References: <CAN7PwngZPjwwsvbOy7yFRfH5Y-uOqoTeHTLWJ8t4mSkSmiaCFQ@mail.gmail.com>
Message-ID: <20191207193454.484f871f4f4e2c4d07949e1f@celehner.com>

Beautiful music.

Site looks great in dillo-gemini after passing the page through ansi2html [1].

[1] https://pypi.org/project/ansi2html/
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 833 bytes
Desc: not available
URL: <https://lists.orbitalfox.eu/archives/gemini/attachments/20191207/6f43a722/attachment.sig>

From mojibake@riseup.net  Sun Dec  8 11:43:20 2019
From: mojibake@riseup.net (moji)
Date: Sun, 8 Dec 2019 11:43:20 +0000
Subject: New server
In-Reply-To: <CAN7PwngZPjwwsvbOy7yFRfH5Y-uOqoTeHTLWJ8t4mSkSmiaCFQ@mail.gmail.com>
References: <CAN7PwngZPjwwsvbOy7yFRfH5Y-uOqoTeHTLWJ8t4mSkSmiaCFQ@mail.gmail.com>
Message-ID: <98b6c062-c574-94b4-77fa-9dc116b043f3@riseup.net>

This is rly beautiful (and I enjoy the first mixtape too!). Thanks Cat.

~moji~~*~*~~*~

On 07/12/2019 10:35, Cat wrote:
> gemini://konpeito.media
>
>
> <3
> cat

From solderpunk@SDF.ORG  Sun Dec  8 18:36:36 2019
From: solderpunk@SDF.ORG (solderpunk)
Date: Sun, 8 Dec 2019 18:36:36 +0000
Subject: New server
In-Reply-To: <d317311d-bb0c-5c6a-91f1-c75badcf51d7@lavabit.com>
References: <CAN7PwngZPjwwsvbOy7yFRfH5Y-uOqoTeHTLWJ8t4mSkSmiaCFQ@mail.gmail.com>
 <d317311d-bb0c-5c6a-91f1-c75badcf51d7@lavabit.com>
Message-ID: <20191208183636.GA22898@SDF.ORG>

On Sat, Dec 07, 2019 at 01:32:26PM +0000, James Tomasino wrote:
 
> Having content available on the protocol that isn't ABOUT the protocol is
> key to its success.

Yes, this is exactly right, and I'm super excited to see something like
this appear in Geminispace.  I hope it is a harbinger of more things to
come.  I've been far too busy prepraing for a move later this month to
spend much time on Gemini things lately, but I am slowly testing the
planned sftp-based hosting at gemini.circumlunar.space.  I plan to set
up a photography phlog, err, photography glog (?) of my own there next
year, to provide some non-technical Gemini-only content.  Thanks, cat,
for showing the way!

Cheers,
Solderpunk


From roy@royniang.com  Sun Dec  8 20:17:12 2019
From: roy@royniang.com (roy niang)
Date: Sun, 08 Dec 2019 21:17:12 +0100
Subject: New server
In-Reply-To: <20191208183636.GA22898@SDF.ORG>
Message-ID: <BZ0BBN2Q4V6T.1CF4WHXMWIMSX@kiroku>

> I plan to set up a photography phlog, err, photography glog (?) of my
> own there next year, to provide some non-technical Gemini-only
> content. Thanks, cat, for showing the way!

I?m also planning to make a mirror of my portfolio on gemini, I have to
read a bit more on gemini?s specs and make some experimentations on
a local machine. This new server really inspired me!

Cheers,
roy niang

From roy@royniang.com  Sun Dec  8 20:17:12 2019
From: roy@royniang.com (roy niang)
Date: Sun, 08 Dec 2019 21:17:12 +0100
Subject: New server
In-Reply-To: <20191208183636.GA22898@SDF.ORG>
Message-ID: <BZ0BBN2Q4V6T.1CF4WHXMWIMSX@kiroku>

> I plan to set up a photography phlog, err, photography glog (?) of my
> own there next year, to provide some non-technical Gemini-only
> content. Thanks, cat, for showing the way!

I?m also planning to make a mirror of my portfolio on gemini, I have to
read a bit more on gemini?s specs and make some experimentations on
a local machine. This new server really inspired me!

Cheers,
roy niang

From plugd@thelambdalab.xyz  Sun Dec  8 21:52:59 2019
From: plugd@thelambdalab.xyz (plugd)
Date: Sun, 08 Dec 2019 22:52:59 +0100
Subject: New server
In-Reply-To: <CAN7PwngZPjwwsvbOy7yFRfH5Y-uOqoTeHTLWJ8t4mSkSmiaCFQ@mail.gmail.com>
References: <CAN7PwngZPjwwsvbOy7yFRfH5Y-uOqoTeHTLWJ8t4mSkSmiaCFQ@mail.gmail.com>
Message-ID: <lzeexefps4.fsf@bs-mbpr348.d.ethz.ch>

Cat writes:
> gemini://konpeito.media

I love this idea!  I also love that it showed up 2 shortcommings of
my client straight up - the ansi codes (I've sworn off terminal
emulators) and downloading of largish files.  Super-valuable info on
both counts.

I'm looking forward to enjoying the tunes once I've managed fixed the
second issue. :-)

plugd
-------------- next part --------------
A non-text attachment was scrubbed...
Name: signature.asc
Type: application/pgp-signature
Size: 487 bytes
Desc: not available
URL: <https://lists.orbitalfox.eu/archives/gemini/attachments/20191208/39eb5241/attachment.sig>

From magnus@kalasarn.se  Mon Dec  9 16:42:08 2019
From: magnus@kalasarn.se (Magnus Wild)
Date: Mon, 9 Dec 2019 17:42:08 +0100
Subject: New server
In-Reply-To: <CAN7PwngZPjwwsvbOy7yFRfH5Y-uOqoTeHTLWJ8t4mSkSmiaCFQ@mail.gmail.com>
References: <CAN7PwngZPjwwsvbOy7yFRfH5Y-uOqoTeHTLWJ8t4mSkSmiaCFQ@mail.gmail.com>
Message-ID: <20191209164208.x7canh4tczwe5htx@yasuna.kalasarn.se>

On Sat, Dec 07, 2019 at 09:35:49PM +1100, Cat wrote:
> gemini://konpeito.media
> 
> 
> <3
> cat

Thanks for sharing! Will listen to this later today.

/Magnus

From baschdel@disroot.org  Wed Dec 11 20:52:35 2019
From: baschdel@disroot.org (Baschdel)
Date: Wed, 11 Dec 2019 21:52:35 +0100
Subject: Color and escape codes in text/gemini
Message-ID: <9600DC9D-09CF-46E6-90D1-A862D719A773@disroot.org>

In my last post on this list I called escape codes spaghetti without much of an explaination.

Tl;dr:
-Do we want color in text/gemini?
-If yes how should it be standardized?

I really like that there are creative people out there looking for ways to push systems like gemini outside of what they are supposed to be able to do.
And I don't want to decide (at least not now) if the escape code thingy is a "bug" or a feataure in most clients.
The first question we have ask here is if we want color support at all: 
I know, that gemini should remain simple and support for 
colors takes away a good part of this simplicity.
But there are a lot of usecases for color support.
(Code highlighting, pretty ascii art, footnotes, ...)
For me these are two pretty strong arguments against each other.

So in case we want color support:
Assuming the escape code thingy is a feataure:
We should standardize which escape codes are allowed and how clients should handle them.
Assuming it is a "bug":
Some people (me included after thinking about it) like to see color being used in gemini so we have to find another way to put colors in while the text/gemini format should remain easy to parse and human readable.
(Correct me if I'm wrong but that is how I interpret the text/gemini format: Markup that is easy to parse but still human readable if you open it in something like a text editor)

If I had to standardize it I'd use custom escape sequences, similar to those already in use but optimized to be no longer than necessary that ALWAYS end in a ';'.
This is not really text editor friendly, but avoids having to escape the escape caracter (I'm looking at you XML), makes it easy to parse/strip the escape sequences and if you don't you at least get very short spaghetti.

In any case I'm for filtering out unwanted escape codes.

I'm looking forward to get some other opinions on this.

Greetings
- Baschdel
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.orbitalfox.eu/archives/gemini/attachments/20191211/850760df/attachment.htm>

From baschdel@disroot.org  Wed Dec 11 21:09:47 2019
From: baschdel@disroot.org (Baschdel)
Date: Wed, 11 Dec 2019 22:09:47 +0100
Subject: New server
In-Reply-To: <CAN7PwngZPjwwsvbOy7yFRfH5Y-uOqoTeHTLWJ8t4mSkSmiaCFQ@mail.gmail.com>
References: <CAN7PwngZPjwwsvbOy7yFRfH5Y-uOqoTeHTLWJ8t4mSkSmiaCFQ@mail.gmail.com>
Message-ID: <1AAB04D1-09B2-4240-9341-FB83360EA5DF@disroot.org>

After cat-ing you frontpage into a terminal I agree that Your landing page looks awesome, also nice work with the mixtape.
I enjoyed both sides and am looking forward to the next one.

On 7 December 2019 11:35:49 GMT+01:00, Cat <cat at ff3366.com> wrote:
>gemini://konpeito.media
>
>
><3
>cat
-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.orbitalfox.eu/archives/gemini/attachments/20191211/e558211e/attachment.htm>

From sean@conman.org  Thu Dec 12 00:30:40 2019
From: sean@conman.org (Sean Conner)
Date: Wed, 11 Dec 2019 19:30:40 -0500
Subject: Color and escape codes in text/gemini
In-Reply-To: <9600DC9D-09CF-46E6-90D1-A862D719A773@disroot.org>
References: <9600DC9D-09CF-46E6-90D1-A862D719A773@disroot.org>
Message-ID: <20191212003040.GE13912@brevard.conman.org>

It was thus said that the Great Baschdel once stated:
> In my last post on this list I called escape codes spaghetti without much
> of an explaination.
> 
> Tl;dr:
> -Do we want color in text/gemini?
> -If yes how should it be standardized?

  Oh goody!  We still haven't figured out our last question about Gemini:
To reflow or not to reflow, that is the question.  

> I really like that there are creative people out there looking for ways to
> push systems like gemini outside of what they are supposed to be able to
> do.

> And I don't want to decide (at least not now) if the escape code thingy is
> a "bug" or a feataure in most clients. The first question we have ask here
> is if we want color support at all: I know, that gemini should remain
> simple and support for colors takes away a good part of this simplicity.
> But there are a lot of usecases for color support. (Code highlighting,
> pretty ascii art, footnotes, ...) For me these are two pretty strong
> arguments against each other.
> 
> So in case we want color support: Assuming the escape code thingy is a
> feataure: We should standardize which escape codes are allowed and how
> clients should handle them. Assuming it is a "bug": Some people (me
> included after thinking about it) like to see color being used in gemini
> so we have to find another way to put colors in while the text/gemini
> format should remain easy to parse and human readable. (Correct me if I'm
> wrong but that is how I interpret the text/gemini format: Markup that is
> easy to parse but still human readable if you open it in something like a
> text editor)

  Ah, the so called ANSI escape codes, which aren't at all defined by ANSI
but ISO, and are technically known as ECMA-48.  First off, the control codes
that *are* defined by ASCII, codes 0 to 31 [1].  There are only seven
control codes that releate to text (we're excluding the unit separators,
which are rarely, if ever, used):

	07	BEL	audible alarm
	08	BS	move left one space
	09	HT	horizontal tab
	0A	LF	move down one line
	0B	VT	vertical tab
	0C	FF	form feed
	0D	CR	carriage return

  Of these, HT, LF and CR are the most used---the rest not so much in text
files.  Now technically, what we consider the backspace is actually the
action of two control characters, BS (move left one space) and DEL (ignore
this character---if things worked this way, an easy way to get, say, an
umlaut is 'a BS "' or an n with a tilde over it by 'n BS ~'), and there are
fights over how to end a line (CR, LF, or both?  Technically, Microsoft got
this right with both).

  Then there's ECMA-48, which is what is under discussion here.  It's a vast
standard, but they all fall under a few patterns (using a slightly modified
RFC-5234 format---"a" - "z" means the range of characters between "a" and
"z"):

	Pattern group 1 (largely, a few exceptions in here as shown below):

		group1 = %d27 ( "`" - "~")

	Pattern group 2 (largely, a few exceptions in here shown below):

		group2 = %d27 ( "@" - "_")
	               / %d128-175 ; [3]

	Pattern group 3 (these are what is popularly known as ANSI codes,
	and a subset of group 2):

		group3 = (%d27 "[" / %d155) *("0" - "?") *1(" " - "/") ("@" - "~")

	and finally pattern group 4 (and are a subset of group 1):

		cmd     = %d144 / %d152 / %d157 / %d158 / %d159
		        / %d27 ( "P" / "X" / "]" / "^" / "_")
		group4  = cmd *(%d8-13 / " " - "~") (%d156 / %27 "\")

  Group 4 is the most problematic, security wise, as they define actual
messages.  'ESC]' is defined as "OPERATING SYSTEM COMMAND" and 'ESC_' is
"APPLICATION PROGRAM COMMAND".  Not many terminal emulators support group 4,
but they are defined.

  And there are several commands under group 3 that are problematic.
Microsoft defined 'ESC[...p' (which is in the private use area of
ECMA-48) to redefine the keys on the keyboard (so beware of the text file
that does 'ESC[13;"deltree c:\"p').

And there are code that do more than just define colors, they can define
fonts, move the cursor, define locked regions on the screen, set or clear
tab stops, insert lines or characters on the screen, delete lines or
characters on the screen, and even define print parameters.  But oddly, no
defined sequence to query the size of the screen (fancy that!).

  Now, not all terminial emulators support all of ECMA-48, but it's a large
standard (and there is plenty of room for terminal emulators to extend
support with private codes).  

> If I had to standardize it I'd use custom escape sequences, similar to
> those already in use but optimized to be no longer than necessary that
> ALWAYS end in a ';'. 

  Hard to enforce, and the ending in ';' is problematic with respect to the
current standard.  For instance, to set the foreground color blinking and
the background color:

	ESC[31;42;5m

> This is not really text editor friendly, but avoids
> having to escape the escape caracter (I'm looking at you XML), makes it
> easy to parse/strip the escape sequences and if you don't you at least get
> very short spaghetti.

  So how would you define the control sequences?

  One thing I noticed with gemini://konpeito.media/ is that the default page
was very hard for me to read, but that's because the page made one
assumption that isn't universally true---that the default background color
is black.  I don't use a black background on my terminals.

> In any case I'm for filtering out unwanted escape codes.

  That's what I do, only I filter out all escape codes, since I don't want
the screen to mess up and my program get confused as to what is where.

  -spc

[1]	32, or space, is special in that it can be treated as a control code
	(part of the unit separator group starting with 28), or the
	graphical portion (even though it has no graphical representation). 
	And 127 is technically not part of any control group, as it
	technically means "ignore me entirely" [2].

[2]	It comes from paper tape, which originally were 7 bits long, and the
	hole represents a 1.  If there was an error, to fix it, all 7 bits
	were punched out (representing 127) and and reading side was known
	to ignore that character entirely.

[3]	If you are using the UTF-8 encoding scheme, these characters will be
	encoded as UTF-8 codepoints, so 155 is encoded as the byte sequence
	194,155, as if things weren't bad enough.

From jmcbray@carcosa.net  Thu Dec 12 15:18:24 2019
From: jmcbray@carcosa.net (Jason McBrayer)
Date: Thu, 12 Dec 2019 10:18:24 -0500
Subject: Color and escape codes in text/gemini
In-Reply-To: <20191212003040.GE13912@brevard.conman.org> (Sean Conner's
 message of "Wed, 11 Dec 2019 19:30:40 -0500")
References: <9600DC9D-09CF-46E6-90D1-A862D719A773@disroot.org>
 <20191212003040.GE13912@brevard.conman.org>
Message-ID: <87lfrhmv27.fsf@cassilda.carcosa.net>

Sean Conner <sean at conman.org> writes:

> It was thus said that the Great Baschdel once stated:
>> In any case I'm for filtering out unwanted escape codes.
>   That's what I do, only I filter out all escape codes, since I don't
> want the screen to mess up and my program get confused as to what is
> where.

It seems to me that the idea of putting ANSI escape codes
(oversimplifying here; thanks Sean for the more complete explanation)
makes a number of assumptions:

1. That all Gemini clients are running on a terminal (emulator) that
   interprets ANSI escape codes (or the client provides enough terminal
   emulation to interpret these escape codes).

2. That ANSI escape codes sent by Gemini pages will only interact with
   your terminal in a safe way.

3. That it is desirable for untrusted content from the Internet to be
   able to control your terminal.

I, honestly, don't think any of these are true.

My suggestion: that the text/gemini format not be allowed to contain
ANSI escape codes, even with a MIME type specifying an encoding that
could contain them. If you want to send control codes, it should be sent
with an appropriate MIME type. I'm not sure what that would be,
actually ? is text/plain; charset=us-ascii correct? Or does it need to
be application/something?

-- 
Jason McBrayer      | ?Strange is the night where black stars rise,
jmcbray at carcosa.net | and strange moons circle through the skies,
                    | but stranger still is lost Carcosa.?
                    | ? Robert W. Chambers,The King in Yellow

From b__m__e@mailfence.com  Fri Dec 13 00:27:07 2019
From: b__m__e@mailfence.com (Brian Evans)
Date: Fri, 13 Dec 2019 01:27:07 +0100 (CET)
Subject: Color and escape codes in text/gemini
Message-ID: <703668518.87564.1576196827692@ichabod.co-bxl>

This is interesting timing. Bombadillo v1.x supported printing any escape codes it received.
With 2.0.0 we eliminated that support in favor of filtering out escape codes (likely in a naive 
but mostly functional way andy time `\033` is encountered anything that follows it until a 
`[A-Za-z]` character is reached will not be rendered (including the terminal character that 
ends the sequence). That is where things stand with Bombadillo's mainline release right 
now.

However, there has been an issue in our backlog for awhile now to reinstate color. I worked
on this a bit over the last week and have done the following:

I have added a "theme" (previoiusly there was only 'normal' and 'inverse') called 'color'. This
theme looks identical to the normal theme, except it will render the escape sequences. This
approach allows the user to move in and out of this rendering at will. If something doesnt
look right in `color` mode they can always switch to `normal` mode. Sadly, color is not
compatible with `inverse` mode since I use escape sequences to achieve the inverse effect 
and it is immediately removed anyone tosses out a `\033[0m`.

I am kind of opposed to developing any syntax for text/gemini that would treat escape
sequences any differently than any other text. Clients can choose how and if to implement
escape codes in a way that makes sense to them and their user-base. I think most clients
will be well served taking Sean's approach of filtering out escape codes. 

For those wanting to keep clients lightweight a simple string replace for `\033` to any other
character (maybe a box?) will make the escape codes not render, but still show document 
intent. This is REALLY easy to implement in just about any language.

I really like the usage of color on cat's recent page and hope to see more people using
color. I do 100% agree with Sean though that using color is often presumptuous and I have
ran into issues where my terminal's bg color did not mesh well at all with the colors being
used by an application (which is partly why bombadillo's tui does not use colors, only
inversion).

I also agree with Sean (it seems to be happening a lot this time around) that getting
closer to an answer on reflow eventually would be a good idea. As it stands I am 
wrapping but doing no reflow whatsoever.

--?
Sent with https://mailfence.com
Secure and private email

From aaron@ajanse.me  Fri Dec 13 00:36:29 2019
From: aaron@ajanse.me (Aaron Janse)
Date: Fri, 13 Dec 2019 00:36:29 +0000
Subject: Text reflow woes (or: I want bullets back!)y
Message-ID: <07cd386e-618e-40d6-9cac-8abaabbc9461@www.fastmail.com>

> I can't believe how simple that is. A leading space for fixed content is
> ridiculously simple. I love it.

> I acknowledge that this solution is not perfect and e.g. won't gracefully
> handle bulleted lists with items which are more than one line long

We could avoid this problem if we treat lines starting with spaces as a way
to force a line break. This would cause code to not wrap, as desired, and it
allows for wrapping lists simply by not putting a space in the 2nd+ lines.

Example:

* Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod
tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,
quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo.
* Consequat duis aute irure dolor in reprehenderit in voluptate velit esse
cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non
proident, sunt in culpa qui officia deserunt mollit anim id est laborum.

As a bonus, this could be a way to represent 80+ column lines (maybe very long
links) without having 80+ column gemini source code (which makes life easier
for simple clients).

Maybe someone already said all of this. If they did, sorry for being repetitive.

From lazar.michael22@gmail.com  Fri Dec 13 05:02:20 2019
From: lazar.michael22@gmail.com (Michael Lazar)
Date: Fri, 13 Dec 2019 00:02:20 -0500
Subject: Color and escape codes in text/gemini
In-Reply-To: <87lfrhmv27.fsf@cassilda.carcosa.net>
References: <9600DC9D-09CF-46E6-90D1-A862D719A773@disroot.org>
 <20191212003040.GE13912@brevard.conman.org>
 <87lfrhmv27.fsf@cassilda.carcosa.net>
Message-ID: <CAFTy05ZXpvEMHOHoBxmKBbbPokH3+1nmkEGTydpy0eNpZ3KsrQ@mail.gmail.com>

On Thu, Dec 12, 2019 at 10:18 AM Jason McBrayer <jmcbray at carcosa.net> wrote:

> 1. That all Gemini clients are running on a terminal (emulator) that
>    interprets ANSI escape codes (or the client provides enough terminal
>    emulation to interpret these escape codes).
>
> 2. That ANSI escape codes sent by Gemini pages will only interact with
>    your terminal in a safe way.
>
> 3. That it is desirable for untrusted content from the Internet to be
>    able to control your terminal.
>
> I, honestly, don't think any of these are true.

I agree, and adding to this:

4. That gemini terminal clients write text directly to stdout.

Libraries like curses maintain their own internal screen buffer and don't allow
passing through raw escape codes. Doing so would likely break any TUI display
anyway, since escape codes could also change the cursor position.

My opinion is that ANSI escape codes should be neither endorsed nor prohibited
in the Gemini protocol. Even prohibiting them would add additional complexity,
because then servers would need to worry about what's a valid gemini document
and what isn't. Treat it as a fun little easter egg and leave it at that.

- mozz

From aaron@ajanse.me  Fri Dec 13 05:08:04 2019
From: aaron@ajanse.me (Aaron Janse)
Date: Fri, 13 Dec 2019 05:08:04 +0000
Subject: Color and escape codes in text/gemini
In-Reply-To: <CAFTy05ZXpvEMHOHoBxmKBbbPokH3+1nmkEGTydpy0eNpZ3KsrQ@mail.gmail.com>
References: <9600DC9D-09CF-46E6-90D1-A862D719A773@disroot.org>
 <20191212003040.GE13912@brevard.conman.org>
 <87lfrhmv27.fsf@cassilda.carcosa.net>
 <CAFTy05ZXpvEMHOHoBxmKBbbPokH3+1nmkEGTydpy0eNpZ3KsrQ@mail.gmail.com>
Message-ID: <4c108cf4-a647-4eae-917b-8d6b7299443f@www.fastmail.com>

> Even prohibiting them would add additional complexity,
> because then servers would need to worry about what's a valid gemini document
> and what isn't. Treat it as a fun little easter egg and leave it at that.

Wouldn't that lead to client support fragmentation? I agree that "prohobiting"
content on the protocol level would be difficult, but would we want to at
least "discourage" things such as ANSI color codes that are difficult to
implement and not part of the spec?

Also, maybe this is off-topic, but in my opinion, a lot of beauty of the gemini
spec is that the source code is so transparent. Once we have escape codes (and
invisible characters), however, the source code is much more opaque. I wouldn't
want to see source code displayed any differently by `cat` than when displayed
by `vim`, for example.

Just my two cents :-)

From Bradley@NorthTech.US  Sat Dec 14 23:26:20 2019
From: Bradley@NorthTech.US (Bradley D. Thornton)
Date: Sat, 14 Dec 2019 15:26:20 -0800
Subject: Color and escape codes in text/gemini
In-Reply-To: <CAFTy05ZXpvEMHOHoBxmKBbbPokH3+1nmkEGTydpy0eNpZ3KsrQ@mail.gmail.com>
References: <9600DC9D-09CF-46E6-90D1-A862D719A773@disroot.org>
 <20191212003040.GE13912@brevard.conman.org>
 <87lfrhmv27.fsf@cassilda.carcosa.net>
 <CAFTy05ZXpvEMHOHoBxmKBbbPokH3+1nmkEGTydpy0eNpZ3KsrQ@mail.gmail.com>
Message-ID: <316ad46f-53b1-8107-dd09-add240e93531@NorthTech.US>



On 12/12/2019 9:02 PM, Michael Lazar wrote:

> 
> My opinion is that ANSI escape codes should be neither endorsed nor prohibited
> in the Gemini protocol. Even prohibiting them would add additional complexity,
> because then servers would need to worry about what's a valid gemini document
> and what isn't. Treat it as a fun little easter egg and leave it at that.
> 

The way we handle this in the BBS world is as follows:

1.) If server is capable, then it checks or asks if the client is ANSI
capable.

2.) If the client supports ANSI (many do, and many don't) then ANSI is
served.

The level of complication is mitigated by this approach, especially with
regards to client implementation.

I would note that many on this list expressed interest and were
supportive of the effort, while using the approach above would not
disenfranchise those not interested.

-- 
Bradley D. Thornton
Manager Network Services
http://NorthTech.US
TEL: +1.310.421.8268

From Bradley@NorthTech.US  Sat Dec 14 23:46:18 2019
From: Bradley@NorthTech.US (Bradley D. Thornton)
Date: Sat, 14 Dec 2019 15:46:18 -0800
Subject: New server
In-Reply-To: <d317311d-bb0c-5c6a-91f1-c75badcf51d7@lavabit.com>
References: <CAN7PwngZPjwwsvbOy7yFRfH5Y-uOqoTeHTLWJ8t4mSkSmiaCFQ@mail.gmail.com>
 <d317311d-bb0c-5c6a-91f1-c75badcf51d7@lavabit.com>
Message-ID: <20084c3b-9d8f-43f5-5bca-625f32026095@NorthTech.US>



On 12/7/2019 5:32 AM, James Tomasino wrote:
> This is brilliant, cat. I love everything about it. I'm listening to
> Side A now and really into it.
> 
> Having content available on the protocol that isn't ABOUT the protocol
> is key to its success. I really appreciate your work on that front and
> everyone else that journals or otherwise shares information.
>

I was actually astonished when I first visited the site (I hope cat
publishes some heavy metal, actually ;) ).

When it first came up in Elpher I thought, WTF? this looks like ANSI art
in a terminal that doesn't support it, then realized it basically was lol.


> As for the escape codes & color... I'm all for it. I love to see
> boundaries pushed for creativity. Will it mess up in some clients? Sure.
> But it's still awesome fun.
>

It doesn't have to. With respect to my earlier post a few mins ago,
here's three FOSS examples of how it can be, and has been for decades,
supported without any brain pain:

https://enigma-bbs.github.io/

https://github.com/wwivbbs/wwiv

https://gitlab.com/magickabbs


Some BBSes support ANSI, some don't. Some terminal clients, including
both Telnet and SSH support it, and some don't. Historic anecdotal
evidence suggests it hasn't broken anything :)


-- 
Bradley D. Thornton
Manager Network Services
http://NorthTech.US
TEL: +1.310.421.8268

From sean@conman.org  Sun Dec 15 00:02:06 2019
From: sean@conman.org (Sean Conner)
Date: Sat, 14 Dec 2019 19:02:06 -0500
Subject: Color and escape codes in text/gemini
In-Reply-To: <316ad46f-53b1-8107-dd09-add240e93531@NorthTech.US>
References: <9600DC9D-09CF-46E6-90D1-A862D719A773@disroot.org>
 <20191212003040.GE13912@brevard.conman.org>
 <87lfrhmv27.fsf@cassilda.carcosa.net>
 <CAFTy05ZXpvEMHOHoBxmKBbbPokH3+1nmkEGTydpy0eNpZ3KsrQ@mail.gmail.com>
 <316ad46f-53b1-8107-dd09-add240e93531@NorthTech.US>
Message-ID: <20191215000206.GC24166@brevard.conman.org>

It was thus said that the Great Bradley D. Thornton once stated:
> On 12/12/2019 9:02 PM, Michael Lazar wrote:
> 
> > My opinion is that ANSI escape codes should be neither endorsed nor prohibited
> > in the Gemini protocol. Even prohibiting them would add additional complexity,
> > because then servers would need to worry about what's a valid gemini document
> > and what isn't. Treat it as a fun little easter egg and leave it at that.
> 
> The way we handle this in the BBS world is as follows:
> 
> 1.) If server is capable, then it checks or asks if the client is ANSI
> capable.
> 
> 2.) If the client supports ANSI (many do, and many don't) then ANSI is
> served.
> 
> The level of complication is mitigated by this approach, especially with
> regards to client implementation.
> 
> I would note that many on this list expressed interest and were
> supportive of the effort, while using the approach above would not
> disenfranchise those not interested.

  And thus we get user-agent strings being sent.

  -spc (I'm just saying ... )


From cat@ff3366.com  Sun Dec 15 00:02:39 2019
From: cat@ff3366.com (Cat)
Date: Sun, 15 Dec 2019 11:02:39 +1100
Subject: New server
In-Reply-To: <20084c3b-9d8f-43f5-5bca-625f32026095@NorthTech.US>
References: <CAN7PwngZPjwwsvbOy7yFRfH5Y-uOqoTeHTLWJ8t4mSkSmiaCFQ@mail.gmail.com>
 <d317311d-bb0c-5c6a-91f1-c75badcf51d7@lavabit.com>
 <20084c3b-9d8f-43f5-5bca-625f32026095@NorthTech.US>
Message-ID: <CAN7PwnhiHqztujqt6uP3P_1D6-6M5uwHmeTYcVZ95dq05OwaRw@mail.gmail.com>

On Sun, Dec 15, 2019 at 10:46 AM Bradley D. Thornton
<Bradley at northtech.us> wrote:
> I was actually astonished when I first visited the site (I hope cat
> publishes some heavy metal, actually ;) ).

It would be my absolute pleasure. Stay tuned.


<3
cat

From aaron@ajanse.me  Sun Dec 15 04:49:56 2019
From: aaron@ajanse.me (Aaron Janse)
Date: Sun, 15 Dec 2019 04:49:56 +0000
Subject: Text reflow woes (or: I want bullets back!)y
Message-ID: <453074e5-6d56-4559-9575-f88fdf6991b0@www.fastmail.com>

I've been thinking about this for a while. What's the purpose of wrapping line
breaks in the first place? Why not just have super long lines for text that
should be reflowed (then *soft*-wrap in the text editor)?

I understand that reflowing could be complex for simple clients, but couldn't
they just rely on their display mechanism's (e.g. a terminal's) wrapping
system?

I imagine that the answer is very obvious. I just want to make sure that I
understand before spewing any more opinions :-)

From tomasino@lavabit.com  Sun Dec 15 16:33:38 2019
From: tomasino@lavabit.com (James Tomasino)
Date: Sun, 15 Dec 2019 16:33:38 +0000
Subject: Text reflow woes (or: I want bullets back!)y
In-Reply-To: <453074e5-6d56-4559-9575-f88fdf6991b0@www.fastmail.com>
References: <453074e5-6d56-4559-9575-f88fdf6991b0@www.fastmail.com>
Message-ID: <c8ac8ab4-d0c0-8667-c6d2-42562fef5384@lavabit.com>

On 12/15/19 4:49 AM, Aaron Janse wrote:
> What's the purpose of wrapping line
> breaks in the first place?

There's a lot of examples further back in this chain. In short:

 - code snippets
 - poetry
 - ascii art
 - tables


From aaron@ajanse.me  Sun Dec 15 18:12:29 2019
From: aaron@ajanse.me (Aaron Janse)
Date: Sun, 15 Dec 2019 18:12:29 +0000
Subject: Text reflow woes (or: I want bullets back!)y
In-Reply-To: <c8ac8ab4-d0c0-8667-c6d2-42562fef5384@lavabit.com>
References: <453074e5-6d56-4559-9575-f88fdf6991b0@www.fastmail.com>
 <c8ac8ab4-d0c0-8667-c6d2-42562fef5384@lavabit.com>
Message-ID: <de46a073-3a0d-443c-8c37-d5dbcac66286@www.fastmail.com>

On Sun, Dec 15, 2019, at 4:33 PM, James Tomasino wrote:
> On 12/15/19 4:49 AM, Aaron Janse wrote:
> > What's the purpose of wrapping line
> > breaks in the first place?
> 
> There's a lot of examples further back in this chain. In short:
> 
> - code snippets
> - poetry
> - ascii art
> - tables

But none of these examples require reflowing text in the source code, right?
In markdown, if you want text to reflow, you just let it go past 80 columns,
or whatever the viewport width is. So this entire paragraph would have no
newlines in its source code.

fn main() {
    print!("But none of this text reflows because ")
    println!("it's less than the viewport width.")    
}

From tomasino@lavabit.com  Sun Dec 15 19:32:06 2019
From: tomasino@lavabit.com (James Tomasino)
Date: Sun, 15 Dec 2019 19:32:06 +0000
Subject: Text reflow woes (or: I want bullets back!)y
In-Reply-To: <de46a073-3a0d-443c-8c37-d5dbcac66286@www.fastmail.com>
References: <453074e5-6d56-4559-9575-f88fdf6991b0@www.fastmail.com>
 <c8ac8ab4-d0c0-8667-c6d2-42562fef5384@lavabit.com>
 <de46a073-3a0d-443c-8c37-d5dbcac66286@www.fastmail.com>
Message-ID: <69e83a1f-a34a-3d09-04be-6ed69a86028a@lavabit.com>

On 12/15/19 6:12 PM, Aaron Janse wrote:
> But none of these examples require reflowing text in the source code, right?
> In markdown, if you want text to reflow, you just let it go past 80 columns,
> or whatever the viewport width is. So this entire paragraph would have no
> newlines in its source code.
> 
> fn main() {
>     print!("But none of this text reflows because ")
>     println!("it's less than the viewport width.")    
> }

Source code can be longer than 80 columns. Also, some clients may not
want to use 80 column widths. We have mobile gopher clients favoring 40
columns.


From aaron@ajanse.me  Sun Dec 15 19:57:39 2019
From: aaron@ajanse.me (Aaron Janse)
Date: Sun, 15 Dec 2019 19:57:39 +0000
Subject: Text reflow woes (or: I want bullets back!)y
In-Reply-To: <69e83a1f-a34a-3d09-04be-6ed69a86028a@lavabit.com>
References: <453074e5-6d56-4559-9575-f88fdf6991b0@www.fastmail.com>
 <c8ac8ab4-d0c0-8667-c6d2-42562fef5384@lavabit.com>
 <de46a073-3a0d-443c-8c37-d5dbcac66286@www.fastmail.com>
 <69e83a1f-a34a-3d09-04be-6ed69a86028a@lavabit.com>
Message-ID: <14f39cbb-cc74-4f27-bdf0-268bb35eca62@www.fastmail.com>

On Sun, Dec 15, 2019, at 7:32 PM, James Tomasino wrote:
> On 12/15/19 6:12 PM, Aaron Janse wrote:
> > But none of these examples require reflowing text in the source code, right?
> > In markdown, if you want text to reflow, you just let it go past 80 columns,
> > or whatever the viewport width is. So this entire paragraph would have no
> > newlines in its source code.
> > 
> > fn main() {
> >   print!("But none of this text reflows because ")
> >   println!("it's less than the viewport width.") 
> > }
> 
> Source code can be longer than 80 columns. Also, some clients may not
> want to use 80 column widths. We have mobile gopher clients favoring 40
> columns.

Correct. I should never have said "80 columns." Instead, I should have said
"viewport width" each time.

The problem with wrapping code when it gets wider than the viewport, as said
previously on this mailing list, is that it breaks semantic meaning,
expecially for languages like Python. 

One alternative for clients is behaving like `less`: truncate code
horizontally and require the viewport to be widened in order to select/copy
code with the cursor. This doesn't seem much easier to copy code from than
simply widening the viewport until code is no longer wrapped.

Or, clients take the approach of Github on mobile: truncate code visually but
allow it to be properly copied graphically. But, couldn't this work for
wrapping code, too? Most graphical text editors will show long lines of code
as wrapped but, when copied, long lines preserve their original line breaks.

Maybe I'm missing something.

From b__m__e@mailfence.com  Mon Dec 16 01:53:32 2019
From: b__m__e@mailfence.com (Brian Evans)
Date: Mon, 16 Dec 2019 02:53:32 +0100 (CET)
Subject: Text reflow woes (or: I want bullets back!)y
Message-ID: <1367854366.219683.1576461212912@ichabod.co-bxl>

I believe, once again, we are wading into territory where wrapping
and reflowing are being conflated. 

I do not know of any client that scrolls horizontally and I do not
imagine people will begin writing them since they would have
to code that from scratch rather than let their terminal handle
wrapping and scrolling. So wrapping seems like it will be a
part of most clients. 

Wrapping, for our purposes, can be thought of as adding
newlines to text to fit a width (I agree that viewport/termwidth 
makes sense in most situations).

Reflow seems to be the opposite of wrapping: the removal
of newlines and more than one space character in a row.

Reflowing text necessarily creates long lines of text... that will
then be wrapped.

I definitely want to find a way to make the distinction in
text/gemini documents. At present, wrapping is the default
that is happening for the vast majority of clients. As such, I
remain of the position that wrapped content should remain the
default and we should add a syntax of some form or other to
declare reflowed text. I am of the opinion that this syntax should
include exclusively visible characters (even if a field separator or
some other mostly unused ascii char would be convenient in
some respects).

Lists tend to get brought up in this conversation a good bit. The 
way I see it, lists work fine in the current, wrapped, geminispace.
Yes, a line may wrap, but it is clear that it is still part of the above
line since a new list indicator has not been seen (1, -, <bullet>, etc).
Wrapping does make Python a pain to look at... but a user can always
save the document and open it in any editor they like. I would be
surprised to see python code in a text/gemini file anyway as that
filetype certainly can, but is not meant to provide code and will be
predominantly used for other things. Users can always link to code
files that will get rendered in whatever reader they have configured
for such a purpose.

--?
Sent with https://mailfence.com
Secure and private email

From aaron@ajanse.me  Mon Dec 16 02:35:19 2019
From: aaron@ajanse.me (Aaron Janse)
Date: Sun, 15 Dec 2019 18:35:19 -0800
Subject: Text reflow woes (or: I want bullets back!)y
In-Reply-To: <1367854366.219683.1576461212912@ichabod.co-bxl>
References: <1367854366.219683.1576461212912@ichabod.co-bxl>
Message-ID: <f8432dc5-17cf-4b0c-b687-d71607d60ed0@www.fastmail.com>

On Sun, Dec 15, 2019, at 5:53 PM, Brian Evans wrote:
> I believe, once again, we are wading into territory where wrapping
> and reflowing are being conflated. 

Wow. I absolutely did make this mistake. Thank you for clarifying.

The speculative spec states:
> In order to facilitate a comfortable user experience with simple
> clients which do not implement reflowing, authors SHOULD limit the
> width of lines to 78 characters, excluding CRLF pairs.

I got so caught up in the false dichotomy of either reflowing or 80-column
text that I never questioned why source code is hard-wrapped in the first
place. 

> At present, wrapping is the default that is happening for the vast majority
> of clients

I agree. The spec's justification for suggesting that source code is
hard-wrapped is the idea that it makes life easier for simple client.

And yet:
1. It's much easier for simple clients to wrap than to reflow
2. Afaik, most simple clients won't even need to worry about wrapping because
   it will already be handled by their output medium (e.g. terminal, browser).

>From a while ago:
> Text reflow IS A MUST. We live in a world of wildly varying screen sizes
> these days. The trend is clearly headed towards polarization: huge 22'+
> desktop screens in one corner, small less than 7' smartphone screens in the
> other. Nothing in the middle. There's no way you're going to get decent
> presentation of non reflown text on both kinds of displays. No matter how
> many kludgy rules you instate on default width, max before forced wrap, etc.

All of this is completely possible without reflow. All we need to do is to
state in the spec that text MUST NOT be hard-wrapped at 80 columns unless it's
supposed to be displayed that way.

tl;dr If the spec is changed to discourage hard-wrapping source code, there'
would be no need for reflow in order to have text fit the width of a client's
screen. This would make life much easier for both authors and readers using
the gemini protocol.

Pardon my ignorance if the above is what everyone else was already thinking.

From sean@conman.org  Mon Dec 16 05:40:32 2019
From: sean@conman.org (Sean Conner)
Date: Mon, 16 Dec 2019 00:40:32 -0500
Subject: Text reflow woes (or: I want bullets back!)y
In-Reply-To: <f8432dc5-17cf-4b0c-b687-d71607d60ed0@www.fastmail.com>
References: <1367854366.219683.1576461212912@ichabod.co-bxl>
 <f8432dc5-17cf-4b0c-b687-d71607d60ed0@www.fastmail.com>
Message-ID: <20191216054032.GD24166@brevard.conman.org>

It was thus said that the Great Aaron Janse once stated:
> On Sun, Dec 15, 2019, at 5:53 PM, Brian Evans wrote:
> 
> >From a while ago:
> > Text reflow IS A MUST. We live in a world of wildly varying screen sizes
> > these days. The trend is clearly headed towards polarization: huge 22'+
> > desktop screens in one corner, small less than 7' smartphone screens in the
> > other. Nothing in the middle. There's no way you're going to get decent
> > presentation of non reflown text on both kinds of displays. No matter how
> > many kludgy rules you instate on default width, max before forced wrap, etc.
> 
> All of this is completely possible without reflow. All we need to do is to
> state in the spec that text MUST NOT be hard-wrapped at 80 columns unless it's
> supposed to be displayed that way.

  How can you determine if text is text or source code?  This is text, and this

local opts =
{
  { "c" , "cert"     , true    , function(c) CERT  = c    end },
  { "k" , "key"      , true    , function(k) KEY   = k    end },
  { "n" , "noverify" , false   , function()  NOVER = true end },
  { 'h' , "help"     , false   , function()
      io.stderr:write(string.format(usage,arg[0]))
      os.exit(false,true)
    end
  },
}

if #arg == 0 then
  io.stderr:write(string.format(usage,arg[0]))
  os.exit(false,true)
end

URL = arg[getopt(arg,opts)]
nfl.spawn(main,URL)
nfl.client_eventloop()

is source code.  Both are less than 80 characters in length.

  How do you determine when to wrap and when to reflow?

  I would also like to remind others that not only have I proposed a way to
designate reflow/verbatim text rendering:

	https://lists.orbitalfox.eu/archives/gemini/2019/000114.html

(under the SAME suject line, from back in September no less!) but I also
have set up some reflowing tests on my Gemini site:

	https://lists.orbitalfox.eu/archives/gemini/2019/000127.html

If anyone would like to test their client for wrapping purposes, this link
might be beneficial:

	gemini://gemini.conman.org/test/wrap;1500

  -spc (I like my bikesheds green, by the way ... )


From aaron@ajanse.me  Mon Dec 16 05:50:23 2019
From: aaron@ajanse.me (Aaron Janse)
Date: Sun, 15 Dec 2019 21:50:23 -0800
Subject: Text reflow woes (or: I want bullets back!)y
In-Reply-To: <20191216054032.GD24166@brevard.conman.org>
References: <1367854366.219683.1576461212912@ichabod.co-bxl>
 <f8432dc5-17cf-4b0c-b687-d71607d60ed0@www.fastmail.com>
 <20191216054032.GD24166@brevard.conman.org>
Message-ID: <86d7af23-fc3d-49e6-9bd6-f68c84fe8899@www.fastmail.com>

On Sun, Dec 15, 2019, at 9:40 PM, Sean Conner wrote:
> It was thus said that the Great Aaron Janse once stated:
> > All of this is completely possible without reflow. All we need to do is to
> > state in the spec that text MUST NOT be hard-wrapped at 80 columns unless
> > it's supposed to be displayed that way.
> 
> How can you determine if text is text or source code? Both are less than 80
> characters in length.

What I meant to say is: my proposal is to only insert newlines into the gemini
source code if those newlines are expected to be preserved by the client.

> How do you determine when to wrap and when to reflow?

My suggestion was to wrap in the client, never in the source code, and to
never reflow.

> If anyone would like to test their client for wrapping purposes, this link
> might be beneficial:
> 
> 	gemini://gemini.conman.org/test/wrap;1500

I did see that. Your site is always the first site I test on gemini clients :-)

From julien@typed-hole.org  Tue Dec 24 16:44:31 2019
From: julien@typed-hole.org (Julien Blanchard)
Date: Tue, 24 Dec 2019 17:44:31 +0100
Subject: [ANN] Castor, a graphical Gemini browser
Message-ID: <0c8b3f61-1ef9-6ac7-63d2-b3a239931101@typed-hole.org>

Hey Geminauts,

I just pushed the initial release of Castor, a GTK Gemini browser. There 
are no binaries yet but if you have a Rust toolchain installed it should 
be easy to compile.

Source is here https://git.sr.ht/~julienxx/castor

I would love some feedback on the app if you have ideas, criticism...

Have some nice Winter solstice festivities!

-- julienxx


From jmcbray@carcosa.net  Mon Dec 30 12:16:56 2019
From: jmcbray@carcosa.net (Jason McBrayer)
Date: Mon, 30 Dec 2019 07:16:56 -0500
Subject: [ANN] Castor, a graphical Gemini browser
In-Reply-To: <0c8b3f61-1ef9-6ac7-63d2-b3a239931101@typed-hole.org> (Julien
 Blanchard's message of "Tue, 24 Dec 2019 17:44:31 +0100")
References: <0c8b3f61-1ef9-6ac7-63d2-b3a239931101@typed-hole.org>
Message-ID: <87fth2knyf.fsf@cassilda.carcosa.net>

Julien Blanchard <julien at typed-hole.org> writes:

>
> I would love some feedback on the app if you have ideas, criticism...
>
Looking nice! I haven't had a chance to try building it, but I like that
you're working on it.

-- 
Jason McBrayer      | ?Strange is the night where black stars rise,
jmcbray at carcosa.net | and strange moons circle through the skies,
                    | but stranger still is lost Carcosa.?
                    | ? Robert W. Chambers,The King in Yellow

